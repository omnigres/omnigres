$schema: "https://raw.githubusercontent.com/omnigres/omnigres/master/pg_yregress/schema.json"
instance:
  config:
    shared_preload_libraries: */env/OMNI_SO
    max_worker_processes: 64
  init:
  - |
    create table users
    (
        id     integer primary key generated always as identity,
        handle text,
        name   text
      )
  - |
    insert
    into
        users (handle, name)
    values
        ('johndoe', 'John')
  - set session omni_httpd.no_init = true
  - create extension omni_httpd cascade
  - create extension omni_httpc cascade
  - call omni_httpd.wait_for_configuration_reloads(1)
  - |
    with
     listener as (insert into omni_httpd.listeners (address, port) values ('127.0.0.1', 0) returning id),
     handler as (insert into omni_httpd.handlers (query)
         select
             omni_httpd.cascading_query(name, query order by priority desc nulls last)
         from
             (values
                  ('hello',
                   $$SELECT omni_httpd.http_response(headers => array[omni_http.http_header('content-type', 'text/html')], body => 'Hello, <b>' || users.name || '</b>!')
        FROM request
        INNER JOIN users ON string_to_array(request.path,'/', '') = array[NULL, 'users', users.handle]
       $$, 1),
                  ('abort', $$select omni_httpd.abort() from request where request.path = '/abort'$$, 1),
                  ('custom-content-length',
                   $$select omni_httpd.http_response(headers => array[omni_http.http_header('content-length', '10')], body => '0123456789')
                   from request where request.path = '/custom-content-length'$$, 1),
                  ('custom-content-length-1',
                   $$select omni_httpd.http_response(headers => array[omni_http.http_header('content-length', '3')], body => '0123456789')
                   from request where request.path = '/custom-content-length-1'$$, 1),
                  ('custom-content-length-2',
                   $$select omni_httpd.http_response(headers => array[omni_http.http_header('content-length', '100')], body => '0123456789')
                   from request where request.path = '/custom-content-length-2'$$, 1),
                  ('no-content-length',
                   $$select omni_httpd.http_response(body => null)
                   from request where request.path = '/no-content-length'$$, 1),
                  ('0-content-length',
                   $$select omni_httpd.http_response(body => '')
                   from request where request.path = '/0-content-length'$$, 1),
                  ('headers',
                   $$SELECT omni_httpd.http_response(body => (select
                              json_object_agg(h.name, h.value)
                          from
                              unnest(request.headers) h
                          )) FROM request WHERE request.path = '/headers'$$,
                   1),
                  ('connecting-ip', $$select omni_httpd.http_response(omni_http.http_header_get(request.headers,'Omnigres-Connecting-IP')) from request
                    where request.path = '/connecting-ip' $$, 1),
                  ('echo',
                   $$SELECT omni_httpd.http_response(body => request.body) FROM request WHERE request.path = '/echo'$$,
                   1),
                  -- proxy proxies to /
                  ('proxy',
                   $$select omni_httpd.http_proxy('http://127.0.0.1:' || (select effective_port from omni_httpd.listeners where port = 0)) from request where request.path = '/proxy'$$,
                   1),
                  -- This validates that `request CTE` can be casted to http_request
                  ('http_request',
                   $$SELECT omni_httpd.http_response(body => request.*::omni_httpd.http_request::text) FROM request WHERE request.path = '/http_request'$$,
                   1),
                  ('not_found',
                   $$SELECT omni_httpd.http_response(status => 404, body => json_build_object('method', request.method, 'path', request.path, 'query_string', request.query_string))
        FROM request$$, 0)) as routes(name, query, priority)
         returning id)
    insert
    into
     omni_httpd.listeners_handlers (listener_id, handler_id)
    select
     listener.id,
     handler.id
    from
     listener,
     handler
  - call omni_httpd.wait_for_configuration_reloads(1)

tests:
- name: query dump
  query: |
    with response as (select * from omni_httpc.http_execute(
      omni_httpc.http_request('http://127.0.0.1:' ||
      (select effective_port from omni_httpd.listeners where port = 0) || '/test?q=1')))
    select
    response.status,
    response.message,
    convert_from(response.body, 'utf-8')::json as body
    from response
  results:
  - status: 404
    message: Not Found
    body:
      method: GET
      path: /test
      query_string: q=1
- name: username
  query: |
    with response as (select * from omni_httpc.http_execute(
      omni_httpc.http_request('http://127.0.0.1:' ||
      (select effective_port from omni_httpd.listeners where port = 0) || '/users/johndoe')))
    select
    response.status,
    (select
         json_agg(json_build_object(h.name, h.value))
     from
         unnest(response.headers) h
     where
         h.name = 'content-type') as headers,
    convert_from(response.body, 'utf-8') as body
    from response
  results:
  - status: 200
    # Check for content-type
    headers:
    - content-type: text/html
    body: Hello, <b>John</b>!
- name: echo
  query: |
    with response as (select * from omni_httpc.http_execute(
      omni_httpc.http_request('http://127.0.0.1:' ||
      (select effective_port from omni_httpd.listeners where port = 0) || '/echo', method => 'POST',
       body => 'hello world')))
    select
    response.status,
    (select
         json_agg(json_build_object(h.name, h.value))
     from
         unnest(response.headers) h
     where
         h.name = 'content-type') as headers,
    convert_from(response.body, 'utf-8') as body
    from response
  results:
  - status: 200
    # Check for content-type
    headers:
    - content-type: application/octet-stream
    body: hello world
- name: client request's headers
  query: |
    with response as (select * from omni_httpc.http_execute(
      omni_httpc.http_request('http://127.0.0.1:' ||
                              (select effective_port from omni_httpd.listeners where port = 0) || '/headers',
                              headers => array [ omni_http.http_header('Test', 'Val')]
          )))
    select
    response.status,
    convert_from(response.body, 'utf-8')::json ->> 'test' as test_hdr
    from response
  results:
  - status: 200
    test_hdr: Val
- name: Omnigres-Connecting-IP header
  query: |
    with response as (select *
                      from omni_httpc.http_execute(
                              omni_httpc.http_request('http://127.0.0.1:' ||
                                                      (select effective_port from omni_httpd.listeners where port = 0) ||
                                                      '/connecting-ip')))
    select response.status,
           convert_from(response.body, 'utf-8') as ip
    from response
  results:
  - status: 200
    ip: 127.0.0.1
- name: attempting to override Omnigres-Connecting-IP header
  query: |
    with response as (select *
                      from omni_httpc.http_execute(
                              omni_httpc.http_request('http://127.0.0.1:' ||
                                                      (select effective_port from omni_httpd.listeners where port = 0) ||
                                                      '/connecting-ip',
                                                      headers => array [omni_http.http_header('omnigres-connecting-ip', '255.255.255.255')]
                              )))
    select response.status,
           convert_from(response.body, 'utf-8') as ip
    from response
  results:
  - status: 200
    ip: 127.0.0.1
- name: should not duplicate content-length if it is set
  query: |
    with response as (select * from omni_httpc.http_execute(
      omni_httpc.http_request('http://127.0.0.1:' ||
      (select effective_port from omni_httpd.listeners where port = 0) || '/custom-content-length')))
    select
    response.status,
    (select
         json_agg(json_build_object(h.name, h.value))
     from
         unnest(response.headers) h
     where
         h.name = 'content-length') as headers,
    convert_from(response.body, 'utf-8') as body
    from response
  results:
  - status: 200
    headers:
    - content-length: 10
    body: 0123456789
- name: should resize the content if content-length is set low
  query: |
    with response as (select * from omni_httpc.http_execute(
      omni_httpc.http_request('http://127.0.0.1:' ||
      (select effective_port from omni_httpd.listeners where port = 0) || '/custom-content-length-1')))
    select
    response.status,
    convert_from(response.body, 'utf-8') as body
    from response
  results:
  - status: 200
    body: 012
- name: should not resize the content or modify the content-length if the set one overflows
  query: |
    with response as (select * from omni_httpc.http_execute(
      omni_httpc.http_request('http://127.0.0.1:' ||
      (select effective_port from omni_httpd.listeners where port = 0) || '/custom-content-length-2')))
    select
    response.status,
    (select
         json_agg(json_build_object(h.name, h.value))
     from
         unnest(response.headers) h
     where
         h.name = 'content-length') as headers,
    convert_from(response.body, 'utf-8') as body
    from response
  results:
  - status: 200
    headers:
    - content-length: 10
    body: 0123456789
- name: should set content-length 0 on an empty string body
  query: |
    with response as (select * from omni_httpc.http_execute(
      omni_httpc.http_request('http://127.0.0.1:' ||
      (select effective_port from omni_httpd.listeners where port = 0) || '/0-content-length')))
    select
    response.status,
    (select
         json_agg(json_build_object(h.name, h.value))
     from
         unnest(response.headers) h
     where
         h.name = 'content-length') as headers,
    response.body
    from response
  results:
  - status: 200
    headers:
    - content-length: 0
    body: \x
- name: should not set content-length if the handler response body is set to null
  query: |
    with response as (select * from omni_httpc.http_execute(
      omni_httpc.http_request('http://127.0.0.1:' ||
      (select effective_port from omni_httpd.listeners where port = 0) || '/no-content-length')))
    select
    response.status,
    (select
         json_agg(json_build_object(h.name, h.value))
     from
         unnest(response.headers) h
     where
         h.name = 'content-length') as headers,
    response.body
    from response
  results:
  - status: 200
    headers: null
    body: \x
- name: proxy
  query: |
    with response as (select * from omni_httpc.http_execute(
      omni_httpc.http_request('http://127.0.0.1:' ||
      (select effective_port from omni_httpd.listeners where port = 0) || '/proxy')))
    select
    response.status,
    convert_from(response.body, 'utf-8')::json as body
    from response
  results:
  - status: 404
    body:
      method: GET
      path: /
      query_string: null

# Previous version of this test also tested reloading configuration. Should we repeat that
# here?
