$schema: "https://raw.githubusercontent.com/omnigres/omnigres/master/pg_yregress/schema.json"
instance:
  init:
  - create extension omni_credentials cascade
  - create schema creds
  # FIXME: we use PATH because we can't set env variables yet
  - select omni_credentials.instantiate('creds', env_var => 'PATH')

tests:

- name: default metadata
  steps:
  - insert into creds.credentials (name, value) values ('a', 'b')
  - query: select kind, principal, scope from creds.credentials
    results:
      - kind: credential
        principal: yregress
        scope:
          all: true

- name: RLS
  steps:
  - insert into creds.credentials (name, value) values ('a', 'b')
  - create role other_role
  - grant usage on schema creds to other_role
  - grant select on all tables in schema creds to other_role
  - grant insert on table creds.credentials to other_role
  - set local role other_role
  - query: select kind, principal, scope from creds.credentials
    results: []
  - insert into creds.credentials (name, value) values ('a', 'b')
  - query: select kind, principal, scope from creds.credentials
    results:
      - kind: credential
        principal: other_role
        scope:
          all: true

- name: updating credential
  steps:
  - "insert into creds.credentials (name, value, scope) values ('a', 'b', '{\"for\": \"some\"}'), ('a', 'b', '{\"all\": true}')"
  - "update creds.credentials set scope = '{}' where scope = '{\"all\": true}'"
  - query: select kind, principal, scope from creds.credentials order by scope
    results:
      - kind: credential
        principal: yregress
        scope: {}
      - kind: credential
        principal: yregress
        scope:
          for: some

- name: deleting credential
  steps:
  - "insert into creds.credentials (name, value, scope) values ('a', 'b', '{\"for\": \"some\"}'), ('a', 'b', '{\"all\": true}')"
  - "delete from creds.credentials where scope = '{\"all\": true}'"
  - query: select kind, principal, scope from creds.credentials order by scope
    results:
      - kind: credential
        principal: yregress
        scope:
          for: some

- name: encrypts credentials on insert
  steps:
  - insert into creds.credentials (name, value) values ('a', 'b')
  - query: select count(*) from creds.encrypted_credentials where name = 'a'
    results:
    - count: 1
  - query: select value from creds.credentials
    results:
    - value: b

- name: encrypts credentials on update
  steps:
  - insert into creds.credentials (name, value) values ('a', 'b')
  - update creds.credentials set value = value || '123'
  - query: select count(*) from creds.encrypted_credentials where name = 'a'
    results:
    - count: 1
  - query: select value from creds.credentials
    results:
    - value: b123

- name: credentials are unique
  query: insert into creds.credentials (name, value) values ('a', 'b'), ('a','c')
  error: duplicate key value violates unique constraint "encrypted_credentials_uniq"

- name: credential removal cleans up encrypted credentials
  steps:
  - delete from creds.credentials
  - query: select count(*) from creds.encrypted_credentials
    results:
    - count: 0

