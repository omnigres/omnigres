$schema: "https://raw.githubusercontent.com/omnigres/omnigres/master/pg_yregress/schema.json"
instance:
  init:
  - create extension omni_txn cascade
  - create extension dblink
  - create extension omni_edbg
  - select dblink_connect('another_session', 'hostaddr=127.0.0.1 dbname=yregress user=yregress port=' || (select setting
                                                                                                          from pg_settings
                                                                                                          where name = 'port'))
  - create table inventory
    (
        id           serial primary key,
        product_name text,
        quantity     int
    )
  - insert into inventory (product_name, quantity)
    values ('Widget', 100)
  - |
    create or replace function call_other_session() returns void
        language plpgsql as
    $$
    begin
        perform dblink_exec('another_session',
                            'call omni_txn.retry($other$update inventory set quantity = quantity - 10$other$)');
        return;
    end;
    $$
  - create table retries
    (
        count     int,
        iso_level text
    )

tests:

# - name: retry should time out
#   transaction: false 
#   steps:
#     - CREATE TABLE timeout_test (i int)
#     - INSERT INTO timeout_test (i) VALUES (0)
#     - query: |
#         CALL omni_txn.retry(
#           $$ DO $DO$ BEGIN
#                UPDATE timeout_test SET i = i + 1;
#                PERFORM pg_sleep(0.02);
#              END $DO$ $$,
#           max_attempts => 100,
#           timeout_ms => 50
#         );
#       error: 'serialization failure'

- name: other errors pass through
  transaction: false
  tests:
  - query: call omni_txn.retry($$selec$$)
    transaction: false
    error: syntax error at or near "selec"
  - rollback

- name: can't be used inside of a transaction block
  tests:
  - query: call omni_txn.retry($$selec$$)
    transaction: false
    error: can't be used inside of a transaction block

- name: can't be used inside of a do block
  query: |
    do
    $$
        begin
            call omni_txn.retry('select');
        end;
    $$
  error: can't be used inside of a transaction block

- name: can't be used inside of a procedure
  steps:
  - |
    create procedure try()
        language plpgsql as
    $$
    begin
        call omni_txn.retry('select');
    end;
    $$
  - query: call try()
    error: can't be used inside of a transaction block

- name: can't be used inside of a function
  steps:
  - |
    create function try() returns void
        language plpgsql as
    $$
    begin
        call omni_txn.retry('select');
    end;
    $$
  - query: select try()
    error: can't be used inside of a transaction block

- name: can't be used inside of a function (SPI)
  steps:
  - |
    create function try() returns void
        language plpgsql as
    $$
    begin
        call omni_txn.retry('select');
    end;
    $$
  - query: call spi_exec('select try()')
    error: can't be used inside of a transaction block

- name: smoke test for retry
  transaction: false
  tests:
  - query: |
      call omni_txn.retry($$select quantity from inventory where product_name = 'Widget';
      select call_other_session() where omni_txn.current_retry_attempt() = 0;
      update inventory set quantity = quantity + 20 where product_name = 'Widget';
      insert into retries (count, iso_level) select omni_txn.current_retry_attempt(), current_setting('transaction_isolation');
      $$);
    transaction: false
  - query: select quantity
           from inventory
           where product_name = 'Widget'
    results:
    - quantity: 110
  - query: select count, iso_level
           from retries
    results:
    - count: 1
      iso_level: serializable

- name: max attempts
  transaction: false
  tests:
  - query: |
      call omni_txn.retry($$select quantity from inventory where product_name = 'Widget';
      select call_other_session() where omni_txn.current_retry_attempt() = 0;
      update inventory set quantity = quantity + 20 where product_name = 'Widget';
      $$, max_attempts => 0);
    transaction: false
    error: maximum number of retries (0) has been attempted
  - rollback

- name: no backoff values unless requested
  transaction: false
  tests:
  - query: |
      call omni_txn.retry($$select quantity from inventory where product_name = 'Widget';
      select call_other_session() where omni_txn.current_retry_attempt() < 10;
      update inventory set quantity = quantity + 20 where product_name = 'Widget';
      $$, 10, repeatable_read => true, collect_backoff_values => false);
    # (setting repeatable_read because a previous bug was treating `repeatable_read` as `collect_backoff_values`)
    transaction: false
  - query: select count(*)
           from omni_txn.retry_backoff_values()
    results:
    - count: 0

- name: backoff values
  transaction: false
  tests:
  - query: |
      call omni_txn.retry($$select quantity from inventory where product_name = 'Widget';
      select call_other_session() where omni_txn.current_retry_attempt() < 10;
      update inventory set quantity = quantity + 20 where product_name = 'Widget';
      $$, 10, collect_backoff_values => true);
    transaction: false
  - query: |
      select count(*) = 10 as "count",
             max(amount) < 10000 as "max",
             min(amount) >= 1 as "min",
             avg(amount) > 1 as "avg" -- everything as 1 should indicate some underlying error. Highly unlikely to ever happen by itself.
      from omni_txn.retry_backoff_values() as amount;
    results:
      - count: true
        max: true
        min:  true
        avg: true

- name: params
  transaction: false
  tests:
  - create table tab
    (
        i int,
        f float,
        t text
    )
  - |
    call omni_txn.retry('insert into tab values ($1,$2,$3);insert into tab values ($1,$2,$3)',
                        params => row (1,1.2,'text'::text))
  - query: select *
           from tab
    results:
    - i: 1
      f: 1.2
      t: text
    - i: 1
      f: 1.2
      t: text
  - drop table tab

- name: predicate locks set up
  transaction: false
  tests:
  - create table tab
    (
    )
  - name: ensure we are not in serializable mode yet
    query: select current_setting('transaction_isolation')
    results:
    - current_setting: read committed
  - |
    call omni_txn.retry(
            'select * from tab; create table locks as select * from pg_locks where mode = $$SIReadLock$$')
  - query: select count(*)
           from locks
    results:
    - count: 1
  - drop table locks
  - drop table tab