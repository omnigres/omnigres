$schema: "https://raw.githubusercontent.com/omnigres/omnigres/master/pg_yregress/schema.json"
instance:
  init:
  - create extension omni_session cascade
  - alter role yregress set search_path to omni_polyfill, pg_catalog, '$user', public
  - set search_path to omni_polyfill, pg_catalog, '$user', public

tests:

- name: create a new session if none exists
  steps:
  - query: select count(*) from omni_session.sessions
    results:
    - count: 0
  - select omni_session.session_handler(omni_httpd.http_request('/'))
  - name: ensure session var is set
    query: |
      select true as success from omni_session.sessions where sessions.id = omni_var.get('omni_session.session', null::omni_session.session_id)
    results:
    - success: true

- name: get a session if correct one exists
  steps:
  - query: select count(*) from omni_session.sessions
    results:
    - count: 0
  - select omni_session.session_handler(omni_httpd.http_request('/'))
  - query: select count(*) from omni_session.sessions
    results:
    - count: 1
  - select omni_var.set('omni_session.session', null::omni_session.session_id)
  - query: |
      select omni_session.session_handler(omni_httpd.http_request('/',
              headers => array[omni_http.http_header('cookie', '_session=' || id) ]::omni_http.http_headers))
      from omni_session.sessions
  - query: select count(*) from omni_session.sessions
    results:
    - count: 1
  - name: ensure session var is set
    query: |
      select true as success from omni_session.sessions where sessions.id = omni_var.get('omni_session.session', null::omni_session.session_id)
    results:
    - success: true

- name: get a new session if specified one exists
  steps:
  - query: select count(*) from omni_session.sessions
    results:
    - count: 0
  - select omni_session.session_handler(omni_httpd.http_request('/'))
  - query: select count(*) from omni_session.sessions
    results:
    - count: 1
  - select omni_var.set('omni_session.session', null::omni_session.session_id)
  - query: |
      select omni_session.session_handler(omni_httpd.http_request('/',
              headers => array[omni_http.http_header('cookie', '_session=d8f39ae9-3575-4a08-ae75-f55471587301') ]::omni_http.http_headers))
  - query: select count(*) from omni_session.sessions
    results:
    - count: 2
  - name: ensure session var is set
    query: |
      select true as success from omni_session.sessions where sessions.id = omni_var.get('omni_session.session', null::omni_session.session_id)
    results:
    - success: true

- name: response cookie is being set
  steps:
  - query: select count(*) from omni_session.sessions
    results:
    - count: 0
  - select omni_session.session_handler(omni_httpd.http_request('/'))
  - name: ensure session var is set
    query: |
      select true as success from omni_session.sessions where sessions.id = omni_var.get('omni_session.session', null::omni_session.session_id)
    results:
    - success: true
  - query: select value = '_session=' || sessions.id ||'; HttpOnly; Secure; SameSite=Lax' as result from unnest((omni_session.session_handler(omni_httpd.http_response(''))::omni_httpd.http_response).headers)
      inner join omni_session.sessions on true where name = 'set-cookie'
    results:
    - result: true


- name: response cookie with modified configuration is being set
  steps:
    - query: select count(*) from omni_session.sessions
      results:
        - count: 0
    - select omni_session.session_handler(omni_httpd.http_request('/'))
    - name: ensure session var is set
      query: |
        select true as success from omni_session.sessions where sessions.id = omni_var.get('omni_session.session', null::omni_session.session_id)
      results:
        - success: true
    - query: select value = '_session=' || sessions.id ||'; SameSite=Strict; Domain=example.com; Max-Age=1; Expires=Wed, 01 Jan 2025 12:24:01 GMT; Partitioned; Path=/path' as result from unnest((omni_session.session_handler(omni_httpd.http_response(''), secure => false, http_only => false, same_site => 'Strict', domain => 'example.com', max_age => 1, expires => 'Jan 1, 2025 12:24:01 GMT', partitioned => true, path => '/path')::omni_httpd.http_response).headers)
                                                                                                               inner join omni_session.sessions on true where name = 'set-cookie'
      results:
        - result: true

- name: response cookie must ensure Secure if SameSite=None
  steps:
    - query: select count(*) from omni_session.sessions
      results:
        - count: 0
    - select omni_session.session_handler(omni_httpd.http_request('/'))
    - name: ensure session var is set
      query: |
        select true as success from omni_session.sessions where sessions.id = omni_var.get('omni_session.session', null::omni_session.session_id)
      results:
        - success: true
    - query: select value = '_session=' || sessions.id ||'; Secure; SameSite=None; Domain=example.com; Max-Age=1; Partitioned; Path=/path' as result from unnest((omni_session.session_handler(omni_httpd.http_response(''), secure => false, http_only => false, same_site => 'None', domain => 'example.com', max_age => 1, partitioned => true, path => '/path')::omni_httpd.http_response).headers)
                                                                                                                                                  inner join omni_session.sessions on true where name = 'set-cookie'
      results:
        - result: true
- name: response cookie with invalid SameSite
  steps:
    - query: select count(*) from omni_session.sessions
      results:
        - count: 0
    - select omni_session.session_handler(omni_httpd.http_request('/'))
    - name: ensure session var is set
      query: |
        select true as success from omni_session.sessions where sessions.id = omni_var.get('omni_session.session', null::omni_session.session_id)
      results:
        - success: true
    - query: select value = '_session=' || sessions.id ||'; SameSite=Hello; Domain=example.com; Max-Age=1; Partitioned; Path=/path' as result from unnest((omni_session.session_handler(omni_httpd.http_response(''), secure => false, http_only => false, same_site => 'Hello', domain => 'example.com', max_age => 1, partitioned => true, path => '/path')::omni_httpd.http_response).headers)
                                                                                                                                                   inner join omni_session.sessions on true where name = 'set-cookie'

      error: "same_site should be Strict, Lax or None"