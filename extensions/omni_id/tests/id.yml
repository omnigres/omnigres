$schema: "https://raw.githubusercontent.com/omnigres/omnigres/master/pg_yregress/schema.json"
instance:
  init:
  - create extension omni_id
  - create extension omni_polyfill
  - alter role yregress set search_path to '$user', public, omni_polyfill, pg_catalog
  - set search_path to '$user', public, omni_polyfill, pg_catalog
  - select identity_type('my_id')
  - select identity_type('my_id1')
  - select identity_type('my_uuid', type => 'uuid', nextval => 'uuidv7()')
  - select identity_type('my_uuid1', type => 'uuid')

tests:

- name: smoke test (example)
  steps:
  - select identity_type('user_id');
  - select identity_type('order_id');
  - |
    create table users
    (
        id user_id primary key default user_id_nextval()
    )
  - |
    create table orders
    (
        id      order_id primary key default order_id_nextval(),
        user_id user_id not null references users (id)
    )
  # (intentional) mistake
  - query: select *
           from users
                    inner join orders
                               on orders.id = users.id
    error: "operator does not exist: order_id = user_id"

- name: conversion test
  steps:
  - select identity_type('user_id')
  - select user_id(1)
  - select user_id(null)

- name: conversion test (uuid)
  steps:
  - select identity_type('user_id', type => 'uuid')
  - select user_id(uuidv7())
  - select user_id(null)

- name: comparison failures
  tests:
  - query: select my_id(1) = 1
    name: can't just use integer
    error: "operator does not exist: my_id = integer"
  - query: select my_id(1) = my_id1(1)
    error: "operator does not exist: my_id = my_id1"

- name: nextval
  query: select my_id_nextval()
  results:
  - my_id_nextval: 1

- name: currval
  query: select my_id_currval()
  results:
  - my_id_currval: 1

- name: setval
  steps:
  - select my_id_setval(my_id(3))
  - query: select my_id_currval()
    results:
    - my_id_currval: 3

- name: uuid typing
  query: select my_uuid(gen_random_uuid()) = my_uuid1(gen_random_uuid())
  error: "operator does not exist: my_uuid = my_uuid1"

- name: uuid nextval
  query: select my_uuid_nextval() is not null not_null, pg_typeof(my_uuid_nextval()) as typ
  results:
  - not_null: true
    typ: my_uuid

- name: uuid nextval without uuidv7 in the search_path
  steps:
  - set search_path to public
  - query: select my_uuid_nextval() is not null not_null, pg_typeof(my_uuid_nextval()) as typ
    results:
    - not_null: true
      typ: my_uuid
