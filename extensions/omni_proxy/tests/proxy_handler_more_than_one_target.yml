$schema: "https://raw.githubusercontent.com/omnigres/omnigres/master/pg_yregress/schema.json"
instance:
  config:
    shared_preload_libraries: */env/OMNI_SO
    max_worker_processes: 64
  init:
  - set session omni_httpd.init_port = 0
  - create extension dblink
  - create extension omni_httpc cascade
  - create extension omni_httpd cascade
  - create extension omni_proxy cascade
  - create database another_db;
  - create database proxy_target_db;
  - select dblink_connect('proxy_target_db', 'hostaddr=127.0.0.1 dbname=proxy_target_db user=yregress port=' || (select setting
                                                                                                     from pg_settings
                                                                                                     where name = 'port'))
  - |
    create function make_request(path text, method omni_http.http_method default 'GET') returns setof omni_httpc.http_response
        language sql as
    $$
    select *
    from omni_httpc.http_execute(
            omni_httpc.http_request('http://127.0.0.1:' ||
                                    (select effective_port from omni_httpd.listeners) ||
                                    path, method => method,
                                    headers => array [omni_http.http_header('origin', 'http://example.com')]))
    $$
  - select omni_proxy.proxy_listener((select id from omni_httpd.listeners))

tests:

- name: Return route from target database when the route is found there
  steps:
  - query: select dblink_exec('proxy_target_db', 'create extension if not exists omni_httpd cascade')
  - query: select dblink_exec('proxy_target_db', 'create or replace function test_handler(omni_httpd.http_request) returns omni_httpd.http_outcome return omni_httpd.http_response(body => $$hello$$)')
  - query: select dblink_exec('proxy_target_db', $$
      create or replace view test_router as
      select
                  omni_httpd.urlpattern('/hello') as match, 'test_handler(omni_httpd.http_request)'::regprocedure as handler;
      $$ )
  - query: | 
      with response as (select * from make_request('/proxy_target_db/hello'))
      select response.status, convert_from(response.body, 'utf8') as body
      from response
    results:
    - status: 200
      body: hello

- name: Return 404 when there is more than one possible target and no way to chose
  steps:
  - query: select dblink_exec('proxy_target_db', 'create extension if not exists omni_httpd cascade')
  - query: select dblink_exec('proxy_target_db', 'create or replace function test_handler(omni_httpd.http_request) returns omni_httpd.http_outcome return omni_httpd.http_response(body => $$hello$$)')
  - query: select dblink_exec('proxy_target_db', $$
      create or replace view test_router as
      select
                  omni_httpd.urlpattern('/*?') as match, 'test_handler(omni_httpd.http_request)'::regprocedure as handler;
      $$ )
  - query: | 
      with response as (select * from make_request('/'))
      select response.status
      from response
    results:
    - status: 404
