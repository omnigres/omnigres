$schema: "https://raw.githubusercontent.com/omnigres/omnigres/master/pg_yregress/schema.json"
instance:
  init:
  - create extension omni_kube cascade
  - create extension omni_os cascade

tests:

- select omni_kube.load_kubeconfig((select value from omni_os.env where variable = 'HOME') || '/.kube/config')

- name: smoke test
  query: select *
         from omni_kube.api_group
         where name in ('core', 'apps')
  results:
  - name: core
    preferred_version: v1
  - name: apps
    preferred_version: v1

- name: group resources
  query: select name
         from omni_kube.group_resources('v1')
         order by name
  results:
  - name: bindings
  - name: componentstatuses
  - name: configmaps
  - name: endpoints
  - name: events
  - name: limitranges
  - name: namespaces
  - name: namespaces/finalize
  - name: namespaces/status
  - name: nodes
  - name: nodes/proxy
  - name: nodes/status
  - name: persistentvolumeclaims
  - name: persistentvolumeclaims/status
  - name: persistentvolumes
  - name: persistentvolumes/status
  - name: pods
  - name: pods/attach
  - name: pods/binding
  - name: pods/ephemeralcontainers
  - name: pods/eviction
  - name: pods/exec
  - name: pods/log
  - name: pods/portforward
  - name: pods/proxy
  - name: pods/status
  - name: podtemplates
  - name: replicationcontrollers
  - name: replicationcontrollers/scale
  - name: replicationcontrollers/status
  - name: resourcequotas
  - name: resourcequotas/status
  - name: secrets
  - name: serviceaccounts
  - name: serviceaccounts/token
  - name: services
  - name: services/proxy
  - name: services/status

- name: resources
  query: select count(*) > 0 as non_empty
         from omni_kube.resources('v1', 'pods')
  results:
  - non_empty: true

- name: resource view
  steps:
  - name: establish the view
    query: select omni_kube.resource_view('pods', 'v1', 'pods')
  - name: look at it
    query: select count(*) > 0 as non_empty
           from pods
    results:
    - non_empty: true
  - name: clean up from previous failures
    query: |
      delete
      from pods
      where resource -> 'metadata' -> 'labels' -> 'omnigres.com/test' is not null
  - name: should be clean
    query: select
           from pods
           where resource -> 'metadata' -> 'labels' -> 'omnigres.com/test' is not null
    results: [ ]
  - create table pod_uid
    (
        uid text not null
    )
  - name: insert into it
    query: |
      with
          insertion as (insert into pods (resource)
      values ('{ "metadata": { "generateName": "nginx-pod-omni-kube-", "labels": {"omnigres.com/test": "true"} }, "spec": { "containers": [{ "name": "test", "image": "nginx" }] } }')
              returning *)
      insert
      into
          pod_uid (uid)
      select
          uid
      from
          insertion
      where
          name is not null and
          namespace is not null and
          resource -> 'metadata' ->> 'uid' = uid and
          resource -> 'metadata' ->> 'name' = name
  - name: ensure we got the uid (conditions satisfied)
    query: select
               count(*) > 0 as non_empty
           from
               pod_uid
    results:
    - non_empty: true
  - name: find it
    query: select true as found
           from pods
           where resource -> 'metadata' -> 'labels' -> 'omnigres.com/test' is not null
    results:
    - found: true
  - name: field selector
    query: select
               omni_kube.resource_view('pods_fs', 'v1', 'pods',
                                       field_selector => 'metadata.name=' ||
                                                         (select
                                                              resource -> 'metadata' ->> 'name'
                                                          from
                                                              pods
                                                          where
                                                              resource -> 'metadata' -> 'labels' -> 'omnigres.com/test' = 'true' and
                                                              resource -> 'metadata' ->> 'name' like 'nginx-pod-omni-kube-%'
                                                          limit 1))
  - name: try field selector
    query: select
               count(*) > 0 as non_empty
           from
               pods_fs
    results:
    - non_empty: true
  - name: label selector
    query: select omni_kube.resource_view('pods_ls', 'v1', 'pods', label_selector => 'omnigres.com/test=true')
  - name: try with a label selector
    query: select
               count(*) > 0 as non_empty
           from
               pods_ls
    results:
    - non_empty: true
  - name: wait for things to settle (to prevent Conflict)
    query: select pg_sleep(1)
  - name: update it
    query: |
      with
          updating as (
      update pods
      set resource = jsonb_set(resource, '{metadata,labels,omnigres.com/test}', '"passed"')
          where resource -> 'metadata' -> 'labels' -> 'omnigres.com/test' is not null returning *)
      select
          resource -> 'metadata' -> 'labels' -> 'omnigres.com/test' as label
      from
          updating
    results:
    - label: passed
  - name: check labels
    query: select resource -> 'metadata' -> 'labels' labels
           from pods
           where resource -> 'metadata' -> 'labels' -> 'omnigres.com/test' is not null
    results:
    - labels:
        "omnigres.com/test": passed
  - name: try with a label selector
    query: select
               count(*) > 0 as non_empty
           from
               pods_ls
    results:
    - non_empty: false
  - name: cleanup
    query: delete
           from pods
           where resource -> 'metadata' -> 'labels' -> 'omnigres.com/test' is not null
