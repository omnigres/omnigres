$schema: "https://raw.githubusercontent.com/omnigres/omnigres/master/pg_yregress/schema.json"
instance:
  init:
  - create extension omni_kube cascade
  - create extension omni_os cascade

tests:

- select omni_kube.load_kubeconfig((select value from omni_os.env where variable = 'HOME') || '/.kube/config')

- name: smoke test
  query: select *
         from omni_kube.api_group
         where name in ('core', 'apps')
  results:
  - name: core
    preferred_version: v1
  - name: apps
    preferred_version: v1

- name: group resources
  query: select name
         from omni_kube.group_resources('v1')
         order by name
  results:
  - name: bindings
  - name: componentstatuses
  - name: configmaps
  - name: endpoints
  - name: events
  - name: limitranges
  - name: namespaces
  - name: namespaces/finalize
  - name: namespaces/status
  - name: nodes
  - name: nodes/proxy
  - name: nodes/status
  - name: persistentvolumeclaims
  - name: persistentvolumeclaims/status
  - name: persistentvolumes
  - name: persistentvolumes/status
  - name: pods
  - name: pods/attach
  - name: pods/binding
  - name: pods/ephemeralcontainers
  - name: pods/eviction
  - name: pods/exec
  - name: pods/log
  - name: pods/portforward
  - name: pods/proxy
  - name: pods/status
  - name: podtemplates
  - name: replicationcontrollers
  - name: replicationcontrollers/scale
  - name: replicationcontrollers/status
  - name: resourcequotas
  - name: resourcequotas/status
  - name: secrets
  - name: serviceaccounts
  - name: serviceaccounts/token
  - name: services
  - name: services/proxy
  - name: services/status

- name: resources
  query: select count(*) > 0 as non_empty
         from omni_kube.resources('v1', 'pods')
  results:
  - non_empty: true

- name: resource view
  steps:
  - name: establish the view
    query: select omni_kube.resource_view('pods', 'v1', 'pods')
  - name: check the search_path
    query: select current_setting('search_path')
    results:
    - current_setting: "\"$user\", public"
  - name: look at it
    query: select count(*) > 0 as non_empty
           from pods
    results:
    - non_empty: true
  - name: clean up from previous failures
    query: |
      delete
      from pods
      where resource -> 'metadata' -> 'labels' -> 'omnigres.com/test' is not null
  - create table pod_uid
    (
        uid text not null
    )
  - name: insert into it
    query: |
      with
          insertion as (insert into pods (resource)
      values ('{ "metadata": { "generateName": "nginx-pod-omni-kube-", "labels": {"omnigres.com/test": "true"} }, "spec": { "containers": [{ "name": "test", "image": "nginx" }] } }')
              returning *)
      insert
      into
          pod_uid (uid)
      select
          uid
      from
          insertion
      where
          name is not null and
          namespace is not null and
          resource -> 'metadata' ->> 'uid' = uid and
          resource -> 'metadata' ->> 'name' = name
  - name: ensure we got the uid (conditions satisfied)
    query: select
               count(*) > 0 as non_empty
           from
               pod_uid
    results:
    - non_empty: true
  - name: find it
    query: select true as found
           from pods
                    inner join pod_uid pu on pu.uid = pods.uid
    results:
    - found: true
  - name: field selector
    query: select
               omni_kube.resource_view('pods_fs', 'v1', 'pods',
                                       field_selector => 'metadata.name=' ||
                                                         (select
                                                              resource -> 'metadata' ->> 'name'
                                                          from
                                                              pods
                                                          where
                                                              resource -> 'metadata' -> 'labels' -> 'omnigres.com/test' = 'true' and
                                                              resource -> 'metadata' ->> 'name' like 'nginx-pod-omni-kube-%'
                                                          limit 1))
  - name: try field selector
    query: select
               count(*) > 0 as non_empty
           from
               pods_fs
    results:
    - non_empty: true
  - name: label selector
    query: select omni_kube.resource_view('pods_ls', 'v1', 'pods', label_selector => 'omnigres.com/test=true')
  - name: try with a label selector
    query: select
               count(*) > 0 as non_empty
           from
               pods_ls
    results:
    - non_empty: true
  - name: wait for things to settle (to prevent Conflict)
    query: select pg_sleep(1)
  - name: update it
    query: |
      with
          updating as (
      update pods
      set resource = jsonb_set(resource, '{metadata,labels,omnigres.com/test}', '"passed"')
          from pod_uid
          where pods.uid = pod_uid.uid returning *)
      select
          resource -> 'metadata' -> 'labels' -> 'omnigres.com/test' as label
      from
          updating
    results:
    - label: passed
  - name: check labels
    query: select resource -> 'metadata' -> 'labels' labels
           from pods
                    inner join pod_uid pu on pu.uid = pods.uid
    results:
    - labels:
        "omnigres.com/test": passed
  - name: try with a label selector
    query: select
               count(*) > 0 as non_empty
           from
               pods_ls
    results:
    - non_empty: false
  - name: cleanup
    query: delete
           from pods
               using pod_uid pu
           where pu.uid = pods.uid

- name: resource table
  steps:
  - name: establish the table
    query: select omni_kube.resource_table('pods', 'v1', 'pods')
  - name: check the search_path
    query: select current_setting('search_path')
    results:
    - current_setting: "\"$user\", public"
  - name: look at it
    query: select count(*) > 0 as non_empty
           from pods
    results:
    - non_empty: true
  - name: clean up from previous failures
    query: |
      delete
      from pods
      where resource -> 'metadata' -> 'labels' -> 'omnigres.com/test' is not null
  - name: should be clean
    query: select
           from pods
           where resource -> 'metadata' -> 'labels' -> 'omnigres.com/test' is not null
    results: [ ]
  - create table pod_uid
    (
        uid text not null
    )
  - name: insert into it
    query: |
      with insertion as (insert into pods (resource)
          values ('{ "metadata": { "generateName": "nginx-pod-omni-kube-", "labels": {"omnigres.com/test": "true"} }, "spec": { "containers": [{ "name": "test", "image": "nginx" }] } }')
          returning *)
      insert
      into pod_uid (uid)
      select uid
      from insertion
  - name: ensure we got the uid (conditions satisfied)
    query: select count(*) > 0 as non_empty
           from pod_uid
    results:
    - non_empty: true
  - name: find it
    query: select true as found
           from pods
           where resource -> 'metadata' -> 'labels' -> 'omnigres.com/test' is not null
    results:
    - found: true
  - name: wait for things to settle (to prevent Conflict)
    query: select pg_sleep(1)
  - name: refresh before updating
    query: select refresh_pods()
  - name: update it
    query: |
      with updating as (
          update pods
              set resource = jsonb_set(resource, '{metadata,labels,omnigres.com/test}', '"passed"')
              from pod_uid
              where pods.uid = pod_uid.uid returning *)
      select resource -> 'metadata' -> 'labels' -> 'omnigres.com/test' as label
      from updating
    results:
    - label: passed
  - name: check labels
    query: select resource -> 'metadata' -> 'labels' labels
           from pods
                    inner join pod_uid pu on pu.uid = pods.uid
    results:
    - labels:
        "omnigres.com/test": passed
  - name: cleanup
    query: delete
           from pods
               using pod_uid pu
           where pu.uid = pods.uid

- name: resource table refresh
  steps:
  - name: establish the table
    query: select omni_kube.resource_table('configmap', 'v1', 'configmaps')
  - name: establish a view
    query: select omni_kube.resource_view('configmapv', 'v1', 'configmaps')
  - name: clean up from previous failures
    query: |
      delete
      from configmap
      where resource -> 'metadata' -> 'labels' -> 'omnigres.com/test' is not null
  - name: should be clean
    query: select
           from configmap
           where resource -> 'metadata' -> 'labels' -> 'omnigres.com/test' is not null
    results: [ ]
  - create table cm_uid
    (
        uid text not null
    )
  - name: insert into view
    query: |
      with insertion as (insert into configmapv (resource)
          values ('{ "metadata": { "generateName": "omni-kube-cm-test-", "labels": {"omnigres.com/test": "true"} }, "data": {} }')
          returning *)
      insert
      into cm_uid (uid)
      select uid
      from insertion
  - name: ensure we got the uid (conditions satisfied)
    query: select count(*) > 0 as non_empty
           from cm_uid
    results:
    - non_empty: true
  - name: should not be in the table
    query: select
           from configmap
                    inner join cm_uid c on c.uid = configmap.uid
    results: [ ]
  - name: refresh
    query: select type
           from refresh_configmap()
                    inner join cm_uid c on c.uid = object -> 'metadata' ->> 'uid'
    results:
    - type: 'ADDED'
  - name: new refresh
    query: select
           from refresh_configmap()
    results: [ ]
  - name: update through the view
    query: |
      update configmapv
      set resource = jsonb_set(resource, '{data}', '{"new": "data"}')
  - name: refresh
    query: select type
           from refresh_configmap()
                    inner join cm_uid c on c.uid = object -> 'metadata' ->> 'uid'
    results:
    - type: 'MODIFIED'
  - name: delete through the view
    query: delete
           from configmapv using cm_uid c
           where c.uid = configmapv.uid
  - name: refresh
    query: select type
           from refresh_configmap()
                    inner join cm_uid c on c.uid = object -> 'metadata' ->> 'uid'
    results:
    - type: 'DELETED'

- name: resource view schemas
  steps:
  - select omni_kube.resource_views('kube')
  - name: check the search_path
    query: select current_setting('search_path')
    results:
    - current_setting: "\"$user\", public"
  - select from kube.pod
  - select from kube.config_map
  - select from "kube/apps".deployment

- name: resource view schemas (plural)
  steps:
  - select omni_kube.resource_views('kube', singular => false)
  - select from kube.pods
  - select from kube.config_maps
  - select from "kube/apps".deployments
  - select from kube.component_statuses

- name: resource view schemas (no underscores)
  steps:
  - select omni_kube.resource_views('kube', underscore_case => false)
  - select from kube.configmap
  - select from kube.componentstatus

- name: resource view schemas (custom naming template)
  steps:
  - select omni_kube.resource_views('kube', schema_template => '%s(%s)')
  - select from "kube(apps)".deployment

- name: resource table schemas
  steps:
  - select omni_kube.resource_tables('kube')
  - name: check the search_path
    query: select current_setting('search_path')
    results:
    - current_setting: "\"$user\", public"
  - select from kube.pod
  - select from kube.config_map
  - select from "kube/apps".deployment

- name: resource table schemas (plural)
  steps:
  - select omni_kube.resource_tables('kube', singular => false)
  - select from kube.pods
  - select from kube.config_maps
  - select from "kube/apps".deployments
  - select from kube.component_statuses

- name: resource table schemas (no underscores)
  steps:
  - select omni_kube.resource_tables('kube', underscore_case => false)
  - select from kube.configmap
  - select from kube.componentstatus

- name: resource table schemas (custom naming template)
  steps:
  - select omni_kube.resource_tables('kube', schema_template => '%s(%s)')
  - select from "kube(apps)".deployment

- name: resource table refresh
  steps:
  - select omni_kube.resource_tables('kube')
  - name: establish a view for comparison
    query: select omni_kube.resource_view('config_map_v', 'v1', 'configmaps')
  - create table cm_uid
    (
    uid text not null
    )
  - name: insert into view
    query: |
      with insertion as (insert into config_map_v (resource)
          values ('{ "metadata": { "generateName": "omni-kube-cm-test-", "labels": {"omnigres.com/test": "true"} }, "data": {} }')
          returning *)
      insert
      into cm_uid (uid)
      select uid
      from insertion
  - name: ensure we got the uid (conditions satisfied)
    query: select count(*) > 0 as non_empty
      from cm_uid
    results:
    - non_empty: true
  - name: should not be in the table
    query: select
      from kube.config_map
      inner join cm_uid c on c.uid = kube.config_map.uid
    results: [ ]
  - name: refresh
    query: select from refresh_kube()
  - name: should be in the table
    query: select count(*)
      from kube.config_map
      inner join cm_uid c on c.uid = kube.config_map.uid
    results:
    - count: 1
