$schema: "https://raw.githubusercontent.com/omnigres/omnigres/master/pg_yregress/schema.json"
instance:
  init:
    - create extension omni_schema cascade
    - create schema test

tests:

- name: created table shows up with expected values
  steps:
    - create table test.empty_table ()
    - query: select id, schema_id, schema_name, name from omni_schema.relation where id = omni_schema.relation_id('test', 'empty_table');
      results:
      - id: "(test,empty_table)"
        schema_id: (test)
        schema_name: test
        name: empty_table   

- name: created table column show up with expected values
  steps:
    - create table test.table_with_id (id integer)
    - query: select id, relation_id, name from omni_schema.relation_column where relation_id = omni_schema.relation_id('test', 'table_with_id');
      results:
      - id: "(test,table_with_id,id)"
        relation_id: "(test,table_with_id)"
        name: id   

- name: created table column with identity (generated always) show up with expected values
  steps:
    - create table test.table_with_identity (id integer generated always as identity)
    - query: select id, "default" from omni_schema.relation_column_default where id = omni_schema.column_id('test', 'table_with_identity', 'id');
      results: []
    - query: select id, always from omni_schema.relation_column_identity where id = omni_schema.column_id('test', 'table_with_identity', 'id');
      results:
        - id: "(test,table_with_identity,id)"
          always: true

- name: created table column with identity (generated by default) show up with expected values
  steps:
    - create table test.table_with_identity (id integer generated by default as identity)
    - query: select id, "default" from omni_schema.relation_column_default where id = omni_schema.column_id('test', 'table_with_identity', 'id');
      results: []
    - query: select id, always from omni_schema.relation_column_identity where id = omni_schema.column_id('test', 'table_with_identity', 'id');
      results:
        - id: "(test,table_with_identity,id)"
          always: false

- name: created table column with generated value show up with expected values
  steps:
    - create table test.table_with_generated (id int generated always as ( v + 1 ) stored, v int)
    - query: select generated from omni_schema.relation_column_generated where id = omni_schema.column_id('test', 'table_with_generated', 'id');
      results:
      - generated: (v + 1)

- name: created table column default show up with expected values
  steps:
    - create table test.table_with_default (id timestamptz default now())
    - query: select id, "default" from omni_schema.relation_column_default where id = omni_schema.column_id('test', 'table_with_default', 'id');
      results:
      - id: "(test,table_with_default,id)"
        default: now()

- name: created table column nullable show up with expected values
  steps:
    - create table test.table_with_nullable (id text)
    - query: select id from omni_schema.relation_column_nullable where id = omni_schema.column_id('test', 'table_with_nullable', 'id');
      results:
      - id: "(test,table_with_nullable,id)"

- name: created table column nullable does not show mandatory columns
  steps:
    - create table test.table_without_nullable (id text not null)
    - query: select id from omni_schema.relation_column_nullable where id = omni_schema.column_id('test', 'table_without_nullable', 'id');
      results: []

- name: created table column position show up with expected values
  steps:
    - create table test.table_with_two_columns (id integer, email text);
    - query: select id, position from omni_schema.relation_column_position where id in (omni_schema.column_id('test', 'table_with_two_columns', 'id'), omni_schema.column_id('test', 'table_with_two_columns', 'email')) order by position;
      results:
      - id: "(test,table_with_two_columns,id)"
        position: 1
      - id: "(test,table_with_two_columns,email)"
        position: 2    

- name: created table column types show up with expected values
  steps:
    - create table test.table_with_two_columns (id integer, email text);
    - query: select id, type_id from omni_schema.relation_column_type where id in (omni_schema.column_id('test', 'table_with_two_columns', 'id'), omni_schema.column_id('test', 'table_with_two_columns', 'email')) order by type_id;
      results:
      - id: "(test,table_with_two_columns,id)"
        type_id: "(pg_catalog,int4)"
      - id: "(test,table_with_two_columns,email)"
        type_id: "(pg_catalog,text)"  

- name: created table primary keys show up with expected values
  steps:
    - create table test.table_with_pk (id integer primary key);
    - query: select id, column_id, position from omni_schema.relation_primary_key where id in (omni_schema.relation_id('test', 'table_with_pk'))
      results:
      - id: "(test,table_with_pk)"
        column_id: "(test,table_with_pk,id)"
        position: 1  

- name: created table composite primary keys show up with expected values
  steps:
    - create table test.table_with_composite_pk (id integer, created_at timestamptz, primary key (id, created_at));
    - query: select id, column_id, position from omni_schema.relation_primary_key where id in (omni_schema.relation_id('test', 'table_with_composite_pk')) order by position
      results:
      - id: "(test,table_with_composite_pk)"
        column_id: "(test,table_with_composite_pk,id)"
        position: 1
      - id: "(test,table_with_composite_pk)"
        column_id: "(test,table_with_composite_pk,created_at)"
        position: 2

- name: created table foreign keys show up with expected values
  steps:
    - create table test.table_with_pk (id integer primary key)
    - create table test.table_with_fk (id integer references test.table_with_pk(id))
    - query: select id, column_id, position, constraint_id from omni_schema.relation_foreign_key natural join omni_schema.relation_foreign_key_constraint where id in (omni_schema.relation_id('test', 'table_with_fk'))
      results:
      - id: "(test,table_with_fk)"
        column_id: "(test,table_with_fk,id)"
        position: 1
        constraint_id: "(test,table_with_fk,table_with_fk_id_fkey)"

- name: created view shows up with expected values
  steps:
    - create view test.empty_view as select ;
    - query: select id, schema_id, schema_name, name from omni_schema.relation where id = omni_schema.relation_id('test', 'empty_view');
      results:
      - id: "(test,empty_view)"
        schema_id: (test)
        schema_name: test
        name: empty_view

- name: created view column show up with expected values
  steps:
    - create table test.table_with_id (id integer)
    - create view test.view_with_id as select * from test.table_with_id;
    - query: select id, relation_id, name from omni_schema.relation_column where relation_id = omni_schema.relation_id('test', 'view_with_id');
      results:
      - id: "(test,view_with_id,id)"
        relation_id: "(test,view_with_id)"
        name: id   

- name: created view column default does not show up
  steps:
    - create table test.table_with_default (id timestamptz default now())
    - create view test.view_with_id as select * from test.table_with_default;
    - query: select id, "default" from omni_schema.relation_column_default where id = omni_schema.column_id('test', 'view_with_default', 'id');
      results: []

- name: created view column nullable does not show up
  steps:
    - create table test.table_with_nullable (id text)
    - create view test.view_with_id as select * from test.table_with_nullable;
    - query: select id from omni_schema.relation_column_nullable where id = omni_schema.column_id('test', 'view_without_nullable', 'id');
      results: []

- name: created relation column position show up with expected values
  steps:
    - create table test.table_with_two_columns (id integer, email text);
    - create view test.view_with_two_columns as select * from test.table_with_two_columns;
    - query: select id, position from omni_schema.relation_column_position where id in (omni_schema.column_id('test', 'view_with_two_columns', 'id'), omni_schema.column_id('test', 'view_with_two_columns', 'email')) order by position;
      results:
      - id: "(test,view_with_two_columns,id)"
        position: 1
      - id: "(test,view_with_two_columns,email)"
        position: 2

- name: created view column types show up with expected values
  steps:
    - create table test.table_with_two_columns (id integer, email text);
    - create view test.view_with_two_columns as select * from test.table_with_two_columns;
    - query: select id, type_id from omni_schema.relation_column_type where id in (omni_schema.column_id('test', 'view_with_two_columns', 'id'), omni_schema.column_id('test', 'view_with_two_columns', 'email')) order by type_id;
      results:
      - id: "(test,view_with_two_columns,id)"
        type_id: "(pg_catalog,int4)"
      - id: "(test,view_with_two_columns,email)"
        type_id: "(pg_catalog,text)"  

- name: created view primary keys does not show up
  steps:
    - create table test.table_with_pk (id integer primary key);
    - create view test.view_without_pk as select * from test.table_with_pk;
    - query: select id, column_id, position from omni_schema.relation_primary_key where id in (omni_schema.relation_id('test', 'view_with_pk'))
      results: []

- name: meta relation column type should not refer to system columns
  query: select * from omni_schema.relation_column_type where (id).name = 'ctid'
  results: []

- name: meta relation column type should not refer to toast tables
  query: select * from omni_schema.relation_column_type where (id).relation_name like 'pg_toast_%'
  results: [ ]

- name: meta relation column default should not depend on the search path
  steps:
  - create table test.table_with_default (id serial not null)
  - query: select "default" from omni_schema.relation_column_default where id = omni_schema.column_id('test', 'table_with_default', 'id')
    results:
    - default: nextval('test.table_with_default_id_seq'::regclass)
  - set search_path to test, public
  - query: select "default" from omni_schema.relation_column_default where id = omni_schema.column_id('test', 'table_with_default', 'id')
    results:
    - default: nextval('test.table_with_default_id_seq'::regclass)
