$schema: "https://raw.githubusercontent.com/omnigres/omnigres/master/pg_yregress/schema.json"
instance:
  config:
    shared_preload_libraries: */env/OMNI_SO
    max_worker_processes: 64
  init:
  - set session omni_httpd.init_port = 0
  - create extension omni_httpd cascade
  - create extension omni_httpc cascade
  # FIXME: waiting for two reloads is working around a startup bug in omni_httpd
  - call omni_httpd.wait_for_configuration_reloads(2)
  - create extension omni_rest cascade
  - create schema app
  - create schema app1
  - |
    create
        or
        replace procedure omni_httpd.handler(int, omni_httpd.http_request, out omni_httpd.http_outcome)
        language plpgsql
    as
    $$
    declare
        req omni_httpd.http_request;
        resp omni_httpd.http_outcome;
    begin
        req := $2;
        call omni_rest.postgrest(req, resp, omni_rest.postgrest_settings(schemas => '{app, app1}'));
        if resp is not distinct from null then
            resp := omni_httpd.http_response(status => 404);
        end if;
        $3 := resp;
    end;
    $$
  - |
    create table app.users
    (
        id           serial primary key,
        name         text,
        email        text,
        profile_info jsonb
    )
  - insert into app.users (id, name, email, profile_info)
    values (1, 'John Doe', 'john@doe.com',
            jsonb_build_object('bio', 'Software industry veteran', 'tags', jsonb_build_array('ci', 'postgres')))
  - |
    create table app1.users
    (
        id           serial primary key,
        username text
    )
  - insert into app1.users (id, username)
    values (1, 'John Doe')
  - |
    create table public.users
    (
        id       serial primary key,
        username text
    )
  - |
    create function make_request(path text, headers omni_http.http_headers default array []::omni_http.http_headers, method omni_http.http_method default 'GET') returns setof omni_httpc.http_response
        language sql as
    $$
    select *
    from omni_httpc.http_execute(
            omni_httpc.http_request('http://127.0.0.1:' ||
                                    (select effective_port from omni_httpd.listeners) ||
                                    path, headers => headers, method => method))
    $$
  - |
    create function first_name(app.users) returns text
        language sql as
    $$
    select split_part($1.name, ' ', 1)
    $$;

tests:

- name: simple listing
  query: |
    with response as (select * from make_request('/users'))
    select response.status,
           (select json_agg(json_build_object(h.name, h.value))
            from unnest(response.headers) h
            where h.name not in ('server', 'content-length', 'connection')) as headers,
           convert_from(response.body, 'utf-8')::json                       as body
    from response
  results:
  - status: 200
    headers:
    - content-range: 0-1/*
    - content-type: application/json
    body:
    - id: 1
      name: John Doe
      email: john@doe.com
      profile_info:
        bio: Software industry veteran
        tags:
        - ci
        - postgres

- name: basic vertical filtering
  query: |
    with response as (select * from make_request('/users?select=email,name'))
    select response.status,
           (select json_agg(json_build_object(h.name, h.value))
            from unnest(response.headers) h
            where h.name not in ('server', 'content-length', 'connection')) as headers,
           convert_from(response.body, 'utf-8')::json                       as body
    from response
  results:
  - status: 200
    headers:
    - content-range: 0-1/*
    - content-type: application/json
    body:
    - name: John Doe
      email: john@doe.com

- name: column renaming
  query: |
    with response as (select * from make_request('/users?select=name:fullName'))
    select response.status,
           (select json_agg(json_build_object(h.name, h.value))
            from unnest(response.headers) h
            where h.name not in ('server', 'content-length', 'connection')) as headers,
           convert_from(response.body, 'utf-8')::json                       as body
    from response
  results:
  - status: 200
    headers:
    - content-range: 0-1/*
    - content-type: application/json
    body:
    - fullName: John Doe

- name: computed field
  query: |
    with response as (select * from make_request('/users?select=first_name'))
    select response.status,
           (select json_agg(json_build_object(h.name, h.value))
            from unnest(response.headers) h
            where h.name not in ('server', 'content-length', 'connection')) as headers,
           convert_from(response.body, 'utf-8')::json                       as body
    from response
  results:
  - status: 200
    headers:
    - content-range: 0-1/*
    - content-type: application/json
    body:
    - first_name: John

- name: JSON access
  query: |
    with response as (select * from make_request('/users?select=profile_info->bio,profile_info->tags->0:firstTag'))
    select response.status,
           (select json_agg(json_build_object(h.name, h.value))
            from unnest(response.headers) h
            where h.name not in ('server', 'content-length', 'connection')) as headers,
           convert_from(response.body, 'utf-8')::json                       as body
    from response
  results:
  - status: 200
    headers:
    - content-range: 0-1/*
    - content-type: application/json
    body:
    - bio: Software industry veteran
      firstTag: ci

- name: schema selection using header
  query: |
    with response as (select * from make_request('/users',  
                                               headers => array [omni_http.http_header('accept-profile', 'app1')]))
    select response.status,
           (select json_agg(json_build_object(h.name, h.value))
            from unnest(response.headers) h
            where h.name not in ('server', 'content-length', 'connection')) as headers,
           convert_from(response.body, 'utf-8')::json                       as body
    from response
  results:
  - status: 200
    headers:
    - content-range: 0-1/*
    - content-type: application/json
    body:
    - id: 1
      username: John Doe

- name: invalid schema selection using header
  query: |
    with response as (select *
                      from make_request('/users',
                                        headers => array [omni_http.http_header('accept-profile', 'public')]))
    select response.status
    from response
  results:
  - status: 404

- name: invalid schema selection using dot
  query: |
    with response as (select *
                      from make_request('/public.users',
                                        headers => array [omni_http.http_header('accept-profile', 'public')]))
    select response.status
    from response
  results:
  - status: 404

- name: valid schema selection using dot
  query: |
    with response as (select *
                      from make_request('/app.users',
                                        headers => array [omni_http.http_header('accept-profile', 'public')]))
    select response.status
    from response
  results:
  - status: 404