{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Omnigres","text":"<p>Omnigres makes PostgreSQL a complete application platform. You can deploy a single database instance and it can host your entire application, scaling as needed.</p> <ul> <li>Running application logic inside or next to the database instance</li> <li>Deployment provisioning (Git, Docker, etc.)</li> <li>Database instance serves HTTP, WebSocket and other protocols</li> <li>In-memory and volatile on-disk caching</li> <li>Routine application building blocks (authentication, authorization, payments, etc.)</li> <li>Database-modeled application logic via reactive queries</li> <li>Automagic remote APIs and form handling</li> <li>Live data updates</li> </ul>"},{"location":"#omnigres-architecture","title":"Omnigres Architecture","text":"<p>The above diagram gives a general, high-level overview of what Omnigres is composed of, how do these components fit together and what some of the upcoming components are.</p>"},{"location":"quick_start/","title":"Quick Start","text":"<p>The fastest way to try Omnigres out is by using its container image:</p> <pre><code>docker volume create omnigres\n# The environment variables (`-e`) below have these set as defaults\ndocker run --name omnigres \\\n-e POSTGRES_PASSWORD=omnigres \\\n-e POSTGRES_USER=omnigres \\\n-e POSTGRES_DB=omnigres \\\n--mount source=omnigres,target=/var/lib/postgresql/data \\\n-p 127.0.0.1:5432:5432 -p 127.0.0.1:8080:8080 -p 127.0.0.1:8081:8081 --rm ghcr.io/omnigres/omnigres-17:latest\n# Now you can connect to it:\npsql -h localhost -p 5432 -U omnigres omnigres # password is `omnigres`\n</code></pre> <p>You can access the HTTP server at localhost:8081</p> What if I need other extensions? <p>Currently, the image ships only base and Omnigres extensions and we're planning to add more \"import\" extensions pre-installed.</p> <p>We included a significant amount of extensions, currently sourced from Pigsty into the \"extra\" image: </p> <pre><code>ghcr.io/omnigres/omnigres-extra-17:latest\n</code></pre> <p>You can also use <code>apt</code> to install more extensions by executing in the running container:</p> <pre><code>docker exec -ti &lt;container name&gt; apt-get -y install postgresql-17-&lt;extension name&gt;\n</code></pre>"},{"location":"quick_start/#building-your-own-image","title":"Building your own image","text":"<p>If you can't use the pre-built image (for example, you are running a fork or made changes), you can build the image yourself:</p> <pre><code># Build the image\nDOCKER_BUILDKIT=1 docker build . -t ghcr.io/omnigres/omnigres\n</code></pre>"},{"location":"examples/motd/","title":"MOTD service","text":"<p>Below is a simple web application that runs inside of Postgres and manages MOTD (Message Of The Day).</p> <p>All you need to run this is just an instance of Postgres with Omnigres extensions (omni_httpd and omni_web) installed.</p> <pre><code>create table if not exists motd -- (1)\n(\nid        int primary key generated always as identity,\ncontent   text,\nposted_at timestamp default now()\n);\n-- (2)\ncreate or replace function show_motd() returns setof omni_httpd.http_outcome as\n$$\nselect\nomni_httpd.http_response('Posted at ' || posted_at || E'\\n' || content)\nfrom\nmotd\norder by\nposted_at desc\nlimit 1;\n$$ language sql;\n-- (3)\ncreate or replace function no_motd() returns setof omni_httpd.http_outcome as\n$$\nselect omni_httpd.http_response('No MOTD');\n$$\nlanguage sql;\n-- (4)\ncreate or replace function update_motd(request omni_httpd.http_request) returns omni_httpd.http_outcome as\n$$\ninsert\ninto\nmotd (content)\nvalues\n(convert_from(request.body, 'UTF8'))\nreturning omni_httpd.http_response(status =&gt; 201);\n$$\nlanguage sql;\n-- (5)\nupdate omni_httpd.handlers\nset\nquery = (select\n-- (6)\nomni_httpd.cascading_query(name, query order by priority desc nulls last)\nfrom\n(values\n('show', $$select show_motd() from request where request.method = 'GET'$$, 1),\n('update', $$select update_motd(request.*) from request where request.method = 'POST'$$, 1),\n('fallback', $$select no_motd() from request where request.method = 'GET'$$,\n0)) handlers(name, query, priority));\n</code></pre> <ol> <li>We'll store MOTD here</li> <li>Handles GET request</li> <li>Handles GET request when there is no MOTD</li> <li>Handles POST request</li> <li>Here we update an existing listener's handler. This listener is provisioned    by omni_httpd by default.</li> <li>Cascading queries allow combining multiple handlers into one</li> </ol> <p>It works like this:</p> <pre><code>GET / # =&gt; HTTP/1.1 200 OK\nNo MOTD\n\nPOST / \"Check out Omnigres\" # =&gt; HTTP/1.1 201 OK\nGET / # =&gt; HTTP/1.1 200 OK\nPosted at 2023-03-23 02:59:14.679113\nCheck out Omnigres\n</code></pre>"},{"location":"omni_auth/basics/","title":"Basics","text":"<p>This extension provides primitives for building authentication systems.</p> <p>Currently supported authentication methods:</p> <ul> <li>Password</li> </ul>"},{"location":"omni_auth/basics/#authentication-subject","title":"Authentication Subject","text":"<p>Authentication subject is a provisional term for subject of authentication, such as user.</p> <p>Note, however, that we treat it a bit more broadly. For example, an unrecognized identifier (such as login or e-mail) can also be an authentication subject. This way we can track attempts to authenticate against a non-existent user.</p> <p>This can also be useful in the context where we are doing an authentication for a user that does not yet exist, especially in the context of third-party OAuth authentications-as-signups.</p>"},{"location":"omni_auth/basics/#high-level-interface","title":"High-level Interface","text":""},{"location":"omni_auth/basics/#authentication","title":"Authentication","text":"<p><code>omni_auth.authenticate(Authenticator, authentication_subject_id)</code> function, dispatched over <code>Authenticator</code> types, returns a value of an <code>Authentication</code> type that implements <code>omni_auth.successful_authentication</code> (see below)</p> <p>Implementations:</p> <ul> <li>Password</li> </ul>"},{"location":"omni_auth/basics/#successful-authentication","title":"Successful Authentication","text":"<p><code>omni_auth.successful_authentication(Authentication)</code> returns a boolean that signifies success of authentication.</p> <p>Implementation</p> <ul> <li>Password</li> </ul>"},{"location":"omni_auth/password/","title":"Password Authentication","text":"<p>Features:</p> <ul> <li>Hash-based verification (bcrypt, more algorithms pending)</li> <li>Password authentication attempt audit trail</li> <li>Temporal password management</li> </ul>"},{"location":"omni_auth/password/#password-credentials","title":"Password Credentials","text":"<p><code>omni_auth.password_credentials</code> table is a temporally-enabled table that contains hashed passwords for authentication subjects.</p> <p>For every given <code>authentication_subject_id</code> there may be zero or one <code>hashed_password</code> for any non-overlapping timestamp-period. The latest valid value is denoted by <code>valid_at</code> that includes current timestamp.</p>"},{"location":"omni_auth/password/#setting-a-password","title":"Setting a password","text":"<p>Considering the temporality of passwords, <code>omni_auth</code> provides a function that encapsulates the complexity of managing passwords. It will:</p> <ul> <li>create a new password if none is available</li> <li>make \"current\" password a \"historic\" one by setting its validity until the validity of the new one</li> <li>validate that the old password is matching, if supplied</li> <li>ensure that the new password has the same upper bound of validity as the \"current\" one</li> <li>allow to specify the validity period for the new password explicitly</li> </ul> <p>The most common scenario is to set a password</p> <pre><code>select omni_auth.set_password(authentication_subject_id, password, [old_password])\n</code></pre> Parameter Type Description authentication_subject_id omni_auth.authentication_subject_id Authentication Subject ID to set password for password omni_auth.password New password to set old_password omni_auth.password Old password to check against (optional) valid_from timestamptz New password should be valid from, inclusive (optional) valid_until timestamptz New password should be valid until, exclusive (optional, default <code>statement_timestamp()</code>) hashing_algorithm omni_auth.hashing_algorithm Hashing algorithm for the new password (optional, using the default one) work_factor int Hashing algorithm work factor (optional)"},{"location":"omni_auth/password/#authenticating","title":"Authenticating","text":"<p>To attempt authentication with a given password for an authentication subject, use the following function</p> <pre><code>select omni_auth.authenticate(password, authentication_subject_id, [as_of])\n</code></pre> <p>It will return a record of the <code>omni_auth.password_authentications</code> type, which can be verified for success using <code>omni_auth.successful_authentication()</code>.</p> <p>Temporal authentication</p> <p><code>as_of</code> parameter (of <code>timestamptz</code> type) can be used to authenticate against a password that could have been available at that point in time.</p>"},{"location":"omni_auth/password/#hashed-password","title":"Hashed Password","text":"<p><code>omni_auth.hash_password</code> provides a facility to create values of the <code>omni_auth.hashed_password</code> type which is used in the <code>omni_auth.password_credentials</code> table. This is typically not needed if  <code>omni_auth.set_password</code> is used.</p>"},{"location":"omni_auth/password/#work-factor-calibration","title":"Work Factor Calibration","text":"<p>OWASP recommends that the hashing function takes about a second for a balance of usability and security aspects. However, on different computers, different work factors may result in different timing. To address this, <code>omni_auth</code> provides a materialized view <code>omni_auth.password_work_factor_timings</code> (unpopulated at first) that will provide timings for supported algorithms for different work factors (by default capped at 1.5 seconds).</p> <p><code>omni_auth</code> attempts to set sensible defaults in absence of populated data in <code>omni_auth.password_work_factor_timings</code>, but it can be modified using the following variables:</p> Variable name Description omni_auth.bcrypt_work_factor bcrypt work factor (defaults to 12)"},{"location":"omni_aws/s3/","title":"S3","text":"<p><code>omni_aws</code> provides functionality for accessing S3 and compatible storages.</p> <p>Limited API coverage</p> <p>Please note that only a bare minimum of the API is covered at this time.</p>"},{"location":"omni_aws/s3/#api-calls","title":"API calls","text":"<p>S3 calls are prepared in a functional manner before they are executed. This allow s us to execute multiple calls at the same time using the same event loop.</p> <p>Functions listed below form requests to be executed with <code>omni_aws.aws_execute</code>.</p>"},{"location":"omni_aws/s3/#s3_create_bucket-createbucket","title":"<code>s3_create_bucket</code> (CreateBucket)","text":"<p>Create a bucket.</p> Parameter Type Description bucket text Bucket name. Required. region text Region override. Optional."},{"location":"omni_aws/s3/#s3_list_objects_v2-listobjectsv2","title":"<code>s3_list_objects_v2</code> (ListObjectsV2)","text":"<p>List objects in a bucket.</p> Parameter Type Description bucket text Bucket nane. Required. path text Path (can have a leading slash). Optional. continuation_token text Continuation token. Optional. delimiter text Delimiter. Optional. encoding_type text Encoding type. Optional. fetch_owner bool Fetch owner? Defaults to false. max_keys int8 Maximum number of keys. Optional. start_after text Start after key. Optional. region text Region override. Optional"},{"location":"omni_aws/s3/#s3_put_object-putobject","title":"<code>s3_put_object</code> (PutObject)","text":"<p>Put object into a bucket.</p> Parameter Type Description bucket text Bucket name. Required. path text Path (can have a leading slash). Required. payload bytea Content of the object. Required. content_type text Content type. Defaults to application/octet-stream region text Region override. Optional."},{"location":"omni_aws/s3/#api-calls-execution","title":"API calls execution","text":"<p>The above API calls can be executed using <code>omni_aws.aws_execute</code> that follows the same patterns.</p>"},{"location":"omni_aws/s3/#singular-request","title":"Singular request","text":"<p>This one is used for executing one request at a time (where <code>TYPE</code> is <code>s3_create_bucket</code>, <code>s3_list_objects_v2</code> and so on):</p> Parameter Type Description access_key_id text Access Key ID. Required. secret_access_key text Secret Acces Key. Required. request <code>TYPE</code> Request of <code>TYPE</code>. Required. content_type text Content type. Defaults to application/octest-stream endpoint text Custom endpoint. Optional. region text Default region. Defaults to us-east-1. <p>These functions raise exceptions on error.</p>"},{"location":"omni_aws/s3/#multiple-request","title":"Multiple request","text":"<p>This one is used for executing ma ny requests at a time (where <code>TYPE</code> is <code>s3_create_bucket</code>, <code>s3_list_objects_v2</code> and so on) for efficiency reasons:</p> Parameter Type Description access_key_id text Access Key ID. Required. secret_access_key text Secret Acces Key. Required. requests <code>TYPE[]</code> Requests of <code>TYPE</code>. Required. content_type text Content type. Defaults to application/octest-stream endpoint text Custom endpoint. Optional. region text Default region. Defaults to us-east-1. <p>These functions include errors in their output.</p>"},{"location":"omni_aws/s3/#return-value-of-aws_execute-for-s3_create_bucket","title":"Return value of <code>aws_execute</code> for <code>s3_create_bucket</code>","text":"<p>Returns <code>void</code> for singular form and a table with <code>error</code> column (of type <code>text</code>) for multiple form.</p>"},{"location":"omni_aws/s3/#return-value-of-aws_execute-for-s3_list_objects_v2","title":"Return value of <code>aws_execute</code> for <code>s3_list_objects_v2</code>","text":"Column Type Description key text Object key etag text ETag (quoted) last_modified timestamp Last modified time. storage_class s3_storage_class Storage class checksum_algorithm s3_checksum_algorithm Checksum algorithm owner s3_owner Object owner (only if <code>fetch_owner</code> was set to <code>true</code>) restore_status s3_restore_status Restore status meta s3_list_objects_v2_meta Response meta-information (continuation token, etc.) error text Error if any (only in the multiple request form)"},{"location":"omni_aws/s3/#return-value-of-aws_execute-for-s3_put_object","title":"Return value of <code>aws_execute</code> for <code>s3_put_object</code>","text":"<p>Returns <code>void</code> for singular form and a table with <code>error</code> column (of type <code>text</code>) for multiple form.</p>"},{"location":"omni_aws/s3/#utility-functions","title":"Utility functions","text":""},{"location":"omni_aws/s3/#pre-signed-url","title":"Pre-signed URL","text":"<p><code>s3_presigned_url</code> can be used to create a pre-signed URL. It returns a URL as a  <code>text</code>.</p> Parameter Type Description bucket text Bucket name. Required. path text Path to object. Required access_key_id text Access Key ID. Required. secret_access_key text Secret Acces Key. Required. expires int Expiration in seconds. Defaults to 604800 (7 days) region text Default region. Defaults to us-east-1. endpoint text Custom endpoint. Optional."},{"location":"omni_aws/s3/#endpoints","title":"Endpoints","text":"<p>By default, this extension works with AWS S3. However, it also works with other providers like DigitalOcean or software like MinIO.</p>"},{"location":"omni_aws/s3/#digitalocean-spaces","title":"DigitalOcean Spaces","text":"<p>In order to use DigitalOcean Spaces, simply pass <code>omni_aws.digitalocean_s3_endpoint()</code> to <code>endpoint</code> parameter (where accepted).</p> <pre><code> select *\nfrom\nomni_aws.aws_execute(access_key_id =&gt; 'ACCESS_KEY_ID',\nsecret_access_key =&gt; 'SECRET_ACCESS_KEY',\nrequest =&gt; omni_aws.s3_list_objects_v2(bucket =&gt; 'BUCKET', path =&gt; '/',\nregion =&gt; 'nyc3'),\nendpoint =&gt; omni_aws.digitalocean_s3_endpoint());\n</code></pre> <p>Ensure you specify <code>region</code></p> <p>Region names are different in DigitalOcean spaces and if you omit it, it'll set default to <code>us-east-1</code>.</p>"},{"location":"omni_aws/s3/#custom","title":"Custom","text":"<p>Custom endpoints can be specified with <code>omni_aws.s3_endpoint()</code>:</p> Parameter Type Description url text URL pattern with <code>${region}</code> and <code>${bucket}</code> variables. Required. path_style text Append <code>url</code> pattern with <code>/${bucket}</code> for convenience. Optional, defaults to <code>true</code> <p>This way one can use it with, for example, MinIO:</p> <pre><code> select *\nfrom\nomni_aws.aws_execute(access_key_id =&gt; 'ACCESS_KEY_ID',\nsecret_access_key =&gt; 'SECRET_ACCESS_KEY',\nrequest =&gt; omni_aws.s3_list_objects_v2(bucket =&gt; 'BUCKET', path =&gt; '/'),\nendpoint =&gt; omni_aws.s3_endpoint('http://localhost:9000'));\n</code></pre>"},{"location":"omni_cloudevents/cloud_events/","title":"Using CloudEvents","text":"<p>This extension lets you create, validate, and publish standardized CloudEvents events directly from your SQL workflows.</p> <p><code>omni_cloudevents</code> is a templated extension</p> <p><code>omni_cloudevents</code> is a templated extension. This means that by installing it, a default copy of it is instantiated into extension's schema. However, you can replicate it into any other schema, tune some of the parameters and make the database own the objects (as opposed to the extension itself):</p> <pre><code>select omni_cloudevents.instantiate([schema =&gt; 'omni_cloudevents'])\n</code></pre> <p>This allows you to have multiple independent credential systems, even if using different versions of <code>omni_cloudevents</code>. </p>"},{"location":"omni_cloudevents/cloud_events/#getting-started","title":"Getting Started","text":"<p>Add cloudevents schema to <code>search_path</code></p> <p>In order to make your queries that work with omni_cloudevents easier to read, consider adding <code>omni_cloudevents</code> (or the schema of your choosing if you instantiated the template) to <code>search_path</code>:</p> <pre><code>set search_path to omni_cloudevents, public;\n</code></pre> <p>Examples in this documentation follow this suggestion.</p>"},{"location":"omni_cloudevents/cloud_events/#preparing-events","title":"Preparing events","text":"<p>In order to prepare events, use the <code>cloudevent</code> function. It features a number of mandatory and optional arguments to let you form the event that you need.</p> <pre><code>select cloudevent(\nid =&gt; gen_random_uuid(),\nsource =&gt; 'https://service.com/endpoint',\ntype =&gt; 'user.login'\n);\n</code></pre> Argument Type Description id <code>text</code> or <code>uuid</code> Unique event identifier (text string or UUID value) source <code>cloudevent_uri_ref</code> Event origin URI with URI reference validation (RFC 3986) type <code>text</code> Event type descriptor (e.g., \"app.order.processed\") datacontenttype <code>text</code> (Optional) Content type of data payload (e.g., \"application/json\") datschema <code>cloudevent_uri</code> (Optional) Schema URL for data payload validation subject <code>text</code> (Optional) Event subject/context identifier ts <code>timestamptz</code> (Optional) Event timestamp (default: current statement time) data <code>anyelement</code> (Optional) Payload content (supports any PostgreSQL data type) specversion <code>text</code> (Optional) CloudEvents specification version (default: '1.0')"},{"location":"omni_cloudevents/cloud_events/#publishing-events","title":"Publishing events","text":"<p>In order to publish an event we can this helper:</p> <pre><code>select publish(\ncloudevent(id =&gt; gen_random_uuid(), source =&gt; 'https://api.yourservice.com/sys', type =&gt; 'file.uploaded', data =&gt; 'data-lake-bucket-123'::text));\n</code></pre> <p>It will return the <code>id</code> of the event for further convenience:</p> <pre><code>               publish                \n--------------------------------------\n 8d253e18-c49a-464d-abcd-c2f7f84e3c46\n(1 row)\n</code></pre> <p>Under the hood, it'll write it into the <code>cloudevent_egress</code> table. This helps us enforce outgoing message uniqueness and manage the audit trail.</p> <pre><code>select * from cloudevents_egress;\n</code></pre> <pre><code>-[ RECORD 1 ]---+-------------------------------------------\nid              | 8d253e18-c49a-464d-abcd-c2f7f84e3c46\nsource          | https://api.yourservice.com/sys\nspecversion     | 1.0\ntype            | file.uploaded\ndatacontenttype | \ndatschema       | \nsubject         | \ntime            | 2025-01-31 11:54:06.249177-08\ndata            | \\x646174612d6c616b652d6275636b65742d313233\ndatatype        | text\n</code></pre>"},{"location":"omni_cloudevents/cloud_events/#published-event-consumption","title":"Published event consumption","text":"<p>Event systems hugely benefits from reactivity \u2013 the sooner the event reaches the intended recipients, the sooner they can take necessary action. In order to facilitate this, <code>omni_cloudevents</code> has a system of \"publishers\" that are triggered on event insertion </p> <p>Work in progress</p> <p>Currently, there is a very limited set of publishers (namely, <code>NOTICE</code> publisher) but this is planned to be extended in the near future.</p>"},{"location":"omni_cloudevents/cloud_events/#notice-publisher","title":"NOTICE publisher","text":"<p>To create a NOTICE publisher to be used by a <code>psql</code> session or tooling that makes use of such notifications, you can call this idempotent function below. It will return the singleton name of this publisher.</p> <pre><code>select omni_cloudevents.create_notice_publisher();\n</code></pre> <p>Now, if you will publish an event, you will see a notification:</p> <pre><code>select publish(\ncloudevent(id =&gt; gen_random_uuid(), source =&gt; 'https://api.yourservice.com/sys', type =&gt; 'file.uploaded', data =&gt; 'data-lake-bucket-123'::text));\n</code></pre> <pre><code>NOTICE:  {\"id\":\"1c9e6c07-ddcc-4de1-987b-e26ec9e8d253\",\"source\":\"https://api.yourservice.com/sys\",\"specversion\":\"1.0\",\"type\":\"file.uploaded\",\"time\":\"2025-01-31T12:00:34.147227-08:00\",\"data\":\"data-lake-bucket-123\"}\n</code></pre> <p>To delete the publisher, simply call <code>delete_publisher</code> with the name you received from <code>create_notice_publisher</code>:</p> <pre><code>select omni_cloudevents.delete_publisher(name);\n</code></pre> <p>Observing events in flight</p> <p>If your tooling needs to see events that weren't committed yet (for example, to provide a more responsive experience within a transaction), notice publisher can be made to observe uncommitted events as well:</p> <pre><code>select omni_cloud_events.create_notice_publisher(publish_uncommitted =&gt; true);\n</code></pre>"},{"location":"omni_containers/intro/","title":"Intro","text":"<p><code>omni_containers</code> manages containers that can be automatically connected to the database instance and their lifecycle can be managed from within the database.</p>"},{"location":"omni_containers/intro/#prerequisites","title":"Prerequisites","text":"<p>Docker engine API should be accessible to the PostgreSQL instance which is configurable through the env variable <code>DOCKER_HOST</code> if not set it defaults to unix domain socket <code>unix:///var/run/docker.sock</code></p>"},{"location":"omni_containers/intro/#create-container","title":"Create container","text":"<p>Create and start a container with <code>busybox</code> image(pull if not already present) and run <code>echo Hello world</code> command in it</p> <pre><code>select * from omni_containers.docker_container_create('busybox', cmd =&gt; 'echo Hello world', pull =&gt; true);\n</code></pre> <p>Returns the container id as the result <pre><code>NOTICE:  Pulling image busybox\ndocker_container_create                      ------------------------------------------------------------------\n9e7b911de036955b13752d740597aa85187ed520d7f4aead128a88328df6e923\n(1 row)\n</code></pre></p> Parameter Type Description Default image text image name None cmd text command to run <code>NULL</code> attach text attach local PostgreSQL as db.omni start boolean start the container true wait boolean wait till container exits false pull boolean pull if image absent false options jsonb extra options {}"},{"location":"omni_containers/intro/#query-container-logs","title":"Query container logs","text":"<p>Read the logs of container with a given id <pre><code>select * from omni_containers.docker_container_logs('9e7');\n</code></pre> <pre><code> docker_container_logs -----------------------\nHello world          +\n(1 row)\n</code></pre></p> Parameter Type Description Default id text container id None stdout bool include stdout true stderr bool include stderr true since timestamp without time zone logs since <code>NULL</code> until timestamp without time zone logs until <code>NULL</code> timestamps boolean add timestamps to log false tail integer num of log lines from end <code>NULL</code>"},{"location":"omni_containers/intro/#attach-postgres-to-container","title":"Attach postgres to container","text":"<p>Create a container which connects and sends queries to the postgresql instance</p> <pre><code>with container as (select * from omni_containers.docker_container_create('ghcr.io/yrashk/psql',\ncmd =&gt; $$psql -c 'create table container_test ();'$$,\nwait =&gt; true, pull =&gt; true) as id)\nselect\nomni_containers.docker_container_inspect(id) -&gt; 'State' -&gt; 'ExitCode' as exit_code,\nomni_containers.docker_container_logs(id)  as logs\nfrom\ncontainer;\n</code></pre> <pre><code>exit_code |     logs     -----------+--------------\n0         | CREATE TABLE+\n| (1 row)\n</code></pre>"},{"location":"omni_containers/intro/#executing-a-command-in-a-container","title":"Executing a command in a container","text":"<p>A function similar to <code>docker exec</code> is <code>docker_container_exec</code>. It can execute a command inside a running container and (optionally) capture the output.</p> <p>If the neither <code>stdout</code> or <code>stderr</code> are attached to, the output will be captured and returned; otherwise, <code>null</code> is returned.</p> Parameter Type Description Default id text container ID None cmd text command to run None attach_stdout boolean attach and capture <code>stdout</code> false attach_stderr boolean attach and capture <code>stderr</code> false options jsonb extra options {}"},{"location":"omni_containers/intro/#stop-container","title":"Stop container","text":"<p>Stop the container with given id <pre><code>select * from omni_containers.docker_container_stop('9e7');\n</code></pre></p> Parameter Type Description Default id text container id None"},{"location":"omni_containers/intro/#list-images","title":"List images","text":"<p>List the locally available repo_tags using <code>docker images</code> view <pre><code>select repo_tags from docker_images;\n</code></pre> <pre><code>          repo_tags           ------------------------------\n{minio/minio:latest}\n{alpine:latest}\n{busybox:latest}\n{ghcr.io/yrashk/psql:latest}\n(4 rows)\n</code></pre></p> <p>View schema</p> Column Type id text size bigint labels jsonb created_at timestamp with time zone parent_id text repo_tags text[] containers integer shared_size integer repo_digests text[] virtual_size jsonb"},{"location":"omni_containers/intro/#inspect-container","title":"Inspect container","text":"<p>Returns the entire inspect output as <code>jsonb</code></p> <p>Check the exit code of container with given id <pre><code>select info-&gt;'State'-&gt;'ExitCode' as exit_code from docker_container_inspect('9e7') as info;\n</code></pre> <pre><code> exit_code -----------\n0\n(1 row)\n</code></pre></p> Parameter Type Description Default id text container id None"},{"location":"omni_credentials/credentials/","title":"Credential Management","text":"<code>omni_credentials</code> is a templated extension <p><code>omni_credentials</code> is a templated extension. This means that by installing it, a default copy of it is instantiated into extension's schema. However, you can replicate it into any other schema, tune some of the parameters and make the database own the objects (as opposed to the extension itself):</p> <pre><code>select omni_credentials.instantiate(\n[schema =&gt; 'omni_credentials'],    [env_var =&gt; 'OMNI_CREDENTIALS_MASTER_PASSWORD'])\n</code></pre> <p>This allows you to have multiple independent credential systems, even if using different versions of <code>omni_credentials</code>. </p>"},{"location":"omni_credentials/credentials/#core-architecture","title":"Core Architecture","text":"<p>The central object of interest is the <code>credentials</code> view (instantiated into <code>omni_credentials</code> schema by default), it contains <code>name</code> and <code>value</code> columns that represent credential name and value. To help with producing a more unified, shareable credential ecosystem, we add few more columns</p> Name Type Description name text An identifier for the credential. value bytea Credential data (such as an API key, password, or token) kind credential_kind An enumerated type that categorizes the credential. Common values might include <code>api_key</code>, <code>api_secret</code>, <code>password</code>, etc., with a default of <code>credential</code> for generic cases. principal regrole Specifies the authenticated entity (the principal) for whom the credential is intended. Uses Postgres rolese, defaulting to the current user, ensuring the credential is tied to an identity. scope jsonb A JSON object defining the domain or resource constraints where the credential is valid. For example, <code>{ \"all\": true }</code> (default) indicates a wildcard scope, while more structured scopes can specify domains or conditions. <p>You can simply query and update it as you see fit. Behind the scene, it will propage changes as necessary.</p>"},{"location":"omni_credentials/credentials/#encryption-access-control","title":"Encryption &amp; Access Control","text":"<p>The <code>credentials</code> view is based on the <code>encrypted_credentials</code> view that has <code>value</code> encrypted and is a Row-Level Security-enabled relation. The default policy on it requires current user to have a grant for the role of <code>principal</code> (<code>encrypted_credentials_principal</code> policy). Additional policies can be provisioned.</p>"},{"location":"omni_credentials/credentials/#credential-encryption","title":"Credential Encryption","text":"<p>By default, all credentials are stored into the encryped credentials store. The encryption key is derived from the <code>OMNI_CREDENTIALS_MASTER_PASSWORD</code> environment variable1.</p> <p>The store keeps the data in <code>encrypted_credentials</code> table.</p>"},{"location":"omni_credentials/credentials/#file-store","title":"File Store","text":"<p>In development mode, it is practical to store encrypted files in the repository (conceptually similar to what Ruby on Rails does).</p> <p>In order to use one, a file store must be instantiated:</p> <pre><code>select omni_credentials.instantiate_file_store(filename, [schema])\n</code></pre> <p>It will import any available records in this file into the encrypted store, and export what's missing in it from the table. After that, every time the credentials are updated and commited, the file will be updated.</p> <p>To reload the credentials from the file (for example, if a new version of the code was pulled), invoke <code>credential_file_store_reload(filename)</code>. All registered file stores are listed in the <code>credential_file_stores</code> table.</p> <ol> <li> <p>This is fine for development environment but may be limited beyond it. In staging and production, direct use of encrypted credentials or future integrated stores is recommended.\u00a0\u21a9</p> </li> </ol>"},{"location":"omni_csv/","title":"CSV Toolkit","text":"<p>This extension provides direct CSV parsing and encoding capabilities without having to use <code>COPY</code>, enabling inline CSV processing within SQL queries and programmatic workflows.</p>"},{"location":"omni_csv/#installation-and-setup","title":"Installation and Setup","text":"<pre><code>-- Install the extension\ncreate extension omni_csv;\n-- All functions are available in the omni_csv schema\n</code></pre>"},{"location":"omni_csv/#core-functions","title":"Core Functions","text":""},{"location":"omni_csv/#omni_csvcsv_infocsv-text-inspect-csv-structure","title":"<code>omni_csv.csv_info(csv text)</code> - Inspect CSV Structure","text":"<p>Analyze the structure of CSV data by extracting column names from the header row:</p> <pre><code>select *\nfrom\nomni_csv.csv_info(E'name,age,city\\nJohn,25,NYC\\nJane,30,LA');\n</code></pre> <p>Returns:</p> <pre><code> column_name \n-------------\n name\n age\n city\n</code></pre> <p>This function is essential for working with dynamic or unknown CSV structures, allowing you to discover the schema before parsing the data.</p> <p>Use cases:</p> <ul> <li>Validating CSV uploads before processing</li> <li>Building dynamic queries based on CSV structure</li> <li>API endpoints that accept arbitrary CSV formats</li> </ul>"},{"location":"omni_csv/#omni_csvparsecsv-text-parse-csv-data","title":"<code>omni_csv.parse(csv text)</code> - Parse CSV Data","text":"<p>Transform CSV text into queryable records:</p> <pre><code>select *\nfrom\nomni_csv.parse(E'name,age,city\\nJohn,25,NYC\\nJane,30,LA')\nas t(name text, age text, city text);\n</code></pre> <p>Returns:</p> <pre><code> name | age | city \n------+-----+------\n John |  25 | NYC\n Jane |  30 | LA\n</code></pre> <p>Key Requirements:</p> <ul> <li>Must specify column structure using <code>as t(column_name text, ...)</code></li> <li>The number of columns should match</li> </ul>"},{"location":"omni_csv/#omni_csvcsv_aggrecord-generate-csv-from-records","title":"<code>omni_csv.csv_agg(record)</code> - Generate CSV from records","text":"<p>Convert query results back into CSV format:</p> <pre><code>select\nomni_csv.csv_agg(t)\nfrom\n(select\nname,\nage,\ncity\nfrom\nemployees\nwhere\ndepartment = 'Engineering'\norder by name) t;\n</code></pre> <p>Returns: A complete CSV string with headers and properly escaped values.</p> <p>Limitations &amp; caveats</p> <p>Currently, on an empty set, this aggregate won't encode headers either, returning an empty string.</p>"},{"location":"omni_csv/#limitations-and-considerations","title":"Limitations and Considerations","text":"<ul> <li>Memory Usage: Large CSV strings are processed entirely in memory</li> <li>Type Declaration: Column types must be explicitly specified in <code>as t(...)</code> clause</li> <li>No Streaming: Not suitable for extremely large datasets that exceed memory limits</li> <li>Schema Rigidity: Once declared, the column structure cannot be changed within the same query</li> <li>Performance: For repeated access to the same CSV, consider materializing the parsed data</li> </ul>"},{"location":"omni_csv/#comparison-with-alternatives","title":"Comparison with Alternatives","text":"Method Use Case Pros Cons <code>omni_csv</code> Programmatic, inline processing No temp files, full SQL integration Memory limited <code>COPY</code> Bulk data loading Very fast, streaming Requires file system access External tools Very large datasets Can handle any size Additional dependencies <p>The <code>omni_csv</code> extension excels in scenarios where CSV data needs to be processed as part of complex SQL workflows, API endpoints, or data transformation pipelines without the overhead of temporary files or external processes.</p>"},{"location":"omni_datasets/northwind/","title":"Northwind","text":"<pre><code>create extension omni_datasets;\ncreate schema northwind;\nselect omni_datasets.instantiate_northwind(schema =&gt; 'northwind');\n</code></pre> <p>Installs the Northwind sample database. Yes, the 90s classic from MS Access and SQL Server!</p> <p>The main goal is to provide a standard dataset that all other plugins may and should use for testing. Plugins should also extend this 90s dataset with sample data relevant to their functionality. For example, a plugin providing pgvector support would extend this with vectorized data and AI use cases,</p> <p>Secondary goal is to provide a small but realistic dataset that is installed by default, so that new users have something they can see and even try some queries with, without needing to insert their own data.</p>"},{"location":"omni_datasets/northwind/#about-the-sample-database","title":"About the sample database","text":"<p>The Northwind sample database appeared in Microsoft Access and later SQL Server in the 90s. It was recently replaced with a more modern sample data set.</p> <p>Omnigres uses a PostgreSQL compatible version maintained by Yugabyte: https://github.com/yugabyte/yugabyte-db/tree/master/sample</p> <p>You can read more and view a diagram of the Northwind database at https://github.com/yugabyte/yugabyte-db/wiki/Northwind-Sample-Database</p> <p>The Northwind sample database is MIT licensed.</p>"},{"location":"omni_httpc/reference/","title":"HTTP client","text":"<p>omni_httpc provides an efficient HTTP/1, HTTP/2 and HTTP/3 (experimental) client functionality.</p>"},{"location":"omni_httpc/reference/#standard-mode","title":"Standard mode","text":"<p>The basic mode for <code>omni_httpc</code> use is through the use of functions provided by the extension.</p>"},{"location":"omni_httpc/reference/#preparing-a-request","title":"Preparing a request","text":"<p>In order to prepare a request, one can use <code>omni_httpc.http_request()</code> function, with the following parameters:</p> Parameter Type Description Default url text URL None 1 method omni_http.http_method HTTP method 2 <code>GET</code> headers omni_http.http_headers An array of HTTP headers None body bytea Request body <code>NULL</code> <p>The function returns a prepared request. No request is executed at this point.</p> <p>Null values in headers</p> <p>If header name is <code>null</code>, it won't create any header. If header value is  <code>null</code>, it'll be serialized as an empty string.</p>"},{"location":"omni_httpc/reference/#executing-requests","title":"Executing requests","text":"<p>Requests can be executed using <code>omni_httpc.http_execute</code> functions which takes a variadic array of requests (which means you can execute more than one request at a time):</p> <pre><code>select version &gt;&gt; 8 as http_version, status, headers,\nconvert_from(body, 'utf-8') from omni_httpc.http_execute(\nomni_httpc.http_request('https://example.com'), omni_httpc.http_request('https://example.org'))\n</code></pre> <p>Produces</p> <pre><code>-[ RECORD 1 ]+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\nhttp_version | 1\nstatus       | 200\nheaders      | {\"(age,500113)\",\"(cache-control,max-age=604800)\",\"(content-type,\\\"text/html; charset=UTF-8\\\")\",\"(date,\\\"Mon, 29 May 2023 23:45:47 GMT\\\")\",\"(etag,\\\"\\\"\\\"3147526947+ident\\\"\\\"\\\")\",\"(expires,\\\"Mon, 05 Jun 2023 23:45:47 GMT\\\")\",\"(last-modified,\\\"Thu, 17 Oct 2019 07:18:26 GMT\\\")\",\"(server,\\\"ECS (sec/96ED)\\\")\",\"(vary,Accept-Encoding)\",\"(x-cache,HIT)\",\"(content-length,1256)\"}\nconvert_from | &lt;!doctype html&gt;                                                                                                                                                                                                                                                                                                                                                                  +\n             | &lt;html&gt;                                                                                                                                                                                                                                                                                                                                                                           +\n             | &lt;head&gt;                                                                                                                                                                                                                                                                                                                                                                           +\n             |     &lt;title&gt;Example Domain&lt;/title&gt;                                                                                                                                                                                                                                                                                                                                                +\n             |                                                                                                                                                                                                                                                                                                                                                                                  +\n             |     &lt;meta charset=\"utf-8\" /&gt;                                                                                                                                                                                                                                                                                                                                                     +\n             |     &lt;meta http-equiv=\"Content-type\" content=\"text/html; charset=utf-8\" /&gt;                                                                                                                                                                                                                                                                                                        +\n             |     &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" /&gt;                                                                                                                                                                                                                                                                                                       +\n             |     &lt;style type=\"text/css\"&gt;                                                                                                                                                                                                                                                                                                                                                      +\n             |     body {                                                                                                                                                                                                                                                                                                                                                                       +\n             |         background-color: #f0f0f2;                                                                                                                                                                                                                                                                                                                                               +\n             |         margin: 0;                                                                                                                                                                                                                                                                                                                                                               +\n             |         padding: 0;                                                                                                                                                                                                                                                                                                                                                              +\n             |         font-family: -apple-system, system-ui, BlinkMacSystemFont, \"Segoe UI\", \"Open Sans\", \"Helvetica Neue\", Helvetica, Arial, sans-serif;                                                                                                                                                                                                                                      +\n             |                                                                                                                                                                                                                                                                                                                                                                                  +\n             |     }                                                                                                                                                                                                                                                                                                                                                                            +\n             |     div {                                                                                                                                                                                                                                                                                                                                                                        +\n             |         width: 600px;                                                                                                                                                                                                                                                                                                                                                            +\n             |         margin: 5em auto;                                                                                                                                                                                                                                                                                                                                                        +\n             |         padding: 2em;                                                                                                                                                                                                                                                                                                                                                            +\n             |         background-color: #fdfdff;                                                                                                                                                                                                                                                                                                                                               +\n             |         border-radius: 0.5em;                                                                                                                                                                                                                                                                                                                                                    +\n             |         box-shadow: 2px 3px 7px 2px rgba(0,0,0,0.02);                                                                                                                                                                                                                                                                                                                            +\n             |     }                                                                                                                                                                                                                                                                                                                                                                            +\n             |     a:link, a:visited {                                                                                                                                                                                                                                                                                                                                                          +\n             |         color: #38488f;                                                                                                                                                                                                                                                                                                                                                          +\n             |         text-decoration: none;                                                                                                                                                                                                                                                                                                                                                   +\n             |     }                                                                                                                                                                                                                                                                                                                                                                            +\n             |     @media (max-width: 700px) {                                                                                                                                                                                                                                                                                                                                                  +\n             |         div {                                                                                                                                                                                                                                                                                                                                                                    +\n             |             margin: 0 auto;                                                                                                                                                                                                                                                                                                                                                      +\n             |             width: auto;                                                                                                                                                                                                                                                                                                                                                         +\n             |         }                                                                                                                                                                                                                                                                                                                                                                        +\n             |     }                                                                                                                                                                                                                                                                                                                                                                            +\n             |     &lt;/style&gt;                                                                                                                                                                                                                                                                                                                                                                     +\n             | &lt;/head&gt;                                                                                                                                                                                                                                                                                                                                                                          +\n             |                                                                                                                                                                                                                                                                                                                                                                                  +\n             | &lt;body&gt;                                                                                                                                                                                                                                                                                                                                                                           +\n             | &lt;div&gt;                                                                                                                                                                                                                                                                                                                                                                            +\n             |     &lt;h1&gt;Example Domain&lt;/h1&gt;                                                                                                                                                                                                                                                                                                                                                      +\n             |     &lt;p&gt;This domain is for use in illustrative examples in documents. You may use this                                                                                                                                                                                                                                                                                            +\n             |     domain in literature without prior coordination or asking for permission.&lt;/p&gt;                                                                                                                                                                                                                                                                                                +\n             |     &lt;p&gt;&lt;a href=\"https://www.iana.org/domains/example\"&gt;More information...&lt;/a&gt;&lt;/p&gt;                                                                                                                                                                                                                                                                                                +\n             | &lt;/div&gt;                                                                                                                                                                                                                                                                                                                                                                           +\n             | &lt;/body&gt;                                                                                                                                                                                                                                                                                                                                                                          +\n             | &lt;/html&gt;                                                                                                                                                                                                                                                                                                                                                                          +\n             | \n-[ RECORD 2 ]+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\nhttp_version | 1\nstatus       | 200\nheaders      | {\"(age,21859)\",\"(cache-control,max-age=604800)\",\"(content-type,\\\"text/html; charset=UTF-8\\\")\",\"(date,\\\"Mon, 29 May 2023 23:45:47 GMT\\\")\",\"(etag,\\\"\\\"\\\"3147526947+ident\\\"\\\"\\\")\",\"(expires,\\\"Mon, 05 Jun 2023 23:45:47 GMT\\\")\",\"(last-modified,\\\"Thu, 17 Oct 2019 07:18:26 GMT\\\")\",\"(server,\\\"ECS (sec/96EE)\\\")\",\"(vary,Accept-Encoding)\",\"(x-cache,HIT)\",\"(content-length,1256)\"}\nconvert_from | &lt;!doctype html&gt;                                                                                                                                                                                                                                                                                                                                                                  +\n             | &lt;html&gt;                                                                                                                                                                                                                                                                                                                                                                           +\n             | &lt;head&gt;                                                                                                                                                                                                                                                                                                                                                                           +\n             |     &lt;title&gt;Example Domain&lt;/title&gt;                                                                                                                                                                                                                                                                                                                                                +\n             |                                                                                                                                                                                                                                                                                                                                                                                  +\n             |     &lt;meta charset=\"utf-8\" /&gt;                                                                                                                                                                                                                                                                                                                                                     +\n             |     &lt;meta http-equiv=\"Content-type\" content=\"text/html; charset=utf-8\" /&gt;                                                                                                                                                                                                                                                                                                        +\n             |     &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" /&gt;                                                                                                                                                                                                                                                                                                       +\n             |     &lt;style type=\"text/css\"&gt;                                                                                                                                                                                                                                                                                                                                                      +\n             |     body {                                                                                                                                                                                                                                                                                                                                                                       +\n             |         background-color: #f0f0f2;                                                                                                                                                                                                                                                                                                                                               +\n             |         margin: 0;                                                                                                                                                                                                                                                                                                                                                               +\n             |         padding: 0;                                                                                                                                                                                                                                                                                                                                                              +\n             |         font-family: -apple-system, system-ui, BlinkMacSystemFont, \"Segoe UI\", \"Open Sans\", \"Helvetica Neue\", Helvetica, Arial, sans-serif;                                                                                                                                                                                                                                      +\n             |                                                                                                                                                                                                                                                                                                                                                                                  +\n             |     }                                                                                                                                                                                                                                                                                                                                                                            +\n             |     div {                                                                                                                                                                                                                                                                                                                                                                        +\n             |         width: 600px;                                                                                                                                                                                                                                                                                                                                                            +\n             |         margin: 5em auto;                                                                                                                                                                                                                                                                                                                                                        +\n             |         padding: 2em;                                                                                                                                                                                                                                                                                                                                                            +\n             |         background-color: #fdfdff;                                                                                                                                                                                                                                                                                                                                               +\n             |         border-radius: 0.5em;                                                                                                                                                                                                                                                                                                                                                    +\n             |         box-shadow: 2px 3px 7px 2px rgba(0,0,0,0.02);                                                                                                                                                                                                                                                                                                                            +\n             |     }                                                                                                                                                                                                                                                                                                                                                                            +\n             |     a:link, a:visited {                                                                                                                                                                                                                                                                                                                                                          +\n             |         color: #38488f;                                                                                                                                                                                                                                                                                                                                                          +\n             |         text-decoration: none;                                                                                                                                                                                                                                                                                                                                                   +\n             |     }                                                                                                                                                                                                                                                                                                                                                                            +\n             |     @media (max-width: 700px) {                                                                                                                                                                                                                                                                                                                                                  +\n             |         div {                                                                                                                                                                                                                                                                                                                                                                    +\n             |             margin: 0 auto;                                                                                                                                                                                                                                                                                                                                                      +\n             |             width: auto;                                                                                                                                                                                                                                                                                                                                                         +\n             |         }                                                                                                                                                                                                                                                                                                                                                                        +\n             |     }                                                                                                                                                                                                                                                                                                                                                                            +\n             |     &lt;/style&gt;                                                                                                                                                                                                                                                                                                                                                                     +\n             | &lt;/head&gt;                                                                                                                                                                                                                                                                                                                                                                          +\n             |                                                                                                                                                                                                                                                                                                                                                                                  +\n             | &lt;body&gt;                                                                                                                                                                                                                                                                                                                                                                           +\n             | &lt;div&gt;                                                                                                                                                                                                                                                                                                                                                                            +\n             |     &lt;h1&gt;Example Domain&lt;/h1&gt;                                                                                                                                                                                                                                                                                                                                                      +\n             |     &lt;p&gt;This domain is for use in illustrative examples in documents. You may use this                                                                                                                                                                                                                                                                                            +\n             |     domain in literature without prior coordination or asking for permission.&lt;/p&gt;                                                                                                                                                                                                                                                                                                +\n             |     &lt;p&gt;&lt;a href=\"https://www.iana.org/domains/example\"&gt;More information...&lt;/a&gt;&lt;/p&gt;                                                                                                                                                                                                                                                                                                +\n             | &lt;/div&gt;                                                                                                                                                                                                                                                                                                                                                                           +\n             | &lt;/body&gt;                                                                                                                                                                                                                                                                                                                                                                          +\n             | &lt;/html&gt;                                                                                                                                                                                                                                                                                                                                                                          +\n             | \n</code></pre>"},{"location":"omni_httpc/reference/#response-columns","title":"Response columns","text":"Column Type Description version smallint http_major &lt;&lt; 8 + http_minor 3 status smallint HTTP response status (200, 404, etc.) headers omni_http.http_headers Response headers body bytea Response body error text If not <code>NULL</code>, an error occurred during request"},{"location":"omni_httpc/reference/#configuring-request-execution","title":"Configuring request execution","text":"<p>It is also possible to configure certain parameters of request execution. </p> <p>In this example, we're making <code>omni_httpc</code> switch to HTTP/2:</p> <pre><code>select version &gt;&gt; 8 as http_version, status, headers from\nomni_httpc.http_execute_with_options(omni_httpc.http_execute_options(http2_ratio =&gt; 100), omni_httpc.http_request('https://example.com'),\nomni_httpc.http_request('https://example.org'))\n</code></pre> <p>You can now see that <code>http_version</code> is set to <code>2</code>:</p> <pre><code>-[ RECORD 1 ]+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\nhttp_version | 2\nstatus       | 200\nheaders      | {\"(age,592467)\",\"(cache-control,max-age=604800)\",\"(content-type,\\\"text/html; charset=UTF-8\\\")\",\"(date,\\\"Mon, 29 May 2023 23:49:05 GMT\\\")\",\"(etag,\\\"\\\"\\\"3147526947+ident\\\"\\\"\\\")\",\"(expires,\\\"Mon, 05 Jun 2023 23:49:05 GMT\\\")\",\"(last-modified,\\\"Thu, 17 Oct 2019 07:18:26 GMT\\\")\",\"(server,\\\"ECS (sec/976A)\\\")\",\"(vary,Accept-Encoding)\",\"(x-cache,HIT)\",\"(content-length,1256)\"}\n-[ RECORD 2 ]+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\nhttp_version | 2\nstatus       | 200\nheaders      | {\"(age,500311)\",\"(cache-control,max-age=604800)\",\"(content-type,\\\"text/html; charset=UTF-8\\\")\",\"(date,\\\"Mon, 29 May 2023 23:49:05 GMT\\\")\",\"(etag,\\\"\\\"\\\"3147526947+ident\\\"\\\"\\\")\",\"(expires,\\\"Mon, 05 Jun 2023 23:49:05 GMT\\\")\",\"(last-modified,\\\"Thu, 17 Oct 2019 07:18:26 GMT\\\")\",\"(server,\\\"ECS (sec/96ED)\\\")\",\"(vary,Accept-Encoding)\",\"(x-cache,HIT)\",\"(content-length,1256)\"}\n</code></pre>"},{"location":"omni_httpc/reference/#options","title":"Options","text":"Option Type Description Default http2_ratio smallint Percentage of requests to be attempted with HTTP/2 <code>(0..100)</code> 4 <code>0</code> http3_ratio smallint Percentage of requests to be attempted with HTTP/3 <code>(0..100)</code> 4 <code>0</code> force_cleartext_http2 bool Allow HTTP/2 to be used without SSL <code>false</code> first_byte_timeout int Timeout before first bytes received in milliseconds. 5000 timeout int General timeout 5000 follow_redirects bool Whether to follow HTTP redirects <code>true</code> cacerts text[] CA certificates to install (PEM-encoded) <code>null</code> clientcert client_certificate Client certificate (<code>private_key</code> and <code>certificate</code> encoded as PEM) <code>null</code> <p>More options will be added in the near future</p>"},{"location":"omni_httpc/reference/#connection-pool","title":"Connection Pool","text":"<p>In every Postgres process, <code>omni_httpc</code> maintains a connection pool shared across function calls. You can inspect it by calling <code>omni_httpc.http_connections</code>:</p> <pre><code>select * from omni_httpc.http_connections\n</code></pre> <p>Sample output:</p> <pre><code>http_protocol |     url     \n---------------+-------------\n             2 | example.com\n             2 | example.org\n(2 rows)\n</code></pre>"},{"location":"omni_httpc/reference/#background-mode","title":"Background mode","text":"<p>Not yet supported</p> <p>There's a plan to add a capability for processing HTTP requests in background, executing SQL queries upon request completion.</p> <p>However, this work has not been done yet. You're welcome to contribute</p> <ol> <li> <p>NULL is illegal\u00a0\u21a9</p> </li> <li> <p><code>GET</code>, <code>HEAD</code>, <code>POST</code>, <code>PUT</code>, <code>DELETE</code>, <code>CONNECT</code>, <code>OPTIONS</code>, <code>TRACE</code>, <code>PATCH</code> \u21a9</p> </li> <li> <p>This will likely be changed in the upcoming release\u00a0\u21a9</p> </li> <li> <p>The sum of <code>http2_ratio</code> and <code>http3_ratio</code> must not exceed <code>100</code> \u21a9\u21a9</p> </li> </ol>"},{"location":"omni_httpd/architecture/","title":"Architecture","text":"<p>omni_httpd serves HTTP connections by employing a fleet of background workers.</p> <p>There's a master worker that handles starting HTTP workers and handling configuration change requests 1</p> <p>There are multiple HTTP workers 2. Each HTTP worker is an instance of Postgres and can therefore handle incoming requests. This is done by running a matching route handler on the main thread, and handling network I/O of HTTP requests and responses on a secondary thread 3.</p> <p>To enable scenarios where multiplexing is possible (such as HTTP/2), omni_httpd will attempt to re-send incoming HTTP/2 (or higher) requests to other workers if the current worker is busy handling a request.</p> <p>Below is a diagram outlining general workflow.</p> <pre><code>sequenceDiagram\n    autonumber\n    actor B as Browser\n    box lightyellow Multiple instances\n      participant H as HTTP server thread\n      participant HW as HTTP worker\n    end\n    participant MW as Master worker\n    participant P as Postgres\n    actor O as Operator\n\n    P --&gt;&gt; MW: Start background worker\n    loop omni_httpd.http_workers GUC times\n      MW --&gt;&gt; HW: Start background worker\n    end\n    HW --&gt;&gt; H: Start\n    loop for every request\n      B -&gt;&gt; H: HTTP request\n      critical Dispatch\n       H -&gt;&gt; HW: Request\n       HW -&gt;&gt; HW: Run handler query\n      option HTTP worker busy (HTTP/2+)\n       H -&gt;&gt; H: proxy to another worker\n      option HTTP worker busy (HTTP/1)\n       H -&gt;&gt; H: Wait until not busy\n      end\n      HW -&gt;&gt; H: Response\n      H -&gt;&gt; B: Response\n    end\n\n    O -&gt;&gt; P: Update listeners and/or handlers</code></pre> Want to know more? <ul> <li> Master worker opens the listening socket and shares it with HTTP    workers over a UNIX socket (using <code>SCM_RIGHTS</code>). More work needs to    be done to improve this. Please consider contributing!</li> <li> Actual HTTP functionality is enabled by awesome h2o web server. Particularly,   its libh2o component.</li> </ul> <ol> <li> <p>Triggered by changes to <code>omni_httpd.listeners</code> or manually using <code>omni_httpd.reload_configuration()</code>)\u00a0\u21a9</p> </li> <li> <p>Can be configured using <code>omni_httpd.http_workers</code> configuration variable. Defaults to number of CPU cores online.\u00a0\u21a9</p> </li> <li> <p>This thread is strictly prohibited from calling into Postgres.\u00a0\u21a9</p> </li> </ol>"},{"location":"omni_httpd/headers/","title":"Headers","text":"<p>HTTP requests come with headers, which can be retrieved using <code>omni_http.header_get</code> and <code>omni_http.header_get_all</code> functions:</p> <pre><code>select omni_http.http_header_get(request.headers, 'host') as host;\nselect omni_http.http_header_get_all(request.headers, 'accept') as accept;\n</code></pre> <p>The header name these functions take is case-insensitive.</p>"},{"location":"omni_httpd/headers/#content-length","title":"Content-Length","text":"<p><code>omni_httpd</code> automatically sets the <code>Content-Length</code> header for any non-null response body.</p> <p>For instance, having:</p> <pre><code>create function my_handler(request omni_httpd.http_request)\nreturns omni_httpd.http_outcome\nreturn omni_httpd.http_response('Hi there');\ninsert into omni_httpd.urlpattern_router (match, handler)\nvalues (omni_httpd.urlpattern('/hi'), 'my_handler'::regproc);\n</code></pre> <p>Will produce the response:</p> <pre><code>$ curl localhost:8080/hi -i\n\nHTTP/1.1 200 OK\nConnection: keep-alive\nContent-Length: 8\nServer: omni_httpd-0.4.0\ncontent-type: text/plain; charset=utf-8\n\nHi there\n</code></pre> <p>Overriding Content-Length</p> <p><code>omni_httpd</code> allows overriding the <code>Content-Length</code>. This is useful for integrating with other HTTP handlers (e.g. Flask) that set the <code>Content-Length</code>. To ensure correctness, overriding works in the following way:</p> <ul> <li>If the <code>Content-Length</code> is set lower than the actual body size. <code>omni_httpd</code> will use the new <code>Content-Length</code> and downsize the response body.</li> <li>If the <code>Content-Length</code> is set higher than the actual body size. <code>omni_httpd</code> will keep its <code>Content-Length</code>, emit a WARNING and use the actual body size.</li> </ul>"},{"location":"omni_httpd/install/","title":"Installation","text":""},{"location":"omni_httpd/install/#requirements","title":"Requirements","text":"<p><code>omni_httpd</code> requires <code>omni</code> extension to be preloaded.</p>"},{"location":"omni_httpd/intro/","title":"Intro","text":"<p>omni_httpd is an embedded HTTP server for Postgres. It allows one to write HTTP request handling in SQL. This approach lends to less indirection that is common in traditional application architectures, where applications are interacting with the database directly.</p>"},{"location":"omni_httpd/intro/#getting-started","title":"Getting started.","text":"<p>By default, <code>omni_httpd</code>, once installed, will provide a default page on port <code>8080</code>.</p> <p>You can start adding handlers to the default router. In order to do so, we must first define a handler function:</p> <pre><code>create function my_handler(request omni_httpd.http_request)\nreturns omni_httpd.http_outcome\nreturn omni_httpd.http_response(body =&gt; request.headers::text);\n</code></pre> <p>Now we can add it:</p> <pre><code>insert into omni_httpd.urlpattern_router (match, handler)\nvalues (omni_httpd.urlpattern('/headers'), 'my_handler'::regproc);\n</code></pre> <p>A request to <code>/headers</code> will dump request's headers,. We can test it with <code>curl</code>:</p> <pre><code>$ curl http://localhost:8080/headers\n{\"(omnigres-connecting-ip,127.0.0.1)\",\"(user-agent,curl/8.7.1)\",\"(accept,*/*)\"}\n</code></pre> <p>In order to test your request handlers without having to run actual HTTP requests against it, one can use <code>omni_httpd.http_request</code> function to compose requests:</p> <pre><code>select\nomni_httpd.http_response((omni_httpd.http_request('/')).path);\n</code></pre> Parameter Type Description Default path text Path None method omni_http.http_method HTTP method [^http-method] <code>GET</code> query_string text Query string <code>NULL</code> headers omni_http.http_headers An array of HTTP headers empty array body bytea Request body <code>NULL</code>"},{"location":"omni_httpd/intro/#configuration","title":"Configuration","text":"<p><code>omni_httpd</code> can be configured with the following PostgreSQL configuration variables:</p> <ul> <li><code>omni_httpd.http_workers</code> to configure the number of http workers. It defaults to the number of cpus and adjusts if this is higher than what max_worker_processes allows.</li> <li><code>omni_httpd.temp_dir</code> to set the temporary directory for <code>omni_httpd</code> files like unix domain sockets, defaults   to <code>/tmp</code></li> </ul>"},{"location":"omni_httpd/intro/#controls","title":"Controls","text":"<p>To stop or start omni_httpd server, one can use <code>omni_httpd.stop()</code> and <code>omni_httpd.start()</code> procedures. They both accept a boolean <code>immediate</code> parameter (defaults to <code>false</code>), which will perform the operation immediately without waiting for the transaction to successfully commit.</p> <p>When is it useful?</p> <p>Beyond the most obvious scenario, in which you just need the server to be stopped, there's a case when the database it is running in requires to be free of users. For example, if you want to create another database with the primary database as its template (for example, for isolated testing).</p> <p>Bear in mind that currently, in order for the templated database to get its HTTP server running, you need to connect to it. This may change in the future.</p>"},{"location":"omni_httpd/reverse_proxy/","title":"Reverse Proxy","text":"<p>omni_httpd has a capability to respond to HTTP requests with other outcomes. Of a particular interest is <code>http_proxy</code> as it allows us to dynamically proxy and re-process the incoming HTTP request to a backend:</p> <pre><code>select\nomni_httpd.http_proxy('http://127.0.0.1:9000' || request.path)\n</code></pre> <p>The above will simply redirect all incoming requests to <code>127.0.0.1</code> (port <code>9000</code>) over plain HTTP with the request path being sent as-is.</p> <p>This approach retrieving the target for proxying dynamically based on data in the database, the incoming request itself or any other data that can be retrieved in a query.</p> Potential performance implications <p>This is a new feature and it hasn't been extensively benchmarked. Determining proxying information in runtime may have some performance implications.</p> <p>In the future, we may provide a dedicated configuration for backend proxying that will allow for configuration-time resolution of the backends (for example, to fetch them from a table), if the performance implications will be too taxing in some use-cases.</p>"},{"location":"omni_httpd/reverse_proxy/#additional-options","title":"Additional Options","text":"<p><code>omni_httpd.http_proxy</code> takes the following optional parameters:</p> Name Description Default <code>preserve_host</code> Pass <code>Host</code> header from the incoming request to the backend <code>true</code>"},{"location":"omni_httpd/routing/","title":"Routing","text":"<p><code>omni_httpd</code> implements routing using the concepts of routers and routes.</p>"},{"location":"omni_httpd/routing/#router","title":"Router","text":"<p>A router is a relation (table) that defines how incoming HTTP requests should be handled. It must include at least the following:</p>"},{"location":"omni_httpd/routing/#matcher-column","title":"Matcher Column","text":"<p>A column (with any name) of type <code>omni_httpd.urlpattern</code> that defines the URL pattern to match.</p> <p><code>omni_httpd.urlpattern</code> composite type is defined as below and has a matching <code>omni_httpd.urlpattern()</code> constructor function that takes all of these parameters (with <code>null</code> values by default to signify acceptance of \"any value\")</p> Name Type Description protocol text The protocol part of the URL (e.g., http, https) username text The username for authentication (if provided) password text The password for authentication (if provided) hostname text The hostname or domain of the URL port int The port number specified in the URL pathname text The path segment of the URL search text The query string component of the URL hash text The fragment identifier of the URL method omni_http.http_method The HTTP method (e.g., GET, POST, etc.)"},{"location":"omni_httpd/routing/#handler-column","title":"Handler Column","text":"<p>A column (with any name) of type <code>regprocedure</code> that specifies the function to execute when the URL pattern is matched.</p> <p>Values referring to functions and procedures here will be treated depending on their parameters. Procedures will be called with a non-atomic context 1</p> <p>Following parameters may be specified, at any position:</p> <ul> <li><code>omni_httpd.http_request</code> \u2013 will pass the request</li> <li><code>omni_httpd.http_outcome</code> \u2013 for procedural handlers and middleware </li> <li>For handlers, this parameter must use the out mode.</li> <li>For middleware, it should use inout mode and will not terminate the request processing.</li> <li><code>&lt;router table type&gt;</code> \u2013 the matched record from the router can be passed into the handler.</li> </ul> <p>Note: The function must return a value of type omni_httpd.httpd_outcome.</p>"},{"location":"omni_httpd/routing/#examples","title":"Examples","text":""},{"location":"omni_httpd/routing/#request-passing-function-handler","title":"Request passing function handler","text":"<pre><code>create function normal_handler(request omni_httpd.http_request)\nreturns omni_httpd.http_outcome\nreturn omni_httpd.http_response(request.path);\n</code></pre> <p>This function will return a response with the request's path.</p>"},{"location":"omni_httpd/routing/#no-arguments-function-handler","title":"No arguments function handler","text":"<pre><code>create function function_handler()\nreturns omni_httpd.http_outcome\nreturn omni_httpd.http_response('function');\n</code></pre> <p>This function will simply return a response without considering the request.</p>"},{"location":"omni_httpd/routing/#passing-route-tuple-function","title":"Passing route tuple function","text":"<pre><code>create function tuple_handler(t my_router)\nreturns omni_httpd.http_outcome\nreturn omni_httpd.http_response(format('%s', t.handler))\n</code></pre> <p>This function will return the route's handler (itself: <code>tuple_handler</code>)</p>"},{"location":"omni_httpd/routing/#priority-column","title":"Priority Column","text":"<p>An optional column (with any name) of type omni_httpd.route_priority that indicates the route\u2019s priority. A higher number means a higher priority.</p> <p>Every row in this relation denotes a route. Upon HTTP request, <code>omni_httpd</code> will match the incoming request against all routes in all routers.</p>"},{"location":"omni_httpd/routing/#default-router","title":"Default router","text":"<p><code>omni_httpd</code> provides a default router (<code>omni_httpd.urlpattern_router</code>) that can be used either directly (by inserting records into it) or as a \"template\" to be used in creation of own routers to re-use the boilerplate by using <code>like omni_httpd.urlpattern_router</code> construct.</p>"},{"location":"omni_httpd/routing/#example","title":"Example","text":"<pre><code>create function my_handler(request omni_httpd.http_request)\nreturns omni_httpd.http_outcome\nreturn omni_httpd.http_response(body =&gt; request.headers::text);\ncreate table my_router (like omni_httpd.urlpattern_router);\ninsert into my_router (match, handler)\nvalues (omni_httpd.urlpattern('/headers'), 'my_handler'::regproc);\n</code></pre> <p>We can now test it:</p> <pre><code>$ curl localhost:8080/headers\n{\"(omnigres-connecting-ip,127.0.0.1)\",\"(user-agent,curl/8.7.1)\",\"(accept,*/*)\"}\n</code></pre> <ol> <li> <p>This means one can run transactional commands like <code>rollback</code> and <code>commit</code> \u21a9</p> </li> </ol>"},{"location":"omni_httpd/security/","title":"Security","text":"<p>HTTP server hardening</p> <p>At this moment, this extension does not provide any additional hardening for the HTTP server functionality to prevent any unintended interaction between the server and the database outside of strict confines of the message passing approach used for their intended way of communication.</p> <p>We are eager to add support for such hardening (perhaps as an opt-in if it  significantly decreases performance). Please consider contributing.</p> <p>In order to enforce a role on a handler, use <code>omni_httpd.handler</code> table to specify a mapping of a handler to a specific role.</p> <p>Sandboxing procedural handlers with roles</p> <p>Please note that currently there's an outstanding issue of procedures (as opposed to functions) still allowing for accidental or deliberate role changes within. One of the main reasons to use procedures is their capability to be non-atomic. However, due to current Postgres' design, this prevents us from using security contexts in procedures.</p> <p>So, code like this will change the role to <code>another_role</code>, regardless of pre-configured role, breaking out of the sandbox of the specified role.</p> <pre><code> create or replace procedure my_handler(outcome out omni_httpd.http_outcome)\nlanguage plpgsql as\n$$\nbegin\n--- ....\nset role another_role;\n--- ...\nend;\n$$ </code></pre> <p>Functions are not subject to this limitation.</p>"},{"location":"omni_httpd/static_file/","title":"Static File Server","text":"<p><code>omni_httpd</code> dispatching can include a static file server to handle serving  static assets through <code>omni_vfs</code> virtual filesystem later.</p>"},{"location":"omni_httpd/static_file/#requirements","title":"Requirements","text":"<p>The following extensions are required for this functionality:</p> <ul> <li>omni_vfs</li> <li>omni_mimetypes</li> </ul>"},{"location":"omni_httpd/static_file/#setup","title":"Setup","text":"<p>To get the handler provisioned, one need to call <code>instantiate_static_file_handler</code>:</p> <pre><code>select omni_httpd.instantiate_static_file_handler(schema =&gt; 'public');\n</code></pre> <p>This will create the <code>static_file_handler</code> function in the <code>public</code> schema. Its name can be configured by passing <code>name</code> argument with a desired function name.</p>"},{"location":"omni_httpd/static_file/#configuring","title":"Configuring","text":"<p>First, we'll define a static file router relation for the type of the virtual file system we need (in this example, <code>omni_vfs.local_fs</code>):</p> <pre><code>create table static_file_router\n(\nlike omni_httpd.urlpattern_router,\nfs omni_vfs.local_fs\n);\n</code></pre> <p>Now, we can implement the handler for the router:</p> <pre><code>create function fs_handler(req omni_httpd.http_request, router static_file_router)\nreturns omni_httpd.http_outcome\nreturn static_file_handler(req, router.fs);\n</code></pre> <p>This function will take the request path as is, and it will try to find it in the given file system. </p> <p>Directory listing</p> <p><code>static_file_handler</code> also takes an optional boolean <code>listing</code> argument that will make it generate a list of files in a directory if there's no <code>index.html</code> present. It's disabled by default.</p> <p>Finally, we need to provision a routing entry in the router:</p> <p><pre><code>insert\ninto\nstatic_file_router (match, handler, fs)\nvalues\n(omni_httpd.urlpattern('/assets/*'), 'docs_handler'::regproc,\nomni_vfs.local_fs('/path/to/files'));\n</code></pre> Now, all requests to <code>/assets/*</code> will be served the local filesystem pointing to <code>/path/to/files</code>.</p>"},{"location":"omni_id/identity_type/","title":"Identity Type","text":"<p>How often do you run into a case like this?</p> <pre><code> ```sql\ncreate table users\n(\nid serial primary key\n);\ncreate table orders\n(\nid      serial primary key,\nuser_id int not null references users (id)\n);\nselect *\nfrom users\ninner join orders on orders.id = users.id\n--- Why is this not getting the right results? \\o/\n--- ooooh... it should have been `on orders.user_id = users.id`\n</code></pre> <p>In a simple case, it is usually easy to spot the problem. However, real operational queries tend to get a lot more complicated, with a lot of visual noise in them, and spotting subtle errors is hard.</p> <p><code>omni_id</code> solves exacly this problem by introduce custom types that are comparable to themselves but not other types (at least, not without explicit casting).</p> <pre><code>create table users\n(\nid user_id primary key default user_id_nextval()\n);\ncreate table orders\n(\nid      order_id primary key default order_id_nextval(),\nuser_id user_id not null references users (id)\n);\nselect *\nfrom users\ninner join orders on orders.id = users.id\n-- ERROR: operator does not exist: order_id = user_id\n-- ^^^ this just saved us precious time\n</code></pre>"},{"location":"omni_id/identity_type/#usage","title":"Usage","text":"<p>This extension defines a single function <code>identity_type</code>. In its most primitive form, it will just take a name of a new type and will create a <code>bigint</code>-backed type:</p> <pre><code>create extension omni_id;\n-- CREATE EXTENSION\nselect identity_type('user_id');\n-- identity_type \n-- ---------------\n-- user_id\n</code></pre> <p>You can also select a different base integer type (<code>smallint</code>, <code>int</code>) and a few sequence-related options.</p> Parameter Type Description type regtype Base type. <code>bigint</code> by default. <code>int</code> and <code>smallint</code> permitted, as well as their aliases, and <code>uuid</code> sequence text Sequence name. Equal to <code>&lt;type&gt;_seq</code> by default create_sequence boolean Should sequence be created? True by default. Meaningless for <code>uuid</code> base type. increment bigint Sequence increment. Default set to 1 minvalue bigint Minimum value a sequence can generate. Default set to 1 maxvalue bigint Maximum value a sequence can generate. Default set to the maximum of the underlying type cache bigint Enables sequence numbers to be preallocated and stored in memory for faster access cycle boolean Wrap around when the maxvalue or minvalue has been reached by an ascending or descending sequence respectively constructor text Name of the constructor function create_constructor boolean Should constructor be created? True by default operator_schema boolean Schema to create operators in. <code>public</code> by default nextval regproc If not null, use this function (no arguments, returning base type) to make <code>&lt;type&gt;_nextval()</code> <p><code>identity_type</code> will also create helper functions for the sequence: <code>&lt;type&gt;_nextval()</code>, <code>&lt;type&gt;_currval()</code> and <code>&lt;type&gt;_setval(&lt;type&gt;, bool)</code></p>"},{"location":"omni_id/identity_type/#constructor","title":"Constructor","text":"<p>When it is necessary to construct an identity type value, one can use a constructor function like this:</p> <pre><code>select user_id(1);\n</code></pre>"},{"location":"omni_json/table_mapping/","title":"Table Mapping","text":"<p>This extension allows you to map tables to JSON, extending <code>to_jsonb</code>  function by overloading it for a particular table type.</p> <p>By default, one can use <code>to_jsonb</code> on any existing table type and get a JSON  out:</p> <pre><code> create table example (\nid           integer primary key generated always as identity,\nfirst_name   text,\nlast_name    text,\ndob          date\n);\nselect to_jsonb(example.*) from example;\n</code></pre> <p>results in</p> <pre><code>{\n\"id\": 1, \"dob\": \"1971-12-12\", \"last_name\": \"Doe\", \"first_name\": \"John\"\n}\n</code></pre> <p>However, the moment you need to perform some transformation, it becomes less  useful. This is where this extension helps. One can define a mapping for a  table using <code>omni_json.define_table_mapping(type, annotation)</code> where  annotation is a JSON document:</p> <pre><code>select omni_json.define_table_mapping(example, '{}')\n</code></pre>"},{"location":"omni_json/table_mapping/#configuring-columns","title":"Configuring columns","text":"<p>By specifying <code>columns</code> object with a for a given column, one can configure  column properties.</p> <pre><code>select omni_json.define_table_mapping(example, $$\n{\n  \"columns\": { \"my_column\": { ... } }\n}\n$$);\n</code></pre>"},{"location":"omni_json/table_mapping/#renaming-keys","title":"Renaming keys","text":"<p><code>path</code> annotation for a column can be used to rename it</p> <pre><code>{\n\"columns\": {\n\"dob\": {\n\"path\": \"date_of_birth\"\n}\n}\n}\n</code></pre> <p>Now, if you re-run <code>to_jsonb</code> you will get this:</p> <pre><code>{\n\"id\": 1, \"date_of_birth\": \"1971-12-12\", \"last_name\": \"Doe\", \"first_name\": \"John\"\n}\n</code></pre>"},{"location":"omni_json/table_mapping/#moving-keys","title":"Moving keys","text":"<p><code>path</code> annotation can also be used to move columns to a given path when given  an array of keys:</p> <pre><code>{\n\"columns\": {\n\"first_name\": {\n\"path\": [\"name\", \"first\"]\n},\n\"last_name\": {\n\"path\": [\"name\", \"last\"]\n}\n}\n}\n</code></pre> <p>Now, if you re-run <code>to_jsonb</code> you will get this:</p> <pre><code>{\n\"id\": 1, \"date_of_birth\": \"1971-12-12\",\n\"name\": {\n\"last\": \"Doe\",\n\"first\": \"John\"\n}\n}\n</code></pre> <p>In fact, it can also move columns to arrays. </p> <pre><code>{\n\"columns\": {\n\"first_name\": {\n\"path\": [\"name\", 0]\n},\n\"last_name\": {\n\"path\": [\"name\", 1]\n}\n}\n}\n</code></pre> <p>Now, if you re-run <code>to_jsonb</code> you will get this:</p> <pre><code>{\n\"id\": 1, \"date_of_birth\": \"1971-12-12\",\n\"name\": [\n\"John\",\n\"Doe\"\n]\n}\n</code></pre>"},{"location":"omni_json/table_mapping/#column-exclusion","title":"Column exclusion","text":"<p>Imagine we don't want to show date of birth in the above example. We can do  so by simply excluding it:</p> <pre><code>{\n\"columns\": {\n\"dob\": {\n\"exclude\": true\n}\n}\n}\n</code></pre> <p>Now, if you re-run <code>to_jsonb</code> you will get this:</p> <pre><code>{\n\"id\": 1,\n\"last_name\": \"Doe\",\n\"first_name\": \"John\"\n}\n</code></pre>"},{"location":"omni_json/table_mapping/#column-transformation","title":"Column transformation","text":"<p>In certain cases (such as dealing with sensitive information or non-conforming data), it would be beneficial to be able to transform data when it is converted either from JSON or to JSON.</p> <p>This is where <code>transform</code> option comes into the picture.</p> <pre><code>{\n\"columns\": {\n\"password\": {\n\"transform\": {\n\"input\": {\n\"type\": \"text\",\n\"function\": \"encrypt_password\"\n}\n}\n}\n}\n}\n</code></pre> <p>The above will apply <code>encrypt_password(text)</code> to convert <code>password</code> in the JSON object to the value in a record. Other <code>type</code>s are: <code>json</code> and <code>jsonb</code> and they will call <code>encrypt_password(json)</code> and <code>encrypt_password(jsonb)</code> respectively.</p> <p>Similarly, there's support for serializing back to JSON:</p> <pre><code>{\n\"columns\": {\n\"password\": {\n\"transform\": {\n\"output\": {\n\"type\": \"text\",\n\"function\": \"mask_password\"\n}\n}\n}\n}\n}\n</code></pre> <p>This will make <code>to_jsonb</code> call <code>mask_password(password)</code> and expect it to return <code>text</code>. Similarly, other supported types for the return value are <code>json</code> and <code>jsonb</code>.</p>"},{"location":"omni_json/table_mapping/#operational-guide","title":"Operational Guide","text":""},{"location":"omni_json/table_mapping/#retrieving-json","title":"Retrieving JSON","text":"<p>You can use <code>to_jsonb(table_name.*)</code> as you would typically do, but the transformation rules described above will apply.</p> <pre><code>select\nto_jsonb(products.*)\nfrom\nproducts\n</code></pre>"},{"location":"omni_json/table_mapping/#updating-from-json","title":"Updating from JSON","text":"<p>You can update explicitly listed fields using the following construct:</p> <pre><code>update people\nset\n-- `dob`, `first_name` and `last_name` are allowed to be updated\n(dob, first_name, last_name) =\n(select\ndob,\nfirst_name,\nlast_name\nfrom\njsonb_populate_record(people.*,\n'{\"dob\": \"1981-12-12\"}'))\nwhere\nid = some_id </code></pre>"},{"location":"omni_json/table_mapping/#inserting-json","title":"Inserting JSON","text":"<p>Similarly to update, JSON can be also inserted</p> <pre><code>insert\ninto\npeople (dob, first_name, last_name)\n(select\ndob,\nfirst_name,\nlast_name\nfrom\njsonb_populate_record(null::people,\n'{\"first_name\": \"Jane\", \"last_name\": \"Doe\", \"dob\": \"1981-12-12\"}'))\n</code></pre>"},{"location":"omni_kube/credentials/","title":"Credentials","text":"<p>omni_kube provides flexible credential loading capabilities that support multiple Kubernetes authentication methods, including kubeconfig files and in-cluster service account credentials.</p>"},{"location":"omni_kube/credentials/#overview","title":"Overview","text":"<p>The credential loading system supports:</p> <ol> <li>Kubeconfig-based authentication - Load credentials from standard Kubernetes configuration files</li> <li>In-cluster authentication - Automatic detection and use of service account credentials when running inside a    Kubernetes pod</li> <li>Multiple authentication methods - Support for certificates, tokens, and file-based credentials</li> </ol>"},{"location":"omni_kube/credentials/#functions","title":"Functions","text":""},{"location":"omni_kube/credentials/#omni_kubeload_kubeconfigconfig-jsonb-context-text-default-null-local-boolean-default-false","title":"<code>omni_kube.load_kubeconfig(config jsonb, context text default null, local boolean default false)</code>","text":"<p>Loads Kubernetes credentials from a parsed kubeconfig JSON object.</p> <p>Parameters:</p> <ul> <li><code>config</code> (jsonb): The parsed kubeconfig as a JSON object</li> <li><code>context</code> (text, optional): The context to use. If null, uses the <code>current-context</code> from the config</li> <li><code>local</code> (boolean, default false): If true, configuration is only visible to the current transaction. If false,   configuration persists for the entire session</li> </ul> <p>Example:</p> <pre><code>-- Load from a JSONB config object\nselect omni_kube.load_kubeconfig('{\"current-context\": \"my-cluster\", ...}'::jsonb);\n-- Use a specific context\nselect omni_kube.load_kubeconfig(config_object, 'production-cluster');\n</code></pre>"},{"location":"omni_kube/credentials/#omni_kubeload_kubeconfigconfig-json-context-text-default-null-local-boolean-default-false","title":"<code>omni_kube.load_kubeconfig(config json, context text default null, local boolean default false)</code>","text":"<p>Loads Kubernetes credentials from a JSON kubeconfig object (automatically converts to jsonb).</p> <p>Parameters:</p> <ul> <li><code>config</code> (json): The kubeconfig as a JSON object</li> <li><code>context</code> (text, optional): The context to use</li> <li><code>local</code> (boolean, default false): Configuration scope (transaction vs session)</li> </ul>"},{"location":"omni_kube/credentials/#omni_kubeload_kubeconfigfilename-text-context-text-default-null-local-boolean-default-false","title":"<code>omni_kube.load_kubeconfig(filename text, context text default null, local boolean default false)</code>","text":"<p>Loads Kubernetes credentials directly from a kubeconfig file.</p> <p>Parameters:</p> <ul> <li><code>filename</code> (text): Path to the kubeconfig file</li> <li><code>context</code> (text, optional): The context to use</li> <li><code>local</code> (boolean, default false): Configuration scope (transaction vs session)</li> </ul> <p>Permissions required</p> <p>Note: This function uses <code>pg_read_file()</code> internally, which requires superuser privileges or the</p> <p><code>pg_read_server_files</code> role. If you don't have these privileges, load the file contents manually and use the JSON/JSONB version instead:</p> <pre><code>-- Alternative for non-superusers (requires external file reading)\n\\set kubeconfig `cat ~/.kube/config`\nselect omni_kube.load_kubeconfig(omni_yaml.to_json(:'kubeconfig'));\n</code></pre> <p>Example:</p> <pre><code>-- Load default kubeconfig (requires superuser or pg_read_server_files role)\nselect omni_kube.load_kubeconfig('/home/user/.kube/config');\n-- Load specific kubeconfig with custom context\nselect omni_kube.load_kubeconfig('/path/to/kubeconfig', 'staging');\n</code></pre>"},{"location":"omni_kube/credentials/#omni_kubepod_credentials","title":"<code>omni_kube.pod_credentials()</code>","text":"<p>Automatically detects and returns service account credentials when running inside a Kubernetes pod.</p> <p>Returns:</p> <ul> <li><code>token</code> (text): The service account token</li> <li><code>cacert</code> (text): The cluster CA certificate</li> </ul> <p>Note: This function uses <code>pg_read_file()</code> and <code>pg_stat_file()</code> internally to access service account files mounted by Kubernetes. It requires superuser privileges or the <code>pg_read_server_files</code> role. This function is typically used when Postgres is running inside a Kubernetes pod with a service account.</p> <p>Example:</p> <pre><code>-- Check for in-cluster credentials (requires superuser or pg_read_server_files role)\nselect *\nfrom omni_kube.pod_credentials();\n</code></pre>"},{"location":"omni_kube/credentials/#supported-authentication-methods","title":"Supported Authentication Methods","text":""},{"location":"omni_kube/credentials/#1-client-certificates-embedded","title":"1. Client Certificates (Embedded)","text":"<p>Certificates and keys embedded directly in the kubeconfig as base64-encoded data:</p> <pre><code>users:\n- name: my-user\nuser:\nclient-certificate-data: LS0tLS1CRUdJTi... # base64 encoded cert\nclient-key-data: LS0tLS1CRUdJTi...         # base64 encoded key\n</code></pre> <p>Configuration Variables Set:</p> <ul> <li><code>omni_kube.clientcert</code> - The client certificate (PEM format)</li> <li><code>omni_kube.client_private_key</code> - The client private key (PEM format)</li> </ul>"},{"location":"omni_kube/credentials/#2-client-certificates-file-references","title":"2. Client Certificates (File References)","text":"<p>Certificates and keys stored in separate files:</p> <pre><code>users:\n- name: my-user\nuser:\nclient-certificate: /path/to/client.crt\nclient-key: /path/to/client.key\n</code></pre> <p>Note: This method requires file system access via <code>pg_read_file()</code>, which needs superuser privileges or the <code>pg_read_server_files</code> role.</p> <p>Configuration Variables Set:</p> <ul> <li><code>omni_kube.clientcert</code> - The client certificate (loaded from file)</li> <li><code>omni_kube.client_private_key</code> - The client private key (loaded from file)</li> </ul>"},{"location":"omni_kube/credentials/#3-bearer-token-embedded","title":"3. Bearer Token (Embedded)","text":"<p>Token embedded directly in the kubeconfig:</p> <pre><code>users:\n- name: my-user\nuser:\ntoken: eyJhbGciOiJSUzI1NiIsImtpZCI6...\n</code></pre> <p>Configuration Variables Set:</p> <ul> <li><code>omni_kube.token</code> - The bearer token</li> </ul>"},{"location":"omni_kube/credentials/#4-bearer-token-file-reference","title":"4. Bearer Token (File Reference)","text":"<p>Token stored in a separate file:</p> <pre><code>users:\n- name: my-user\nuser:\ntokenFile: /var/run/secrets/kubernetes.io/serviceaccount/token\n</code></pre> <p>Note: This method requires file system access via <code>pg_read_file()</code>, which needs superuser privileges or the <code>pg_read_server_files</code> role.</p> <p>Configuration Variables Set:</p> <ul> <li><code>omni_kube.token</code> - The bearer token (loaded from file)</li> </ul>"},{"location":"omni_kube/credentials/#5-in-cluster-service-account","title":"5. In-Cluster Service Account","text":"<p>When running inside a Kubernetes pod, service account credentials are automatically available:</p> <ul> <li>Token: <code>/var/run/secrets/kubernetes.io/serviceaccount/token</code></li> <li>CA Certificate: <code>/var/run/secrets/kubernetes.io/serviceaccount/ca.crt</code></li> <li>Namespace: <code>/var/run/secrets/kubernetes.io/serviceaccount/namespace</code></li> </ul> <p>Note: Accessing these files requires superuser privileges or the <code>pg_read_server_files</code> role. This is typically configured when deploying Postgres inside Kubernetes.</p>"},{"location":"omni_kube/credentials/#privilege-requirements","title":"Privilege Requirements","text":"<p>Several functions require elevated privileges to access the file system:</p>"},{"location":"omni_kube/credentials/#required-rolesprivileges","title":"Required Roles/Privileges","text":"<ul> <li>Superuser: Full access to all file operations</li> <li>pg_read_server_files: Granted role that allows reading server files</li> </ul>"},{"location":"omni_kube/credentials/#granting-privileges","title":"Granting Privileges","text":"<pre><code>-- Grant pg_read_server_files role to a user\ngrant pg_read_server_files to myuser;\n-- Or create a superuser (use with caution)\nalter user myuser superuser;\n</code></pre>"},{"location":"omni_kube/credentials/#alternative-approaches-for-non-privileged-users","title":"Alternative Approaches for Non-Privileged Users","text":"<p>If you cannot grant file reading privileges, use these alternatives:</p>"},{"location":"omni_kube/credentials/#load-kubeconfig-via-psql","title":"Load Kubeconfig via psql","text":"<pre><code>-- Using psql variable substitution\n\\set kubeconfig `cat ~/.kube/config`\nselect omni_kube.load_kubeconfig(omni_yaml.to_json(:'kubeconfig'));\n</code></pre>"},{"location":"omni_kube/credentials/#manual-token-loading","title":"Manual Token Loading","text":"<pre><code>-- Load token manually and set configuration\n\\set token `cat /var/run/secrets/kubernetes.io/serviceaccount/token`\n\\set cacert `cat /var/run/secrets/kubernetes.io/serviceaccount/ca.crt`\n-- Set configuration manually\nselect set_config('omni_kube.token', :'token', false);\nselect set_config('omni_kube.cacert', :'cacert', false);\nselect set_config('omni_kube.server', 'https://kubernetes.default.svc', false);\n</code></pre>"},{"location":"omni_kube/credentials/#cluster-configuration","title":"Cluster Configuration","text":"<p>All authentication methods also configure cluster connection details:</p> <p>Configuration Variables Set:</p> <ul> <li><code>omni_kube.server</code> - The Kubernetes API server URL</li> <li><code>omni_kube.cacert</code> - The cluster CA certificate (PEM format)</li> </ul>"},{"location":"omni_kube/credentials/#ca-certificate-handling","title":"CA Certificate Handling","text":"<p>The system supports multiple ways to specify the cluster CA certificate:</p> <pre><code>clusters:\n- name: my-cluster\ncluster:\nserver: https://kubernetes.example.com:6443\n# Option 1: Embedded base64-encoded certificate\ncertificate-authority-data: LS0tLS1CRUdJTi...\n# Option 2: File reference (requires file system access)\ncertificate-authority: /path/to/ca.crt\n</code></pre>"},{"location":"omni_kube/credentials/#error-handling","title":"Error Handling","text":"<p>The credential loading functions provide comprehensive error handling:</p>"},{"location":"omni_kube/credentials/#missing-context","title":"Missing Context","text":"<pre><code>-- Will raise an exception if context doesn't exist\nselect omni_kube.load_kubeconfig('/home/user/.kube/config', 'nonexistent-context');\n-- ERROR: Context 'nonexistent-context' not found in kubeconfig\n</code></pre>"},{"location":"omni_kube/credentials/#permission-errors","title":"Permission Errors","text":"<pre><code>-- Will raise an exception if lacking file reading privileges\nselect omni_kube.load_kubeconfig('/home/user/.kube/config');\n-- ERROR: permission denied to read file\n</code></pre>"},{"location":"omni_kube/credentials/#unsupported-authentication-methods","title":"Unsupported Authentication Methods","text":"<pre><code>-- For exec plugins or auth providers\nselect omni_kube.load_kubeconfig('/home/user/.kube/config', 'exec-context');\n-- NOTICE: Exec plugin authentication detected but not yet supported\n-- ERROR: Exec plugin authentication requires external command execution\n</code></pre>"},{"location":"omni_kube/credentials/#missing-files","title":"Missing Files","text":"<pre><code>-- Will raise an exception if referenced files don't exist\nselect omni_kube.load_kubeconfig('/nonexistent/kubeconfig');\n-- ERROR: could not open file \"/nonexistent/kubeconfig\"\n</code></pre>"},{"location":"omni_kube/credentials/#configuration-variables","title":"Configuration Variables","text":"<p>After successful credential loading, the following Postgres configuration variables are available:</p> Variable Description Example <code>omni_kube.server</code> Kubernetes API server URL <code>https://kubernetes.example.com:6443</code> <code>omni_kube.cacert</code> Cluster CA certificate (PEM) <code>-----BEGIN CERTIFICATE-----\\n...</code> <code>omni_kube.clientcert</code> Client certificate (PEM) <code>-----BEGIN CERTIFICATE-----\\n...</code> <code>omni_kube.client_private_key</code> Client private key (PEM) <code>-----BEGIN PRIVATE KEY-----\\n...</code> <code>omni_kube.token</code> Bearer token <code>eyJhbGciOiJSUzI1NiIs...</code> <p>These variables are automatically used by other omni_kube functions for API authentication.</p>"},{"location":"omni_kube/credentials/#security-considerations","title":"Security Considerations","text":"<ul> <li>File Permissions: Ensure kubeconfig files have appropriate permissions (typically 600)</li> <li>Postgres Privileges: File reading functions require elevated privileges. Grant only <code>pg_read_server_files</code> when   possible instead of superuser</li> <li>Service Account Tokens: In-cluster tokens are automatically rotated by Kubernetes</li> <li>Configuration Scope: Credentials are loaded at the session level and persist for the duration of the database   connection</li> <li>Sensitive Data: Configuration variables containing sensitive data should be handled according to your security   policies</li> <li>Least Privilege: Consider using manual credential loading via psql for environments where file system access   should be restricted</li> </ul>"},{"location":"omni_kube/internals_api/","title":"Internals: Kubernetes API","text":""},{"location":"omni_kube/internals_api/#omni_kubeapi","title":"<code>omni_kube.api()</code>","text":"<p>This is the central function to invoke Kubernetes API calls. It supports both single and batch requests.</p>"},{"location":"omni_kube/internals_api/#single-request","title":"Single Request","text":"<pre><code>omni_kube.api(path, [server], [cacert], [clientcert], [token], [method], [body], [stream])\n</code></pre> Parameter Type Description path text Request path (must start with <code>/</code>) server text Kubernetes server, defaults to <code>https://kubernetes.default.svc</code> cacert text CA certificate clientcert omni_httpc.client_certificate Client certificate token text Bearer token method omni_http.http_method HTTP method, defaults to <code>GET</code> body jsonb Request body stream boolean Stream mode for multiple JSON objects, defaults to <code>false</code> <p>Returns: <code>jsonb</code> - The response body</p>"},{"location":"omni_kube/internals_api/#batch-request","title":"Batch Request","text":"<pre><code>omni_kube.api(paths, [server], [cacert], [clientcert], [token], [methods], [bodies], [stream])\n</code></pre> Parameter Type Description paths text[] Array of request paths server text Kubernetes server, defaults to <code>https://kubernetes.default.svc</code> cacert text CA certificate clientcert omni_httpc.client_certificate Client certificate token text Bearer token methods omni_http.http_method[] Array of HTTP methods (defaults to <code>GET</code> for all requests) bodies jsonb[] Array of request bodies stream boolean Stream mode for multiple JSON objects, defaults to <code>false</code> <p>Returns: <code>TABLE(response jsonb, status int2)</code> - Response body and HTTP status for each request</p>"},{"location":"omni_kube/internals_api/#caching-error-handling","title":"Caching &amp; Error Handling","text":"<ul> <li>Single requests are cached per statement using request digest</li> <li>Single requests with status codes \u2265 400 raise exceptions with Kubernetes error details</li> <li>Stream mode converts newline-delimited JSON responses into JSONB arrays</li> </ul>"},{"location":"omni_kube/internals_api/#omni_kubewatch","title":"<code>omni_kube.watch()</code>","text":"<p>This function enables watching Kubernetes resources for changes using the Kubernetes watch API.</p>"},{"location":"omni_kube/internals_api/#single-resource-watch","title":"Single Resource Watch","text":"<pre><code>omni_kube.watch(group_version, resource, [resource_version], [timeout])\n</code></pre> Parameter Type Description group_version text API group version (e.g., <code>v1</code>, <code>apps/v1</code>) resource text Resource type (e.g., <code>pods</code>, <code>deployments</code>) resource_version text Specific resource version to watch from (optional) timeout int Watch timeout in seconds, defaults to <code>1</code> <p>Returns: <code>TABLE(events jsonb[], status int2)</code> - Events and HTTP status for each watch stream.</p>"},{"location":"omni_kube/internals_api/#batch-resource-watch","title":"Batch Resource Watch","text":"<pre><code>omni_kube.watch(group_versions, resources, [resource_versions], [timeout])\n</code></pre> Parameter Type Description group_versions text[] Array of API group versions resources text[] Array of resource types resource_versions text[] Array of resource versions to watch from (optional) timeout int Watch timeout in seconds, defaults to <code>1</code> <p>Returns: <code>TABLE(events jsonb[], status int2)</code> - Events and HTTP status for each watch stream.</p>"},{"location":"omni_kube/internals_api/#behavior-notes","title":"Behavior Notes","text":"<ul> <li>Resource Version Handling: When <code>resource_version</code> is not specified, the function automatically fetches the   current resource version and starts watching from that point</li> <li>Timeout Behavior: The function will wait for the specified timeout duration before returning. Setting a long   timeout will cause the function to block for that entire duration</li> </ul>"},{"location":"omni_kube/internals_api/#example-usage","title":"Example Usage","text":"<pre><code>-- Watch pods in the default namespace with 30-second timeout\nselect omni_kube.watch('v1', 'pods', timeout =&gt; 30);\n-- Watch multiple resources simultaneously\nselect *\nfrom omni_kube.watch(\narray ['v1', 'apps/v1'],\narray ['pods', 'deployments'],\ntimeout =&gt; 60\n);\n</code></pre>"},{"location":"omni_kube/internals_api/#authentication-certificates","title":"Authentication &amp; Certificates","text":"<p>token and cacert are automatically inferred from default pod's paths (<code>/var/run/secrets/kubernetes.io/serviceaccount/token</code> and <code>/var/run/secrets/kubernetes.io/serviceaccount/ca.crt</code> respectively) to enable seamless use of API from within pods (through <code>omni_kube.pod_credentials()</code> function). They can be overridden by corresponding function parameters or <code>omni_kube.token</code> and <code>omni_kube.cacert</code> settings. In addition, <code>omni_kube.clientcert</code> and <code>omni_kube.client_private_key</code> settings can be used to override the <code>clientcert</code> parameter.</p>"},{"location":"omni_kube/paths/","title":"Composable Paths","text":"<p>omni_kube provides a set of path helper functions to construct valid Kubernetes API URLs. These functions handle the complexity of Kubernetes API path conventions and query parameter encoding. They can be then used in <code>api()</code> calls.</p>"},{"location":"omni_kube/paths/#core-path-functions","title":"Core Path Functions","text":""},{"location":"omni_kube/paths/#group_pathgroup_version-text","title":"<code>group_path(group_version text)</code>","text":"<p>Constructs the base API path for a given API group version.</p> <p>Parameters:</p> <ul> <li><code>group_version</code> (text): The Kubernetes API group version</li> </ul> <p>Returns: Base API path as text</p> <p>Examples:</p> <pre><code>select group_path('v1');\n-- Returns: /api/v1\nselect group_path('apps/v1');\n-- Returns: /apis/apps/v1\nselect group_path('networking.k8s.io/v1');\n-- Returns: /apis/networking.k8s.io/v1\n</code></pre>"},{"location":"omni_kube/paths/#resources_pathgroup_version-text-resource-text-namespace-text-default-null","title":"<code>resources_path(group_version text, resource text, namespace text default null)</code>","text":"<p>Constructs the full resource path, including optional namespace.</p> <p>Parameters:</p> <ul> <li><code>group_version</code> (text): The Kubernetes API group version</li> <li><code>resource</code> (text): The resource type (plural form)</li> <li><code>namespace</code> (text, optional): The namespace for namespaced resources</li> </ul> <p>Returns: Full resource path as text</p> <p>Examples:</p> <pre><code>-- Cluster-scoped resources\nselect resources_path('v1', 'nodes');\n-- Returns: /api/v1/nodes\n-- Namespaced resources\nselect resources_path('v1', 'pods', 'default');\n-- Returns: /api/v1/namespaces/default/pods\nselect resources_path('apps/v1', 'deployments', 'kube-system');\n-- Returns: /apis/apps/v1/namespaces/kube-system/deployments\n</code></pre>"},{"location":"omni_kube/paths/#watch_pathpath-text-resource_version-text-default-null","title":"<code>watch_path(path text, resource_version text default null)</code>","text":"<p>Converts a regular API path to a watch path for streaming resource changes.</p> <p>Parameters:</p> <ul> <li><code>path</code> (text): The base API path</li> <li><code>resource_version</code> (text, optional): Starting resource version for the watch</li> </ul> <p>Returns: Watch-enabled path with query parameters</p> <p>Examples:</p> <pre><code>-- Basic watch path\nselect watch_path('/api/v1/pods');\n-- Returns: /api/v1/pods?watch=1\n-- Watch from specific resource version\nselect watch_path('/api/v1/pods', '12345');\n-- Returns: /api/v1/pods?watch=1&amp;resourceVersion=12345\n-- Watch path with existing query parameters\nselect watch_path('/api/v1/pods?limit=100', '12345');\n-- Returns: /api/v1/pods?limit=100&amp;watch=1&amp;resourceVersion=12345\n</code></pre>"},{"location":"omni_kube/paths/#_1","title":"Composable Paths","text":"<p><code>path_with(path text, label_selector text default null, field_selector text default null, timeout_seconds int default null)</code></p> <p>Adds common query parameters to API paths with proper URL encoding.</p> <p>Parameters:</p> <ul> <li><code>path</code> (text): The base API path</li> <li><code>label_selector</code> (text, optional): Label selector for filtering</li> <li><code>field_selector</code> (text, optional): Field selector for filtering</li> <li><code>timeout_seconds</code> (int, optional): Request timeout in seconds</li> </ul> <p>Returns: Path with encoded query parameters</p> <p>Examples:</p> <pre><code>-- Add label selector\nselect path_with('/api/v1/pods', 'app=nginx');\n-- Returns: /api/v1/pods?labelSelector=app%3Dnginx\n-- Add multiple selectors\nselect path_with('/api/v1/pods', 'app=nginx', 'status.phase=Running');\n-- Returns: /api/v1/pods?labelSelector=app%3Dnginx&amp;fieldSelector=status.phase%3DRunning\n-- Add timeout\nselect path_with('/api/v1/pods', timeout_seconds =&gt; 30);\n-- Returns: /api/v1/pods?timeoutSeconds=30\n-- Complex selector with encoding\nselect path_with('/api/v1/pods', 'environment in (prod,staging)', 'metadata.name!=test-pod');\n-- Returns: /api/v1/pods?labelSelector=environment%20in%20%28prod%2Cstaging%29&amp;fieldSelector=metadata.name%21%3Dtest-pod\n</code></pre>"},{"location":"omni_kube/paths/#resource-table-path-functions","title":"Resource Table Path Functions","text":"<p>For each resource table created by omni_kube, a dedicated path function is automatically generated with the naming pattern <code>{table_name}_resource_path()</code>.</p>"},{"location":"omni_kube/paths/#usage-examples","title":"Usage Examples","text":"<pre><code>-- Get the resource path for pods table\nselect pods_resource_path();\n-- Returns: /api/v1/pods\n-- Use in API calls\nselect omni_kube.get(pods_resource_path());\n</code></pre>"},{"location":"omni_kube/paths/#url-encoding","title":"URL Encoding","text":"<p>The path helper functions automatically handle URL encoding through <code>omni_web.url_encode()</code>:</p> <ul> <li>Spaces \u2192 <code>%20</code></li> <li>Equals (<code>=</code>) \u2192 <code>%3D</code></li> <li>Commas (<code>,</code>) \u2192 <code>%2C</code></li> <li>Parentheses \u2192 <code>%28</code>, <code>%29</code></li> <li>Exclamation marks (<code>!</code>) \u2192 <code>%21</code></li> </ul> <p>This ensures that complex label and field selectors work correctly with the Kubernetes API.</p>"},{"location":"omni_kube/paths/#best-practices","title":"Best Practices","text":"<ol> <li>Use resource table path functions when available for consistency</li> <li>Combine functions to build complex paths step by step</li> <li>Let the functions handle encoding - don't pre-encode parameters</li> <li>Test complex selectors with simple API calls before using in production</li> <li>Cache frequently used paths in variables or functions for performance</li> </ol> <p>These path helpers abstract away the complexity of Kubernetes API URL construction, making it easier to work with various resource types and query patterns.</p>"},{"location":"omni_kube/resources/","title":"Resource Management","text":"<p>omni_kube provides a comprehensive Postgres-based interface for managing Kubernetes resources through SQL views and functions. This system allows you to interact with Kubernetes API resources using standard SQL operations.</p>"},{"location":"omni_kube/resources/#overview","title":"Overview","text":"<p>The resource management system consists of several key components:</p> <ol> <li>API Group Discovery: Views that expose Kubernetes API groups and versions</li> <li>Resource Introspection: Functions to discover available resources within API groups</li> <li>Dynamic Resource Views: Generated views that provide CRUD operations for specific Kubernetes resources</li> </ol>"},{"location":"omni_kube/resources/#api-group-views","title":"API Group Views","text":""},{"location":"omni_kube/resources/#omni_kubeapi_group","title":"<code>omni_kube.api_group</code>","text":"<p>Lists all available Kubernetes API groups with their preferred versions.</p> <p>Columns:</p> <ul> <li><code>name</code> (text): API group name ('core' for core Kubernetes resources)</li> <li><code>preferred_version</code> (text): The preferred version for this API group</li> </ul> <pre><code>select *\nfrom omni_kube.api_group;\n</code></pre>"},{"location":"omni_kube/resources/#omni_kubeapi_group_version","title":"<code>omni_kube.api_group_version</code>","text":"<p>Shows all available versions for each API group.</p> <p>Columns:</p> <ul> <li><code>name</code> (text): API group name</li> <li><code>version</code> (text): Version identifier (e.g., 'v1', 'v1beta1')</li> <li><code>group_version</code> (text): Full group/version identifier</li> </ul> <pre><code>select *\nfrom omni_kube.api_group_version\nwhere name = 'apps';\n</code></pre>"},{"location":"omni_kube/resources/#omni_kubeapi_group_openapi_v3_url","title":"<code>omni_kube.api_group_openapi_v3_url</code>","text":"<p>Maps API groups to their OpenAPI specification URLs.</p> <p>Columns:</p> <ul> <li><code>name</code> (text): API group name</li> <li><code>group_version</code> (text): Group/version identifier</li> <li><code>url</code> (text): Server-relative URL for the API specification</li> </ul>"},{"location":"omni_kube/resources/#resource-discovery-functions","title":"Resource Discovery Functions","text":""},{"location":"omni_kube/resources/#omni_kubegroup_resourcesgroup_version-text","title":"<code>omni_kube.group_resources(group_version text)</code>","text":"<p>Returns detailed information about all resources available in a specific API group version.</p> <p>Parameters:</p> <ul> <li><code>group_version</code>: The group/version identifier (e.g., 'v1', 'apps/v1')</li> </ul> <p>Returns:</p> <ul> <li><code>name</code> (text): Resource name (e.g., 'pods', 'deployments')</li> <li><code>singular_name</code> (text): Singular form of the resource name</li> <li><code>namespaced</code> (boolean): Whether the resource is namespace-scoped</li> <li><code>kind</code> (text): Kubernetes kind name (e.g., 'Pod', 'Deployment')</li> <li><code>verbs</code> (text[]): Supported operations (e.g., ['get', 'list', 'create', 'update', 'delete'])</li> <li><code>storage_version_hash</code> (text): Internal version hash</li> </ul> <p>Example:</p> <pre><code>select name, kind, namespaced, verbs\nfrom omni_kube.group_resources('apps/v1')\nwhere name = 'deployments';\n</code></pre>"},{"location":"omni_kube/resources/#omni_kuberesourcesgroup_version-text-resource-text-label_selector-text-field_selector-text","title":"<code>omni_kube.resources(group_version text, resource text[, label_selector text][, field_selector text])</code>","text":"<p>Retrieves the actual resource instances from the Kubernetes API.</p> <p>Parameters:</p> <ul> <li><code>group_version</code>: The group/version identifier</li> <li><code>resource</code>: The resource type name</li> <li><code>label_selector</code>: Optional label selector (e.g., 'app=web-app')</li> <li><code>field_selector</code>: Optional field selector (e.g., 'metadata.name=web-app')</li> </ul> <p>Returns:</p> <ul> <li><code>jsonb</code>: Complete resource definition as returned by the Kubernetes API</li> </ul> <p>Example:</p> <pre><code>select resource -&gt; 'metadata' -&gt;&gt; 'name' as name,\nresource -&gt; 'spec' -&gt;&gt; 'replicas' as replicas\nfrom omni_kube.resources('apps/v1', 'deployments') resource;\n</code></pre>"},{"location":"omni_kube/resources/#dynamic-resource-views","title":"Dynamic Resource Views","text":""},{"location":"omni_kube/resources/#_1","title":"Resource Management","text":"<p><code>omni_kube.resource_view(view_name name, group_version text, resource text[, label_selector text][, field_selector text])</code></p> <p>Creates a dynamic view that provides a SQL interface for managing specific Kubernetes resources.</p> <p>Parameters:</p> <ul> <li><code>view_name</code>: Name for the generated view</li> <li><code>group_version</code>: API group/version (e.g., 'v1', 'apps/v1')</li> <li><code>resource</code>: Resource type (e.g., 'pods', 'deployments')</li> <li><code>label_selector</code>: Optional label selector (e.g., 'app=web-app')</li> <li><code>field_selector</code>: Optional field selector (e.g., 'metadata.name=web-app')</li> </ul> <p>Returns:</p> <ul> <li><code>regclass</code>: The created view's object identifier</li> </ul> <p>The generated view includes:</p> <ul> <li><code>uid</code> (text): Kubernetes resource UID</li> <li><code>name</code> (text): Resource name</li> <li><code>namespace</code> (text): Resource namespace (null for cluster-scoped resources)</li> <li><code>resource</code> (jsonb): Complete resource specification</li> </ul>"},{"location":"omni_kube/resources/#generated-view-operations","title":"Generated View Operations","text":""},{"location":"omni_kube/resources/#insert-operations","title":"Insert Operations","text":"<p>Create new resources by inserting into the view:</p> <pre><code>-- create a view for pods\nselect omni_kube.resource_view('my_pods', 'v1', 'pods');\n-- insert a new pod\ninsert into my_pods (resource)\nvalues ('{\n  \"metadata\": {\n    \"name\": \"nginx-pod-omni-kube\"\n  },\n  \"spec\": {\n    \"containers\": [{\n      \"name\": \"test\",\n      \"image\": \"nginx\"\n    }]\n  }\n}');\n</code></pre> <p>Insert Requirements:</p> <ul> <li><code>uid</code> must be null (auto-generated by Kubernetes)</li> <li><code>name</code> can be specified in the view column or within <code>resource.metadata.name</code></li> <li><code>namespace</code> must match <code>resource.metadata.namespace</code> if both are specified</li> <li><code>resource</code> must contain valid Kubernetes resource specification</li> </ul>"},{"location":"omni_kube/resources/#update-operation","title":"Update Operation","text":"<p>Modify existing resources:</p> <pre><code>update my_pods\nset resource = jsonb_set(\nresource,\n'{metadata,annotations}',\ncoalesce(resource -&gt; 'metadata' -&gt; 'annotations', '{}'::jsonb) || '{\"test\": \"passed\"}'::jsonb\n)\nwhere name = 'nginx-pod-omni-kube';\n</code></pre> <p>Update Requirements:</p> <ul> <li>Resource must exist (identified by name and namespace)</li> <li>Name and namespace consistency rules apply as with insert</li> </ul>"},{"location":"omni_kube/resources/#delete-operations","title":"Delete Operations","text":"<p>Remove resources:</p> <pre><code>delete\nfrom my_pods\nwhere name = 'nginx-pod-omni-kube'\nand namespace = 'default';\n</code></pre> <p>Delete Requirements:</p> <ul> <li>Resource is identified by name and namespace from the view columns or resource metadata</li> </ul>"},{"location":"omni_kube/resources/#error-handling","title":"Error Handling","text":"<p>The system includes comprehensive validation:</p> <ul> <li>Name/Namespace Consistency: Ensures view columns match resource metadata</li> <li>Required Fields: Validates that resources have required name field</li> <li>UID Restrictions: Prevents manual UID assignment for new resources</li> <li>Resource Existence: Validates resources exist before update/delete operations</li> </ul> <p>Add this section to your Resource Discovery Functions section, after the <code>omni_kube.resources()</code> function:</p>"},{"location":"omni_kube/resources/#omni_kuberesources_metadatagroup_version-text-resource-text","title":"<code>omni_kube.resources_metadata(group_version text, resource text)</code>","text":"<p>Retrieves only the metadata section from a Kubernetes resource collection, which is useful for getting information like resource versions without fetching the entire resource list.</p> <p>Parameters:</p> <ul> <li><code>group_version</code>: The group/version identifier (e.g., 'v1', 'apps/v1')</li> <li><code>resource</code>: The resource type name</li> </ul> <p>Returns:</p> <ul> <li><code>jsonb</code>: The metadata object from the Kubernetes API response, typically containing fields like <code>resourceVersion</code>.</li> </ul> <p>Example:</p> <pre><code>-- Get the current resource version for pods\nselect omni_kube.resources_metadata('v1', 'pods') -&gt;&gt; 'resourceVersion' as current_version;\n</code></pre>"},{"location":"omni_kube/resources/#resource-tables","title":"Resource Tables","text":"<p>The <code>omni_kube.resource_table()</code> function provides an alternative to dynamic views by creating materialized tables that cache Kubernetes resource data locally. Like <code>resource_view()</code>, it accepts the same parameters for specifying the target API group, version, and resource type. The key advantage of resource tables is performance and a stable view \u2013 they store resource data locally in the database rather than making API calls on each query.</p> <p>Each generated table has a corresponding <code>refresh_&lt;table_name&gt;()</code> function that synchronizes the local data with the current state of the Kubernetes cluster.</p> <p>This refresh mechanism allows you to control when expensive API calls occur, making resource tables ideal for scenarios where you need to perform complex queries, joins, or analytics on Kubernetes data without the latency of repeated API requests. The refresh function can be called manually or scheduled for automated data synchronization.</p> <p>Resource tables are particularly valuable for building Kubernetes operators and controllers, where you need to maintain local state, perform complex reconciliation logic across multiple resource types, or implement sophisticated filtering and aggregation operations that would be inefficient when executed against live API endpoints.</p> <p>The function returns a table of <code>(type text, object jsonb)</code> where type is <code>ADDED</code>, <code>MODIFIED</code> or <code>DELETED</code> and object is the object in question.</p>"},{"location":"omni_kube/resources/#transactional-resource-tables","title":"Transactional Resource Tables","text":"<p>Resource tables can be made transactional by passing <code>transactional =&gt; true</code> to <code>omni_kube.resource_table()</code>. This simulates <code>read committed</code>-style isolation of changes to the cluster. That is, if you refresh a table within a transaction, it'll reflect current state of the cluster. All pending changes in the table are dry-run-verified but pooled until commit time. Subsequent changes to the same resource override the entry in the pool (so, for example, an update followed by another update is superseded; a deletion performed after update, wins, etc.)</p> <p>This enables an approximation of atomic operations \u2013 a best-effort approach.</p> <p>Important caveats</p> <p>Commits may still fail due to conflicts with the actual cluster (newer resource versions in the cluster, resource deleted, etc.)</p> <p>Commit operation can also fail due to HTTP errors and leave transaction's pending changes in an inconsistent state. A compensation mechanism can be devised (reconciling incomplete transaction). Future versions of this extension may provide tooling for this.</p>"},{"location":"omni_kube/resources/#usage-examples","title":"Usage Examples","text":""},{"location":"omni_kube/resources/#working-with-deployments","title":"Working with Deployments","text":"<pre><code>-- create a deployments view\nselect omni_kube.resource_view('deployments', 'apps/v1', 'deployments');\n-- list all deployments\nselect name,\nnamespace,\nresource -&gt; 'spec' -&gt;&gt; 'replicas'   as desired_replicas,\nresource -&gt; 'status' -&gt;&gt; 'replicas' as current_replicas\nfrom deployments;\n-- create a new deployment\ninsert into deployments (resource)\nvalues ('{\n  \"metadata\": {\n    \"name\": \"web-app\",\n    \"labels\": {\n      \"app\": \"web-app\",\n      \"version\": \"1.0\"\n    }\n  },\n  \"spec\": {\n    \"replicas\": 3,\n    \"selector\": {\n      \"matchLabels\": {\n        \"app\": \"web-app\"\n      }\n    },\n    \"template\": {\n      \"metadata\": {\n        \"labels\": {\n          \"app\": \"web-app\",\n          \"version\": \"1.0\"\n        }\n      },\n      \"spec\": {\n        \"containers\": [{\n          \"name\": \"web\",\n          \"image\": \"nginx:1.21\",\n          \"ports\": [{\n            \"containerPort\": 80\n          }],\n          \"resources\": {\n            \"requests\": {\n              \"memory\": \"64Mi\",\n              \"cpu\": \"250m\"\n            },\n            \"limits\": {\n              \"memory\": \"128Mi\", \n              \"cpu\": \"500m\"\n            }\n          }\n        }]\n      }\n    }\n  }\n}');\n-- scale the deployment\nupdate deployments\nset resource = jsonb_set(resource, '{spec,replicas}', '5'::jsonb)\nwhere name = 'web-app';\n</code></pre>"},{"location":"omni_kube/resources/#working-with-configmaps","title":"Working with ConfigMaps","text":"<pre><code>-- create a configmaps view\nselect omni_kube.resource_view('configmaps', 'v1', 'configmaps');\n-- create a configuration\ninsert into configmaps (resource)\nvalues ('{\n  \"metadata\": {\n    \"name\": \"app-config\"\n  },\n  \"data\": {\n    \"database_url\": \"postgres://localhost:5432/mydb\",\n    \"debug\": \"true\"\n  }\n}');\n-- update it\nupdate configmaps\nset resource = jsonb_set(resource, '{data,debug}', '\"false\"'::jsonb)\nwhere name = 'app-config';\n</code></pre> <p>This system provides a powerful SQL interface to Kubernetes resources while maintaining full compatibility with the Kubernetes API and its validation rules.</p>"},{"location":"omni_ledger/account_categories/","title":"Account Categories","text":"<p>Built on top of the core, account categories provide further assurance that the accounts balance from the accounting rules perspective.</p> <p>There are a few tables provided by omni_ledger to facilitate this.</p>"},{"location":"omni_ledger/account_categories/#omni_ledgeraccount_categories","title":"<code>omni_ledger.account_categories</code>","text":"Column Type Description id account_category_id (bigint) Identifier of the category name text Name of the category (such as 'Assets' or 'Expenses') type category_type one of 'asset', 'liability' or 'equity' debit_normal boolean Is this account debit normal 1? (default: false) <p>This table allows one to set up their own chart of accounts. The most important columns are type and debit_normal as they are used in the accounting equation verification that happens on every account that is categorized.</p> <p>This table enforces the following rules:</p> <ul> <li>Category can't be deleted unless there are no accounts categorized with it.</li> </ul>"},{"location":"omni_ledger/account_categories/#omni_ledgeraccount_categorizations","title":"<code>omni_ledger.account_categorizations</code>","text":"Column Type Description account_id account_id Identifier of the category the account belongs to category_id account_category_id Identifier of the category the account belongs to <p>Unless included in this table, core accounts are not subject to accounting equation verification.</p> <p>This table enforces a few rules:</p> <ul> <li>An account can only be categorized only with one category</li> <li>An account can only by categorized once in its lifetime</li> <li>Categorizations can't be deleted</li> </ul> <ol> <li> <p>Accounts where a debit increases the balance, such as assets or expenses.\u00a0\u21a9</p> </li> </ol>"},{"location":"omni_ledger/basics/","title":"Ledger Basics","text":"<p><code>omni_ledger</code> is an extension for building financial or finance-like systems where transfers of value are recorded and balanced. It is designed to be minimalistic yet flexible.</p>"},{"location":"omni_ledger/basics/#ledger","title":"Ledger","text":"<p>A ledger in omni_ledger is a set of accounts that collectively represent a specific financial entity, such as a currency, a unit of value, or an internal accounting system for a company. Each ledger can track the balances and transfers between its accounts independently. For example, a ledger might represent all accounts related to a single currency like USD or EUR, or it could represent the internal funds within a specific department or entity in a company.</p> <p>Ledgers are flexible, allowing you to define and group accounts according to your system's needs, whether for tracking an external currency or managing internal units of value. Each ledger maintains its own balance sheet, where all debits and credits across accounts must balance, ensuring the integrity of the financial data.</p>"},{"location":"omni_ledger/basics/#account","title":"Account","text":"<p>An account in omni_ledger represents a distinct entity within a ledger to which value can be credited or debited. Each account holds a balance , which reflects the total value it controls at any given moment. Accounts are central to the operation of a ledger, as they are the points between which value moves during transfers.</p> Use cases for accounts <p>Accounts are highly flexible and can be used to represent a wide range of financial constructs, such as:</p> <ul> <li>A customer's wallet in a digital payment system</li> <li>A company's bank account</li> <li>An internal fund allocated for a specific project</li> <li>A liability account representing a loan or debt</li> </ul> Enforcement of business rules <p>Even more so, because accounts are very lightweight, omni_ledger users are encouraged to use them to represent scoped activities such as:</p> <ul> <li>Capturing partial bill payments</li> <li>Transactions that go through settlement processes</li> </ul> <p>By doing this, business rules specific to these processes can be directly attached to the accounts, allowing to enforce necessary business constraints right within the ledger. This ensures that the ledger not only tracks value but also upholds the operational rules that govern how transactions are handled.</p> <p>In summary, accounts are fundamental to the operation of the ledger, as they serve as the entities between which value flows. Their balances, ownership, and types define their role in the system, allowing omni_ledger to support diverse financial and operational model</p>"},{"location":"omni_ledger/basics/#transfer","title":"Transfer","text":"<p>A transfer represents the movement of value between two accounts. In omni_ledger, a transfer is an atomic operation, meaning that it always results in balanced debits and credits across accounts. Transfers typically correspond to specific events or transactions, such as payments, refunds, or fund allocations. Each transfer is recorded in the ledger and forms the basic unit of value movement in the system.</p> <p>Why is it not called a transaction?</p> <p>To avoid confusion between financial and database transactions, we refer to the act of debiting and crediting accounts  as transfers in omni_ledger.</p>"},{"location":"omni_ledger/basics/#account-category","title":"Account Category","text":"<p>An account category classifies accounts based on their financial nature within the system. Categories help structure the ledger by grouping accounts under standard financial headings, such as assets, * liabilities, or equity*. These categories ensure that each account adheres to accounting rules for that type. In omni_ledger, once an account is assigned to a category, it remains associated with that category, providing clarity and consistency.</p>"},{"location":"omni_ledger/ledger_core/","title":"Ledger Core","text":"<p>All tables below use UUID-typed identifiers, generated as UUIDv7 by default.</p>"},{"location":"omni_ledger/ledger_core/#ledgers-omni_ledgerledgers","title":"Ledgers (<code>omni_ledger.ledgers</code>)","text":"<p>Since every system attaches its own meaning to ledgers, the table only contains a unique identifier (<code>id</code>) as a column. Additional information or attributes should be attached through referencing tables.</p>"},{"location":"omni_ledger/ledger_core/#accounts-omni_ledgeraccounts","title":"Accounts (<code>omni_ledger.accounts</code>)","text":"Column Type Description id account_id Account's identifier (primary key) ledger_id ledger_id Reference to the ledger the account belongs to debits_allowed_to_exceed_credits boolean Are debits allowed to exceed credits? (default: false) credits_allowed_to_exceed_debits boolean Are credits allowed to exceed debits? (default: false) closed boolean Is the account closed? (default: false) <p>Accounts provide enforcement of basic rules:</p> <ul> <li>If debits are not allowed to exceed credits, it means the account can't be debited for   more than it has been credited for.</li> <li>If credits are not allowed to exceed debits, it means the account can't be credited for   more than it was debited for.</li> <li>The account must enable at least one of the above allowances to be valid.</li> <li>Accounts can not be deleted.</li> <li>Once created, account properties cannot be modified, with the exception of setting closed to true.</li> <li>closed can't be set to true unless it has a zero balance and unless running in   a serializable transaction.</li> <li>No transfers can occur in closed accounts.</li> </ul> <p>These rules provide mechanics for building more sophisticated cases.</p>"},{"location":"omni_ledger/ledger_core/#business-rules-on-accounts","title":"Business rules on accounts","text":"<p>To enforce additional rules on activities happening in the accounts, omni_ledger provides two similar functions:</p> <ul> <li><code>omni_ledger.statement_affected_accounts()</code></li> <li><code>omni_ledger.transaction_affected_accounts()</code></li> </ul> <p>Both return a table of <code>(account_id, ledger_id)</code> for accounts transacted on during the last statement and the current transaction, respectively. These functions can be used in custom triggers to validate affected accounts.</p>"},{"location":"omni_ledger/ledger_core/#transfers-omni_ledgertransfers","title":"Transfers (<code>omni_ledger.transfers</code>)","text":"Column Type Description id transfer_id Transfer's identifier (primary key) debit_account_id account_id Reference to the account that is being debited credit_account_id account_id Reference to the account that is being credited amount amount (bigint 1) Non-negative amount <p>This table enforces the following rules:</p> <ul> <li>Every transfer must be recorded in a serializable transaction</li> <li>Closed accounts can't be debited or credited</li> <li>Amount must be non-negative</li> </ul> Assurance of balanced accounts <p><code>omni_ledger</code> offers an additional check to safeguard against potential imbalances in accounts caused by transfers due to a bug in the implementation.</p> <p>To ensure every transfer maintains account balance integrity, you can enable this the <code>balancing_accounts</code> trigger:</p> <pre><code>alter table omni_ledger.transfers enable trigger balancing_accounts\n</code></pre> <p>Please note that it is not strictly necessary to do so and it may have performance implications. This is more of a higher-assurance assertion check.</p>"},{"location":"omni_ledger/ledger_core/#account-balances-omni_ledgeraccount_balances","title":"Account balances (<code>omni_ledger.account_balances</code>)","text":"Column Type Description account_id account_id Reference to an account debited numeric Total amount debited from this account credited numeric Total amount credited to this account balance numeric Balance of the account <p>This view provides an insight into how much an account has been debited and credited for as well as the balance of those operations.</p> <ol> <li> <p>The choice of the underlying type will be reassessed in the upcoming release to support a wider range of values.\u00a0\u21a9</p> </li> </ol>"},{"location":"omni_ledger/quickstart/","title":"Quickstart","text":"<p>In order to set up a minimally viable ledgering system, one must:</p>"},{"location":"omni_ledger/quickstart/#set-up-a-ledger","title":"Set up a ledger","text":"<pre><code>insert into omni_ledger.ledgers\nvalues (default)\nreturning id -- (1) note the ID\n</code></pre>"},{"location":"omni_ledger/quickstart/#set-up-accounts","title":"Set up accounts","text":"<pre><code>insert into omni_ledger.accounts (ledger_id, debits_allowed_to_exceed_credits, credits_allowed_to_exceed_debits)\nvalues (noted_ledger_id, false, true), ...\nreturning id -- (1) note their IDs\n</code></pre>"},{"location":"omni_ledger/quickstart/#start-transferring","title":"Start transferring","text":"<p>It is important to ensure you are using serializable transactions:</p> <pre><code>begin transaction isolation level serializable;\ninsert into omni_ledger.transfers (debit_account_id, credit_account_id, amount)\nvalues\n...;\ncommit;\n</code></pre> <p>Since serializable transactions can fail due to serialization issues, you're advised to use omni_txn.retry</p>"},{"location":"omni_ledger/quickstart/#set-up-accounting","title":"Set up accounting","text":"<p>Once ready, set up some basic accounts:</p> <pre><code>insert into omni_ledger.account_categories (name, type, debit_normal)\nvalues ('Assets', 'asset', true),\n('Owner''s equity', 'equity', false),\n('Expenses', 'equity', true),\n('Liabilities', 'liability', false);\n</code></pre>"},{"location":"omni_manifest/usage/","title":"Usage","text":"<p>omni_manifest allows to install and upgrade extensions as a set. Instead of doing this with <code>create extension</code> and <code>alter extension</code> manually, especially when it comes to dependencies, this extension will take manifests (similar to lock files in other systems) and provision them.</p> <p>This extension is implemented in PL/pgSQL to simplify its provisioning (for example in environments where only trusted languages are allowed.)</p>"},{"location":"omni_manifest/usage/#types","title":"Types","text":""},{"location":"omni_manifest/usage/#requirement","title":"Requirement","text":"<p>Requirement is a composite type (<code>omni_manifest.requirement</code>) that describes a <code>name</code> &amp; <code>version</code> pair, both of type <code>text</code>.</p> <p>It can be converted to and from the text format of <code>name=version</code> through casting and the functions used in cast. Also, an array (<code>requirement[]</code>) can be converted to and from the text format of `name1=version1,name2=version2'.</p> <p>Both the type and the array can be similarly converted to and from the JSON representation of <code>\"name\": \"version\"</code>.</p>"},{"location":"omni_manifest/usage/#examples","title":"Examples","text":""},{"location":"omni_manifest/usage/#from","title":"From","text":"<pre><code>select ('myext=1.0'::text::omni_manifest.requirement).*\n-- or\nselect ('{\"myext\": \"1.0\"}'::json::omni_manifest.requirement).*\n</code></pre> <pre><code> name  | version \n-------+---------\n myext | 1.0\n(1 row)\n</code></pre> <pre><code>select *\nfrom\nunnest('myext=1.0,myotherext=2.0'::text::omni_manifest.requirement[])\n-- or\nselect *\nfrom\nunnest('{\"myext\": \"1.0\", \"myotherext\": \"2.0\"}'::json::omni_manifest.requirement[])\n</code></pre> <pre><code>    name    | version \n------------+---------\n myext      | 1.0\n myotherext | 2.0\n(2 rows)\n</code></pre>"},{"location":"omni_manifest/usage/#to","title":"To","text":"<pre><code>select row ('myext','1.0')::omni_manifest.requirement::text\n-- alternatively,\nselect row ('myext','1.0')::omni_manifest.requirement::json\n</code></pre> <pre><code>    row    \n-----------\n myext=1.0\n(1 row)\n\n# -- alternatively,\n\n        row        \n-------------------\n {\"myext\" : \"1.0\"}\n(1 row)\n</code></pre> <pre><code>select array [row ('myext','1.0'),row ('myotherext','2.0')]::omni_manifest.requirement[]::text\n-- alternatively,\nselect array [row ('myext','1.0'),row ('myotherext','2.0')]::omni_manifest.requirement[]::json\n</code></pre> <pre><code>          array           \n--------------------------\n myext=1.0,myotherext=2.0\n(1 row)\n\n# -- alternatively,\n\nomni_manifest=# select array[row('myext','1.0'),row('myotherext','2.0')]::omni_manifest.requirement[]::json;\n                   array                   \n-------------------------------------------\n { \"myext\" : \"1.0\", \"myotherext\" : \"2.0\" }\n(1 row)\n</code></pre>"},{"location":"omni_manifest/usage/#artifact","title":"Artifact","text":"<p>Artifact is a composite type (<code>omni_manifest.artifact</code>) that consists of a requirement (<code>self</code>, typed <code>omni_manifest.requirement</code>) followed by its versioned requirements (<code>requirements</code> of <code>omni_manifest.requirement[]</code>).</p> <p>It can be constructed with the <code>omni_manifest.artifact</code> function:</p> <pre><code> select (omni_manifest.artifact('ext=3.0'::text, 'myext=1.0,myotherext=2.0'::text)).*\n</code></pre> <pre><code>   self    |            requirements            \n-----------+------------------------------------\n (ext,3.0) | {\"(myext,1.0)\",\"(myotherext,2.0)\"}\n(1 row)\n</code></pre> <p>Besides that, artifacts can be constructed from and deconstructed to both text and JSON forms.</p> <p>The text form of a single artifact is the text representation of a requirement optionally followed by <code>#</code> (the hash sign) with a text representation of a list of requirements:</p> <pre><code>omni_manifest=1.0\nomni_httpd=1.0#omni_http=1.0\n</code></pre> <p>The text form of multiple artifacts is a semicolon-separated list:</p> <pre><code>omni_manifest=1.0;omni_httpd=1.0#omni_http=1.0\n</code></pre> <p>Tip</p> <p>For convenience, newline is also allowed instead of the semicolon:</p> <pre><code>omni_manifest=1.0\nomni_httpd=1.0#omni_http=1.0\n</code></pre> <p>JSON representation is a JSON list of objects with a <code>target</code> property containing the target requirement, and <code>requirements</code> property containing all the requirements:</p> <pre><code>[\n{\n\"target\": {\n\"omni_manifest\": \"1.0\"\n},\n\"requirements\": {}\n},\n{\n\"target\": {\n\"omni_httpd\": \"1.0\"\n},\n\"requirements\": {\n\"omni_http\": \"1.0\"\n}\n}\n]\n</code></pre>"},{"location":"omni_manifest/usage/#examples_1","title":"Examples","text":""},{"location":"omni_manifest/usage/#from_1","title":"From","text":"<pre><code>select *\nfrom\nunnest('omni_manifest=1.0;omni_httpd=1.0#omni_http=1.0'::text::omni_manifest.artifact[]);\n-- alternatively,\nselect *\nfrom\nunnest('[{\"target\" : {\"omni_manifest\" : \"1.0\"}, \"requirements\" : {}}, {\"target\" : {\"omni_httpd\" : \"1.0\"}, \"requirements\" : { \"omni_http\" : \"1.0\" }}]'::json::omni_manifest.artifact[]);\n</code></pre> <pre><code>        self         |    requirements     \n---------------------+---------------------\n (omni_manifest,1.0) | \n (omni_httpd,1.0)    | {\"(omni_http,1.0)\"}\n(2 rows)\n</code></pre>"},{"location":"omni_manifest/usage/#to_1","title":"To","text":"<pre><code>select\n'[{\"target\" : {\"omni_manifest\" : \"1.0\"}, \"requirements\" : {}}, {\"target\" : {\"omni_httpd\" : \"1.0\"}, \"requirements\" : { \"omni_http\" : \"1.0\" }}]'::json::omni_manifest.artifact[]::text;\n</code></pre> <pre><code>omni_manifest=1.0;omni_httpd=1.0#omni_http=1.0\n</code></pre>"},{"location":"omni_manifest/usage/#install-plan","title":"Install Plan","text":"<p>From an array of artifacts, <code>omni_manifest.install_plan</code> can be used to show the order in which all extensions will be installed to satisfy the requirements.</p> <pre><code>select *\nfrom\nunnest(omni_manifest.install_plan(\narray [omni_manifest.artifact('ext=3.0'::text,\n'myext=1.0,myotherext=2.0'::text),\nomni_manifest.artifact('ext2=3.0'::text, 'myext=1.0'::text) ])) with ordinality t(name, version, position)\n</code></pre> <pre><code>    name    | version | position \n------------+---------+----------\n myext      | 1.0     |        1\n myotherext | 2.0     |        2\n ext        | 3.0     |        3\n ext2       | 3.0     |        4\n(4 rows)\n</code></pre> <p>Tip</p> <p>This step is not necessary for installation. It is primarily used to preview the steps that the install step will take.</p>"},{"location":"omni_manifest/usage/#install","title":"Install","text":"<p>Similar to <code>install_plan</code>, <code>omni_manifest.install</code> takes an array of artifacts and attempts to install them. It returns a set of <code>omni_manifest.install_report</code> composite type values. Each row contains a requirement (<code>requirement</code>) and status (<code>status</code>, typed <code>requirement_status</code>, an enum of <code>installed</code>, <code>missing</code>, <code>updated</code> or <code>kept</code>.</p> <p>For each effective requirement in the install plan, it'll attempt to install a given version. If one is not available, it'll report it as <code>missing</code>, otherwise, if a different version is installed it'll try to update and report it <code>updated</code> if successful. Otherwise, it'll try to install it and return a value of <code>installed</code>, unless such version is already installed, at which point it'll return <code>kept</code>.</p> <p>Install transactionally</p> <p>It is highly recommended to perform installations transactionally to be able to check reports for missing dependencies.</p>"},{"location":"omni_mimetypes/reference/","title":"omni_mimetypes","text":"<p>This extension contains MIME types and their attributes collected from various sources:</p> <ul> <li>IANA</li> <li>Apache</li> <li>Nginx</li> </ul> <p>The extension is implemented purely in SQL and PL/pgSQL.</p> <p>Credits</p> <p>The data has been fetched from mime-db, authors and maintainers of which did all the hard work.</p>"},{"location":"omni_mimetypes/reference/#examples","title":"Examples","text":""},{"location":"omni_mimetypes/reference/#querying-mime-type-for-file-extension","title":"Querying MIME type for file extension","text":"<pre><code>select\nmime_types.name\nfrom\nomni_mimetypes.mime_types\ninner join omni_mimetypes.mime_types_file_extensions mtfe on mtfe.mime_type_id = mime_types.id\ninner join omni_mimetypes.file_extensions on mtfe.file_extension_id = file_extensions.id\nwhere\nfile_extensions.extension = 'js'\n</code></pre> <p>Result:</p> <pre><code>          name          \n------------------------\n application/javascript\n(1 row)\n</code></pre>"},{"location":"omni_mimetypes/reference/#tables","title":"Tables","text":""},{"location":"omni_mimetypes/reference/#mime_types","title":"mime_types","text":"<p>Contains all the MIME types obtained from the upstream databases or custom-added.</p> Column Type Description id integer Primary key name text Unique name source mime_type_source <code>iana</code>, <code>apache</code>, <code>nginx</code> or <code>NULL</code> (probably a custom media type) compressible bool Whether a file of this type can be gzipped (nullable) charset text The default charset associated with this type, if any."},{"location":"omni_mimetypes/reference/#file_extensions","title":"file_extensions","text":"<p>Contains all known file extensions.</p> Column Type Description id integer Primary key extension text File extension (without a preceding dot)"},{"location":"omni_mimetypes/reference/#mime_types_file_extensions","title":"mime_types_file_extensions","text":"<p>Maps file extensions to MIME types.</p> Column Type Description mime_type_id integer Foreign key or mime_types.id file_extension_id integer Foreign key or file_extensions.id"},{"location":"omni_mimetypes/reference/#updating-the-database","title":"Updating the database","text":"<p>One can manually modify the above tables or fetch a newer version of <code>mime-db</code> using <code>import_mime_db</code> function:</p> <pre><code>create extension omni_httpc cascade; -- (1)\nwith\ndb as (select *\nfrom\nomni_httpc.http_execute(\nomni_httpc.http_request(\n'https://cdn.jsdelivr.net/gh/jshttp/mime-db@1.52.0/db.json')) as import) -- (2)\nselect\nomni_mimetypes.import_mime_db(convert_from(body, 'utf8')::jsonb)\nfrom\ndb;\n</code></pre> <ol> <li>This gives us an HTTP client.</li> <li>Adjust <code>mime-db</code> version as desired</li> </ol>"},{"location":"omni_os/intro/","title":"Intro","text":"<p><code>omni_os</code> provides access to some of the Operating System facilities. Intended to be used by superusers.</p>"},{"location":"omni_os/intro/#environment-variables","title":"Environment Variables","text":"<p><code>omni_os.env</code> view represents environment variable list (similar to <code>env</code> command line command)</p> Column Type variable text value text"},{"location":"omni_polyfill/polyfills/","title":"Polyfills","text":"<p>Important installation information</p> <p>In order to use polyfills provided by this extension you will need to set your <code>search_path</code> to list <code>omni_polyfill</code> before <code>pg_catalog</code>. This is important in order to ensure polyfills are attempted in the right order.</p> <pre><code>set search_path to '$user', public, omni_polyfill, pg_catalog\n</code></pre>"},{"location":"omni_polyfill/polyfills/#polyfilled-functions","title":"Polyfilled functions","text":"<ul> <li>trim_array</li> <li>UUIDv7 family</li> </ul>"},{"location":"omni_polyfill/uuidv7/","title":"uuidv7","text":"<p>For all supported versions of Postgres that do not provide <code>uuidv7()</code> function family, <code>omni_polyfill</code> provides the same implementation as was contributed to Postgres.</p>"},{"location":"omni_python/intro/","title":"Intro","text":"<p><code>omni_python</code> allows you to seamlessly integrate Python code within Omnigres, which are then used as stored procedures in the database. <code>omni_python</code> also allows you to integrate Flask framework and serve HTTP requests from directly within Omnigres.</p>"},{"location":"omni_python/intro/#prerequisites","title":"Prerequisites","text":"<p>Create <code>omni_python</code> extension if it is not installed. <pre><code>create extension if not exists omni_python cascade;\n</code></pre></p> <p>We would also need some helper extensions for loading relevant files from filesystem. <pre><code>create extension if not exists omni_schema cascade;\ncreate extension if not exists omni_vfs cascade;\n</code></pre></p>"},{"location":"omni_python/intro/#getting-started","title":"Getting started","text":"<p>Create a directory on your host system containing the Python files, and corresponding <code>requirements.txt</code>, and mount the volume to the Docker container.</p> <p>We need to add the following to <code>requirements.txt</code> file to support Python integration: <pre><code>omni_python\n</code></pre></p> <p>Create Python files. You can create more than one files, as long as they are in the directory that you would mount as a volume inside the Docker container for running Omnigres.</p> <p>Create functions in Python as you would, and annotate them with <code>@pg</code> to make sure they are loaded into the database.</p> <p>For example, let's make two Python files.</p> <p><code>hello.py</code>: <pre><code>from omni_python import pg\n@pg\ndef hello() -&gt; str:\nreturn \"Hey there!\"\n</code></pre></p> <p><code>maths.py</code>: <pre><code>from omni_python import pg\n@pg\ndef add(a: int, b: int) -&gt; int:\nreturn a + b\n@pg\ndef subtract(a: int, b: int) -&gt; int:\nreturn a - b\n</code></pre> Create a function to define an identifier for the local directory you want to load into the database. For the example, the local directory is <code>python-files</code>.</p> <p><pre><code>create or replace function demo_function() returns omni_vfs.local_fs language sql\nas $$\nselect omni_vfs.local_fs('/python-files')\n$$;\n</code></pre> Configure <code>omni_python</code> <pre><code>insert into omni_python.config (name, value) values ('pip_find_links', '/python-wheels');\n</code></pre></p> <p>Tip</p> <p>We are working on a CLI tooling that will take care of directory mapping.</p> <p>Load the filesystem files. <pre><code>select omni_schema.load_from_fs(demo_function());\n</code></pre></p> <p>Optional Tip</p> <p>You can set a reload command for reloading the filesystem changes. <pre><code>\\set reload 'select omni_schema.load_from_fs(demo_function());'\n</code></pre></p> <p>Run Omnigres in a Docker container. Make sure to mount the local directory as a volume on the correct path. <pre><code>docker run --name omnigres \\\n-e POSTGRES_PASSWORD=omnigres \\\n-e POSTGRES_USER=omnigres \\\n-e POSTGRES_DB=omnigres \\\n--mount source=omnigres,target=/var/lib/postgresql/data -v $(pwd)/python-files:/python-files \\\n-p 127.0.0.1:5433:5432 --rm ghcr.io/omnigres/omnigres-17:latest\n</code></pre></p> <p>Let's try it out! <pre><code>omnigres=# select hello();\nhello\n------------\nHey there!\n</code></pre> <pre><code>omnigres=# select add(5, 10);\nadd\n-----\n15\n</code></pre> <pre><code>omnigres=# select subtract(5, 10);\nsubtract\n----------\n-5\n</code></pre></p>"},{"location":"omni_python/intro/#flask","title":"Flask","text":"<p>For Flask framework integration, we have a few more steps.</p> <p>Ensure to create <code>omni_httpd</code> extension to be able to handle HTTP requests.</p> <pre><code>create extension if not exists omni_httpd cascade;\n</code></pre> <p>Add the following in <code>requirements.txt</code> file. <pre><code>omni_http[Flask]\n</code></pre></p> <p>Let's say you have a table called <code>employees</code>. <pre><code>create table employees (\nid integer primary key generated always as identity,\nname text not null,\ndepartment text not null,\nsalary integer not null\n);\n</code></pre></p> <p>Now you can update your Python files (in the mounted volume) to include Flask functionality. For example, you can define endpoints to fetch list of all employees, fetch a particular employee, as well as create a new employee record. <pre><code>from omni_python import pg\nfrom omni_http import omni_httpd\nfrom omni_http.omni_httpd import flask\nfrom flask import Flask, jsonify, make_response, request\nimport uuid\napp = Flask('myapp')\ndef employees_to_json(employees):\nreturn json.dumps([dict(employee) for employee in employees])\n@app.route('/employees', methods=['POST'])\ndef create_employee():\njson_data = json.loads(request.data.decode('UTF-8'))\nemployee_name = json_data.get('name')\nemployee_department = json_data.get('department')\nemployee_salary = json_data.get('salary')\nif not employee_name or not employee_department or not employee_salary:\nreturn \"Missing required fields\", 400\nemployee = plpy.execute(plpy.prepare(\"insert into employees (name, department, salary) \"\n\"values ($1, $2, $3) returning *\", [\"text\", \"text\", \"int\"]),\n[employee_name, employee_department, employee_salary])\nreturn employees_to_json(employee)\n@app.route('/employees', methods=['GET'])\ndef get_employees():\nemployees = plpy.execute(plpy.prepare(\"select * from employees\"))\nreturn employees_to_json(employees)\n@app.route('/employees/&lt;int:employee_id&gt;', methods=['GET'])\ndef get_employee(employee_id):\nemployee = plpy.execute(plpy.prepare(\"select * from employees where id = $1\", [\"int\"]), [employee_id])\nreturn employees_to_json(employee)\nhandle = pg(flask.Adapter(app))\n</code></pre></p> <p>Flask integration with Omnigres</p> <p><code>flask.Adapter(app)</code> creates an instance of the flask.Adapter class, which is provided by the <code>omni_http</code> library.  This adapter allows you to integrate Flask with the <code>omni_http</code> framework.  The <code>app</code> object is your Flask application instance, and you pass it to <code>flask.Adapter()</code> to create an adapter that can handle HTTP requests using your Flask app.</p> <p>The <code>handle</code> function is the entry point for handling incoming HTTP requests.  It takes an <code>HTTPRequest</code> object as input and is expected to return an <code>HTTPOutcome</code>.  Inside the function, it forwards the <code>req</code> object to the <code>app_</code> object, which is a Flask  application wrapped in the <code>`flask.Adapter()</code>. This allows the Flask application to handle  the incoming HTTP request and generate a response. Finally, the response is returned  as <code>HTTPOutcome</code>.</p> <p>Tip</p> <p>Note: We use <code>plpy</code> for now, but we should use DB API compatible APIs and/or other  frameworks (such as SQLAlchemy) which will be available very soon.</p> <p>Make sure to add port mapping for 8080 (this is default <code>omni_httpd</code> is configured with) when running Omnigres via Docker (using the same volume as before).</p> <pre><code>docker run --name omnigres \\\n-e POSTGRES_PASSWORD=omnigres \\\n-e POSTGRES_USER=omnigres \\\n-e POSTGRES_DB=omnigres \\\n--mount source=omnigres,target=/var/lib/postgresql/data -v $(pwd)/python-files:/python-files \\\n-p 127.0.0.1:5450:5432 -p 127.0.0.1:8000:8000 \\\n--rm ghcr.io/omnigres/omnigres-17:latest\n</code></pre> <p>Setup HTTP handler for out Flask application:</p> <pre><code>update omni_httpd.handlers\nset\nquery =\n$$select handle(request.*) from request$$;\n</code></pre> <p>You can hit the endpoints defined in the Flask code above.</p> <p>Fetch all employees: <pre><code>$ curl http://localhost:8080/employees\n[\n{\n\"id\": 1,\n        \"name\": \"Akshat\",\n        \"department\": \"Engineering\",\n        \"salary\": 100000\n},\n    {\n\"id\": 2,\n        \"name\": \"Mohit\",\n        \"department\": \"Sales\",\n        \"salary\": 50000\n}\n]\n</code></pre></p> <p>Create a new employee: <pre><code>$ curl --request POST \\\n--url http://localhost:8080/employees \\\n--header 'Content-Type: application/json' \\\n--data '{\n  \"name\": \"Daniel\",\n  \"department\": \"Marketing\",\n  \"salary\": 70000\n}'\n[{\"id\": 3, \"name\": \"Daniel\", \"department\": \"Marketing\", \"salary\": 70000}]\n</code></pre></p> <p>Fetch a particular employee: <pre><code>$ curl http://localhost:8080/employees/3\n[{\"id\": 3, \"name\": \"Daniel\", \"department\": \"Marketing\", \"salary\": 70000}]\n</code></pre></p>"},{"location":"omni_regex/regex/","title":"Regex","text":"<p>This extensions provides PCRE2-based regular expression functionality. PCRE2 is feature-rich (for example, it provides named capture groups) and performant.</p>"},{"location":"omni_regex/regex/#regex-type","title":"<code>regex</code> type","text":"<p>This extension introduces a <code>regex</code> type which is effectively wrapping a regular expression and defines operators and functions over it.</p>"},{"location":"omni_regex/regex/#matching","title":"Matching","text":"<p>Regular expressions can be matched against strings using <code>~</code> (with <code>!~</code> being non-matching) or <code>=~</code> operators:</p> <pre><code>select 'foo' ~ regex 'fo+';\n--#&gt; t\nselect 'bar' !~ regex 'foo';\n--#&gt; t\n-- they also work the other way around:\nselect regex 'fo+' ~ 'foo';\n--#&gt; t\nselect regex 'foo' !~ 'bar';\n--#&gt; t\n-- Same as `~`\nselect 'foo' =~ regex 'fo+';\n--#&gt; t\n</code></pre>"},{"location":"omni_regex/regex/#extracting-matches","title":"Extracting matches","text":"<p><code>regex_match(text, regex)</code> will return <code>text[]</code> with all captured groups. If there are no groups, will return an array with a single element:</p> <pre><code>select regex_match('ABC123', 'A.*');\n--#&gt; {ABC123}\nselect regex_match('ABC123', '([A-Z]*)(\\d+)');\n--#&gt; {ABC,123}\n</code></pre> <p>To extract multiple matches, use <code>regex_matches(text, regex)</code>. It returns a <code>setof text[]</code>:</p> <pre><code>select regex_matches('foo1bar', '(fo+|bar)(\\d?)');\n--#&gt; {foo,1}\n--#&gt; {bar,\"\"}\n</code></pre>"},{"location":"omni_regex/regex/#named-catpure-groups","title":"Named catpure groups","text":"<p>PCRE2 supports named capture groups (<code>(?&lt;name&gt;REGEX)</code>) and you can use <code>regex_named_groups(regex)</code> to extract these. It returns a <code>table (name cstring, index int)</code> (where <code>index</code> is a 1-based index of groups)</p> <pre><code>select index\nfrom regex_named_groups('(fo+|bar)(?&lt;num&gt;\\d?)')\nwhere name = 'num';\n--#&gt; 2\n</code></pre>"},{"location":"omni_regex/regex/#credits","title":"Credits","text":"<p>The extension is a fork of pgpcre by Peter Eisentraut with unmerged contributions from Christoph Berg (pcre2 support), modified to support named capture groups, parallelization and PCRE2.</p> <p>The original code is licensed under the terms of The PostgreSQL License reproduced below.</p> License <p>Copyright \u00a9 2013, Peter Eisentraut peter@eisentraut.org</p> <p>(The PostgreSQL License)</p> <p>Permission to use, copy, modify, and distribute this software and its documentation for any purpose, without fee, and without a written agreement is hereby granted, provided that the above copyright notice and this paragraph and the following two paragraphs appear in all copies.</p> <p>IN NO EVENT SHALL THE AUTHOR(S) OR ANY CONTRIBUTOR(S) BE LIABLE TO ANY PARTY FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES, INCLUDING LOST PROFITS, ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF THE AUTHOR(S) OR CONTRIBUTOR(S) HAVE BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</p> <p>THE AUTHOR(S) AND CONTRIBUTOR(S) SPECIFICALLY DISCLAIM ANY WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE SOFTWARE PROVIDED HEREUNDER IS ON AN \"AS IS\" BASIS, AND THE AUTHOR(S) AND CONTRIBUTOR(S) HAVE NO OBLIGATIONS TO PROVIDE MAINTENANCE, SUPPORT, UPDATES, ENHANCEMENTS, OR MODIFICATIONS.</p>"},{"location":"omni_rest/protocols/","title":"Protocols","text":""},{"location":"omni_rest/protocols/#postgrest","title":"PostgREST","text":"<p>At the time, <code>omni_rest</code> provides basic PostgREST compatibility. You can refer to its documentation for details.</p> <p>PostgREST compatibility is not yet complete</p> <p>Please be aware since this is an early release of <code>omni_rest</code>, not all functionality is implemented yet. We strived to cover the core cases and are iterating on the missing bits.</p>"},{"location":"omni_rest/quickstart/","title":"Quickstart","text":"This is a template extension <p>This means <code>omni_rest</code> extension doesn't have to be installed at all times to use functions from it.</p> <p>If you'd like to be able multiple versions of <code>omni_rest</code>, or use it without extension provisioned for any other reason, you can instantiate it into a schema of your choosing:</p> <pre><code>select omni_rest.instantiate(schema =&gt; 'your_schema_name');\n</code></pre>"},{"location":"omni_rest/quickstart/#integration","title":"Integration","text":"<p>To integrate <code>omni_rest</code> with your Omnigres extension, augment your <code>omni_httpd.handler</code> to call1 <code>omni_rest.postgrest(req, outcome)</code> procedure. The return value for the outcome of its processing will be saved into the <code>outcome</code> parameter as it is an <code>inout</code> parameter.</p> <p>The default settings are intentionally strict to avoid exposing something not meant for exposure. As instructed above, no relation will be exposed.</p> <p>In order to expose relations in a schema, you need to supply a third (optional) parameter of <code>settings</code>, denoting allowed schemas:</p> <pre><code>call omni_rest.postgrest(req, outcome, omni_rest.postgrest_settings(schemas =&gt; '{app}'));\n</code></pre> <p>In the future, more settings will be added.</p> <ol> <li> <p>Call as a procedure:</p> <p><pre><code>call omni_rest.postgrest(req, outcome, ...)\n</code></pre> \u21a9</p> </li> </ol>"},{"location":"omni_schema/reference/","title":"omni_schema","text":"<p>This extension allows application schemas to be managed easily, both during development and deployment.</p>"},{"location":"omni_schema/reference/#migrations","title":"Migrations","text":"<p>This extension provides <code>migrate_from_fs</code> function that executes SQL migrations from a file system (provided by the <code>omni_vfs</code> extension.)</p> <pre><code>select *\nfrom\nomni_schema.migrate_from_fs(omni_vfs.local_fs('/path/to/project/migrations'))\n</code></pre> <p>It returns a set of <code>text</code> with each element being the file name executed.</p> <p>The above invocation is most useful for development environment or deployment that is done with the backing of a local file system. In the near future, more file systems will be added, and that will facilitate more ergonomic scenarios.</p> <p>Can't define a new filesystem?</p> <p>You can specify <code>path</code> optional parameter to indicate where the migrations reside on the file system:</p> <pre><code>select *\nfrom\nomni_schema.migrate_from_fs(omni_vfs.local_fs('/path/to/project'), 'migrations')\n</code></pre> <p>This function will recursively find all files with <code>.sql</code> extension and apply them ordered by path name, excluding those that were already applied before. For this purpose, it maintains the <code>omni_schema.migrations</code> table.</p> Column Type Description id int Unique identifier name text Migration (file) name migration text The source code of the migration applied_at timestamp Time of migration application 1"},{"location":"omni_schema/reference/#object-reloading","title":"Object reloading","text":"<p>For certain types of schema objects , it is possible to reload their contents without having to create a migration every time they change (which is fairly suboptimal, especially when it comes to tracking their changes in a version control system.) The types supported are:</p> <ul> <li>functions</li> <li>policies</li> <li>views</li> </ul> <p>This extension provides <code>load_from_fs</code> function that will reload all such objects from a local on a file system (provided by the <code>omni_vfs</code> extension), similar to <code>migrate_from_fs</code>:</p> <pre><code>select *\nfrom\nomni_schema.load_from_fs(omni_vfs.local_fs('/path/to/project/migrations'))\n</code></pre> <p>Its return type and parameters are currently identical to those of <code>migrate_from_fs</code>.</p> <p>Ignoring files</p> <p>In order to avoid loading particular files that match a language or a tool filename pattern, one can put <code>omni_schema[[ignore]]</code> somewhere inside such file (for example, in a comment) and <code>omni_schema</code> will not load it.</p>"},{"location":"omni_schema/reference/#multi-language-functions","title":"Multi-language functions","text":"<p>Object reloading functionality allows one to load functions from '.sql' files which can contain SQL or PL/pgSQL functions defined verbatim:</p> test_function.sql<pre><code>create function test_function(a integer) returns integer\nlanguage sql\nas\n$$\nselect a &gt; 1\n$$;\ncreate function test_function(a integer) returns integer\nlanguage plpgsql\nas\n$$\nbegin\nreturn a &gt; 1;\nend\n$$;\n</code></pre> <p>Such files can contain multiple function definitions.</p> <p>One can note, however, that SQL or PL/pgSQL is not always the best fit for a particular problem. This is reflected in the fact that Postgres has an ecosystem of other programming languages. However, writing code in those languages inside of SQL files is a sub-par development experience: syntax highlighting, auto-completion may not work; external tools that work with this languages are unaware of this embedding technique.</p> <p>To address this, this extension provides extensible support for custom languages.</p> <p>There are two components to this:</p> <ul> <li>in-file function signature directive (conceptually similar   to shebang)</li> <li><code>omni_schema.languages</code> tables that defines mapping of languages</li> </ul> <p>The directive part is pretty simple: anywhere in the file, typically a comment you can put a snippet that looks like this, enclosed within <code>SQL[[...]]</code>:</p> times_ten.py<pre><code># SQL[[create function times_ten(a integer) returns integer]]\nreturn a * 10\n</code></pre> <p>The extension is syntax-agnostic, so it'll look for this type of line anywhere, comments, or code. It will then match the extension of the file to the language and append the given <code>create function</code> line with an appropriate <code>language ... as</code> construct and pass the contents of the entire file to it 2.</p> <p>Future vision</p> <p>In the future, we want to be able to provide a more sophisticated  functionality to supported languages, like allowing to define multiple  functions per file, use native language annotation/type systems to  infer the SQL function signature or detect language when file extensions are ambiguous (like <code>.pl</code> for Perl and Prolog).</p> <p>Currently supported languages:</p> <ul> <li>SQL and PL/pgSQL (<code>.sql</code>) 3</li> <li>Python (<code>.py</code>)</li> <li>Perl (<code>.pl</code>, <code>.trusted.pl</code>)</li> <li>Tcl (<code>.tcl</code>, <code>.trusted.tcl</code>)</li> <li>Rust (<code>.rs</code>)</li> </ul> <p>If an extension required for the support of a language is not installed, files in that language will be skipped and a notice will be given, similar to this one:</p> <pre><code>Extension pltclu required for language pltclu (required for foo.tcl)\nis not installed\n</code></pre> <p>The support for languages is configurable through <code>omni_schema.languages</code> table:</p> Column Type Description file_extension text Filename extension without the preceding dot. _Examples: <code>py</code>, <code>trusted.pl</code>, <code>rs</code> language name Language identifier to be used <code>create function ... language</code> extension name Extension that implements the language, if required <ol> <li> <p>The timestamp defaults to <code>now()</code> which means that migrations applied in the same transaction all get the same value of <code>applied_at</code>, which can be used for grouping them together.\u00a0\u21a9</p> </li> <li> <p>This means you can only define one function per file at the moment.\u00a0\u21a9</p> </li> <li> <p>SQL language is always supported, even if corresponding entry is removed from <code>omni_schema.languages</code>. This behavior may change in the future.\u00a0\u21a9</p> </li> </ol>"},{"location":"omni_seq/id/","title":"Distributed IDs","text":""},{"location":"omni_seq/id/#sequences-and-distributed-ids","title":"Sequences and Distributed IDs","text":"<p>You may have learned that one of the current limitations of Postgres logical replication is that sequence data is not replicated:</p> <p>From Postgres documentation:</p> <p>The data in serial or identity columns backed by sequences will of course be replicated as part of the table, but the sequence itself would still show the start value on the subscriber.  If the subscriber is used as a read-only database, then this should typically not be a problem.  If, however, some kind of switchover or failover to the subscriber database is intended, then the sequences would need to be updated to the latest values, either by copying the current data from the publisher  (perhaps using pg_dump) or by determining a sufficiently high value from the tables themselves.</p> <p>This may be an undesirable behavior in some scenarios. Indeed, if there was a switchover, and a replica was to continue with the insertion of new records, it'll start failing with primary key constraint violation because sequence counters (\"sequence data\") has not been replicated.</p> <p>In this extension, you can work around this limitation by using one of the distributed (or prefixed) identifier types. The core of the idea is that every ID should contain a node identifier (prefix) and an identifier itself.</p>"},{"location":"omni_seq/id/#types","title":"Types","text":"<p>These types are named using the following pattern: <code>omni_seq.id_&lt;TYPE&gt;_&lt;TYPE&gt;</code>, where <code>TYPE</code> is one of the following:</p> <ul> <li><code>int16</code></li> <li><code>int32</code></li> <li><code>int64</code></li> </ul> <p>For brevity, where prefix type and identifier type are the same, the type is not repeated, so instead of <code>omni_seq.id_int64_int64</code> we call it <code>omni_seq.id_int64</code>.</p>"},{"location":"omni_seq/id/#how-to-use","title":"How to Use","text":"<p>One can use it as a default value for a primary key, with an explicitly created sequence:</p> <pre><code>create sequence seq;\ncreate table t\n(\nid omni_seq.id_int64 primary key not null default\nomni_seq.id_int64_nextval(NODE_ID, 'seq') -- (1)\n);\n</code></pre> <ol> <li><code>NODE_ID</code> is either a number assigned to the current node or a unique system identifier (which can be retrieved using <code>omni_seq.system_identifier()</code>1 function)</li> </ol> Why not <code>generated always as identity</code>? <p>The reason why we can't use <code>generated ... as identity</code> syntax is that this functionality is tied to local counters.</p> <p>We also can't use generated columns at all, as \"the generation expression can only use immutable functions\", and <code>nextval</code> is volatile as it increments the sequence counter.</p>"},{"location":"omni_seq/id/#migration-guide","title":"Migration Guide","text":"<p>If you already have a table that you might need to prepare for prefixed identifiers, this guide will show how it can be done relatively easily.</p> <p>Let's assume we have a table with an <code>integer</code> primary key:</p> <pre><code>create table my_table (\nid integer primary key generated always as identity\n);\ninsert into my_table select from generate_series(1, 10);\n</code></pre> <p>Now we want to add a 64-bit2 prefixed identifier, reusing the existing sequence locally.</p> <pre><code>create extension if not exists omni_seq;\nbegin;\nlock table my_table; -- (1)\nalter table my_table\nalter column id drop identity if exists;\ncreate sequence my_table_id_seq;\nalter table my_table\nalter column id type omni_seq.id_int64_int32 using omni_seq.id_int64_int32_make(0, id), -- (2)\nalter column id set default omni_seq.id_int64_int32_nextval(\nomni_seq.system_identifier(), 'my_table_id_seq');\ncommit;\n</code></pre> <ol> <li>Do the migration while locking other clients out.</li> <li><code>0</code> here signifies migrated rows.</li> </ol> <p>When we insert into and query the table again, we'll see this:</p> <pre><code>psql=# insert into my_table values (default) returning id;\nid           -----------------------\n7222168279780171472:1 -- (1)\n(1 row)\npsql=# table my_table;\nid           -----------------------\n0:1\n0:2\n0:3\n0:4\n0:5\n0:6\n0:7\n0:8\n0:9\n0:10\n7222168279780171472:1\n(11 rows)\n</code></pre> <ol> <li>The actual number you will see will be different</li> </ol> <p>If you already have replicas</p> <p>The database schema and DDL commands are not replicated.</p> <p>Therefore it is important to ensure that you perform the above before having a production setup.  Otherwise, take appropriate steps to ensure the above changes are applied on all replicas in sync and due caution is exercised to ensure the upgrade is atomic.</p> <p>We want to have a better answer to this. Please consider contributing your suggestions on how to handle this case.</p> <ol> <li> <p>An integer contained in the pg_control file providing a reasonably unique database cluster identifier.    The function is effectively a simplified version of <code>SELECT system_identifier FROM pg_control_system()</code> \u21a9\u21a9</p> </li> <li> <p>Postgres unique system identifier is a 64-bit integer, see 1 \u21a9</p> </li> </ol>"},{"location":"omni_service/management/","title":"Service Management","text":"<p>This extension provides a uniform way of managing services like omni_httpd in a general way. For example, you want to stop all running services? You don't need to care how these particular services implement such functionality. You simply do something like:</p> <pre><code>select omni_service.service_stop(name)\nfrom omni_service.current_services\nwhere state = 'running';\n</code></pre> <p><code>omni_service</code> is a templated extension</p> <p><code>omni_service</code> is a templated extension. This means that by installing it, none of the intended objects are provisioned, but that can be done by instantiating a template:</p> <pre><code>select omni_service.instantiate([schema =&gt; 'omni_service'])\n</code></pre>"},{"location":"omni_service/management/#service-listing","title":"Service Listing","text":"<p><code>current_services</code> table shows the list of services along with their current status.</p> Name Type Description name text The unique identifier for the service info jsonb Additional metadata or configuration details for the service state service_state The current operational state of the service (one of <code>not-running</code>, <code>running</code>, or <code>stopped</code>)"},{"location":"omni_service/management/#starting-and-stopping-a-service","title":"Starting and Stopping a Service","text":"<p><code>service_start(name)</code> and <code>omni_service.service_stop(name)</code> will respectively start and stop a service if it is in the right state.</p> <p>Every such operation is logged in the <code>service_operations</code> table:</p> Name Type Description name text The unique identifier of the service to which this operation applies postmaster_start_time timestamptz The database server start time, referencing the <code>services</code> table operation service_operation The type of operation performed (e.g., <code>start</code> or <code>stop</code>) applied_at timestamptz The timestamp when the operation was recorded"},{"location":"omni_service/service_integration/","title":"Service Integration","text":"<p>This article is for other extension developers</p> <p>If you are developing an extension that runs a service (similar to how omni_httpd is, this section describes the basics of service integration.</p>"},{"location":"omni_service/service_integration/#service-registration","title":"Service Registration","text":"<p>Services are recorded in the <code>services</code> table and can be registered using <code>register_service(name [, info])</code> function. If a service with such a name already exists, only <code>info</code> will be updated.</p> <p>The services are recorded in the <code>services</code> table:</p> Name Type Description name text The unique name of the service info jsonb Additional metadata or configuration details about the service postmaster_start_time timestamptz The timestamp when the database server started (used with <code>name</code> as the primary key in services) <p><code>postmaster_start_time</code> allows us to distinguish services registered after postmaster has been restarted. It is populated automatically.</p> <p>This is typically not necessary as <code>services</code> are cleaned up after every registration to only contain the current \"epoch\".</p> <p>However, if relevant trigger (<code>service_provisioning_trigger</code>) has been disabled, the records are kept and this allows to discern registrations.</p>"},{"location":"omni_service/service_integration/#operations","title":"Operations","text":"<p>In order to integrate your service into <code>omni_service</code>, you need to add triggers to <code>service_operations</code> to observe the operations and enact appropriate actions.</p> <pre><code>create function service_operation() returns trigger\nlanguage plpgsql\nas\n$$\nbegin\ncase\nwhen new.operation = 'stop' then call my_service.stop();\nwhen new.operation = 'start' then call my_service.start();\nelse null;\nend case;\nreturn new;\nend;\n$$;\ncreate or replace trigger my_service_operations\nafter insert\non service_operations\nfor each row\nexecute function service_operation();\n</code></pre>"},{"location":"omni_session/session_management/","title":"Session Management","text":"<p><code>omni_session</code> extension brings standardized session management to the Omnigres stack. Currently, it is focused on providing this functionality in cooperation with the HTTP stack, but it is not limited to it and can be used outside of the HTTP context.</p> <p>This extensions creates an unlogged <code>omni_session.sessions</code> table that contains all sessions.</p>"},{"location":"omni_session/session_management/#session-handler","title":"Session handler","text":"<p>Function <code>omni_session.session_handler</code> is designed to handle session application to differently typed objects:</p>"},{"location":"omni_session/session_management/#session-id","title":"Session ID","text":"<p><code>omni_session.session_handler(omni_session.session_id)</code> returns <code>omni_session.session_id</code> and represents the core of session functionality.</p> <ul> <li>Given a null session ID, it creates a new session and sets <code>omni_session.session</code> transaction variable to it. Returns   a   new session ID.</li> <li>Given a non-null session ID that is a valid existing session, it sets <code>omni_session.session</code> transaction variable to   it.   Returns the same session ID.</li> <li>Given a non-null session ID that is not a valid existing session, it creates a new session and sets   <code>omni_session.session</code>   transaction variable to it. Returns a new session ID.</li> </ul>"},{"location":"omni_session/session_management/#http-request","title":"HTTP Request","text":"<p><code>omni_session.session_handler(omni_httpd.http_request)</code> returns unmodified <code>omni_httpd.http_request</code> and retrieves the UUID from request's cookie called <code>_session</code>. Its behavior mirrors that of ID behavior above.</p> <p>Accepts an optional <code>cookie_name</code> parameter to specify a different name for the cookie.</p>"},{"location":"omni_session/session_management/#http-response","title":"HTTP Response","text":"<p><code>omni_session.session_handler(omni_httpd.http_response)</code> returns a modified <code>omni_httpd.http_outcome</code> with a cookie <code>_session</code> set to <code>omni_session.session</code> transaction variable value.</p> <p>Optional parameters:</p> Name Type Descriptions cookie_name text The name of the cookie to be used (default: '_session'). http_only bool If true, the cookie is accessible only via HTTP(S), preventing JavaScript access (default: true). secure bool If true, the cookie is sent only over HTTPS connections (default: true). same_site text Controls cross-site cookie behavior. Options: 'Lax', 'Strict', 'None' (default: 'Lax'). domain text Specifies the domain for which the cookie is valid (default: null, meaning it is not explicitly set). max_age int Defines the lifetime of the cookie in seconds (default: null, meaning not explicitly set). expires timestamptz Sets the exact expiration timestamp for the cookie (default: null, meaning it is not explicitly set). partitioned bool Enables partitioning of the cookie to enhance privacy (experimental; default: false). path text Specifies the URL path for which the cookie is valid (default: null, meaning it is not explicitly set)."},{"location":"omni_sqlite/sqlite/","title":"Native SQLite","text":"<p><code>omni_sqlite</code> is an extension that adds the capability to use SQLite databases as a first-class data type within Postgres. It uses expandable datum technique to ensure no additional serialization overhead for data in-flight.</p> <p>Upcoming features</p> <p>As this extension grows, we'll be adding more functionality, such as:</p> <ul> <li>Querying Postgres tables from within SQLite</li> <li>Support for the session extension and other techniques   for data synchronization</li> <li>Support for larger SQLite databases (over 1Gb)</li> </ul> <p>The extension can be installed into a Postgres in the normal way:</p> <pre><code>create extension omni_sqlite;\n</code></pre> <p><code>omni_sqlite</code> is a templated extension</p> <p><code>omni_sqlite</code> is a templated extension. This means that by installing it, its default-instantiated  into <code>omni_sqlite</code> but can be instantiated into any other schema:</p> <pre><code>select omni_sqlite.instantiate([schema =&gt; 'omni_sqlite'])\n</code></pre>"},{"location":"omni_sqlite/sqlite/#credits","title":"Credits","text":"<p>This work is inspired by postgres-sqlite by Michel Pelletier, licensed under BSD 3-Clause License, but is now a significant rewrite in a different language (C++ instead of C) with added functionality.</p>"},{"location":"omni_sqlite/sqlite/#key-advantages","title":"Key Advantages","text":""},{"location":"omni_sqlite/sqlite/#multitenancy","title":"Multitenancy","text":"<p>This extension simplifies multitenancy by embedding isolated SQLite databases directly into Postgres. Each SQLite database is entirely independent of its surrounding Postgres environment, eliminating the need for complex RLS policies, permissions, alternate database in a cluster, or other traditional multitenancy mechanisms. This allows user data to be securely stored in separate rows without additional configuration.</p>"},{"location":"omni_sqlite/sqlite/#client-server-synchronization","title":"Client-Server Synchronization","text":"<p>Another powerful use case is being able to exchange and synchronize  such databases between peers. For example, you can seamlessly exchange data between client and server using either SQLite\u2019s native SQL text format or the standard binary format via <code>sqlite_serialize()</code> and <code>sqlite_deserialize()</code>.</p>"},{"location":"omni_sqlite/sqlite/#creating-sqlite-databases","title":"Creating SQLite Databases","text":"<p>There are three main objects in the extension, the <code>sqlite</code> type and the <code>sqlite_exec()</code> and <code>sqlite_query()</code> functions.  New databases can be created by casting an initialization string to the <code>sqlite</code> type:</p> <pre><code>select 'create table user_config (key text, value text)'::omni_sqlite.sqlite;\nsqlite                      --------------------------------------------------\nPRAGMA foreign_keys=OFF;                        +\nBEGIN TRANSACTION;                              +\nCREATE TABLE user_config (key text, value text);+\nCOMMIT;                                         +\n(1 row)\n</code></pre> <p>Note that while you are seeing the SQL text representation of the sqlite object, it is stored internally in Postgres as a compact binary representation of an in-memory SQLite database.</p>"},{"location":"omni_sqlite/sqlite/#modifying-sqlite-objects","title":"Modifying SQLite Objects","text":"<p>This new sqlite instance can now be inserted into a table and manipulated with the <code>sqlite_exec()</code> function, for example:</p> <pre><code>create table customer (\nid bigserial primary key,\nname text not null,\ndata omni_sqlite.sqlite default 'create table user_config (key text, value text);'\n);\ninsert into customer (name) values ('bob') returning *;\nid | name |                       data                       ----+------+--------------------------------------------------\n1 | bob  | PRAGMA foreign_keys=OFF;                        +\n|      | BEGIN TRANSACTION;                              +\n|      | CREATE TABLE user_config (key text, value text);+\n|      | COMMIT;                                         +\n|      | (1 row)\nupdate customer\nset data = omni_sqlite.sqlite_exec(data, $$INSERT INTO user_config VALUES ('color', 'blue')$$)\nreturning *;\nid | name |                                 data                                 ----+------+----------------------------------------------------------------------\n1 | bob  | PRAGMA foreign_keys=OFF;                                            +\n|      | BEGIN TRANSACTION;                                                  +\n|      | CREATE TABLE user_config (key text, value text);                    +\n|      | INSERT INTO user_config(rowid,\"key\",value) VALUES(1,'color','blue');+\n|      | COMMIT;                                                             +\n|      | (1 row)\n</code></pre> <p>Notice how the default value for the <code>data</code> column in the new table will initialize a new SQLite database into that column.  All new rows in <code>customer</code> will contain an SQLite database named <code>data</code> which in turn contains a table <code>user_config</code>.</p> <p>The <code>sqlite_exec(db, query)</code> function takes a SQLite database and a query as an argument, executes that query and returns the same database, so this can be used for chaining updates to the same database through multiple calls.</p> <p>You can optionally pass parameters to bind using a record:</p> <pre><code>omni_sqlite=#\nselect omni_sqlite.sqlite_exec('create table tab (val text)', 'insert into tab values ($1)', row ('hello'));\n</code></pre> <pre><code>                  sqlite_exec                  \n-----------------------------------------------\n PRAGMA foreign_keys=OFF;                     +\n BEGIN TRANSACTION;                           +\n CREATE TABLE tab (val text);                 +\n INSERT INTO tab(rowid,val) VALUES(1,'hello');+\n COMMIT;                                      +\n\n(1 row)\n</code></pre>"},{"location":"omni_sqlite/sqlite/#querying-sqlite-objects","title":"Querying SQLite Objects","text":"<p>The <code>sqlite_query(db, query)</code> function is a Set Returning Function (SRF) that returns <code>setof record</code> with a row for each SQlite result row from the given sqlite query.  Using the standard 'as' syntax these values can be mapped to table like Postgres results:</p> <pre><code>select * from omni_sqlite.sqlite_query(\n(select data from customer),\n'SELECT rowid, key, value from user_config')\nas (id bigint, key text, value text);\nid |  key  | value ----+-------+-------\n1 | color | blue\n(1 row)\n</code></pre> <p>You can optionally pass parameters to bind using a record:</p> <pre><code>select *\nfrom omni_sqlite.sqlite_query('', 'select $1', row (1)) as (id bigint);\n</code></pre> <pre><code> id \n----\n  1\n(1 row)\n</code></pre>"},{"location":"omni_sqlite/sqlite/#serializedeserialize","title":"Serialize/Deserialize","text":"<p>There is support for serializing and deserializing SQLite databases as <code>bytea</code> byte array types.</p> <pre><code>select pg_typeof(omni_sqlite.sqlite_serialize('create table foo (x)'));\npg_typeof -----------\nbytea\n(1 row)\n</code></pre> <p><code>sqlite_deserialize</code> takes a <code>bytea</code> representation of the database and expands it into sqlite object:</p> <pre><code>select omni_sqlite.sqlite_deserialize(omni_sqlite.sqlite_serialize('create table foo (x)'));\nsqlite_deserialize    --------------------------\nPRAGMA foreign_keys=OFF;+\nBEGIN TRANSACTION;      +\nCREATE TABLE foo (x);   +\nCOMMIT;                 +\n(1 row)\n</code></pre>"},{"location":"omni_test/guide/","title":"Testing Guide","text":"<p><code>omni_test</code> allows you to run tests from within the database.</p> <p><code>omni_test</code> is a templated extension</p> <p><code>omni_test</code> is a templated extension. This means that by installing it, its default-instantiated  into <code>omni_test</code> but can be instantiated into any other schema:</p> <pre><code>select omni_test.instantiate([schema =&gt; 'omni_test'])\n</code></pre> <p>In order to use it, you need to provision a template database with your test functions and everything they need:</p> <pre><code>create database myapp_test;\nupdate pg_database set datistemplate = true where datname = 'myapp_test';\n-- provision the content\n</code></pre> <p>Use <code>omni_schema.assemble_schema</code></p> <p>One of the easiest way to provision files into this new schema is to use <code>omni_schema.assemble_schema</code>:</p> <pre><code>select * from omni_schema.assemble_schema('dbname=myapp_test ..',\nomni_vfs.local_fs('/path/to/tests'))\n</code></pre>"},{"location":"omni_test/guide/#writing-tests","title":"Writing tests","text":"<p>Tests are found by signature, they can be either functions or procedures. </p> <p>Functions must follow this signature:</p> <pre><code>create function my_test() returns omni_test.test -- ...\n</code></pre> <p>What's <code>omni_test.test</code> type?</p> <p>At this time, <code>omni_test.test</code> is am empty composite type and its value is ignored. It is simply used for finding tests. This may change in the future.</p> <p>Procedures must follow this signature:</p> <pre><code>create procedure my_test(inout omni_test.test) -- ..\n</code></pre> When to use procedures instead of functions? <p>Procedures are to be used if the test is to be non-atomic, that is, if it uses <code>commit</code> or <code>rollback</code>.</p>"},{"location":"omni_test/guide/#settings","title":"Settings","text":"<p>Test functions and procedures have optionally supplied settings, that can be set using <code>create procedure ... set param = value</code> (or <code>alter ... set param value</code>):</p> Setting Description <code>omni_test.transaction_isolation</code> Transaction isolation level, follows <code>transaction_isolation</code> setting <p>Example:</p> <pre><code>create procedure tx_iso(inout test omni_test.test)\nset omni_test.transaction_isolation = serializable\nlanguage plpgsql\nas\n$$\nbegin\nif current_setting('transaction_isolation') != 'serializable' then\nraise exception 'transaction isolation level was not set';\nend if;\nend;\n$$;\n</code></pre>"},{"location":"omni_test/guide/#running-tests","title":"Running tests","text":"<p>To run tests, simply pass the name of the database to the <code>run_tests</code> function:</p> <pre><code>select * from omni_test.run_tests('myapp_test')\n</code></pre> <p>Every test function and procedure is going to be executed in a fresh copy of the <code>myapp_test</code> \"template\" database.</p> <p>The results will conform to this structure:</p> Name Type Description name <code>text</code> The name of the test. description <code>text</code> A detailed description of the test start_time <code>timestamp</code> The start time of the test. end_time <code>timestamp</code> The end time of the test. error_message <code>text</code> An error message, if the test failed."},{"location":"omni_test/guide/#filtering-tests","title":"Filtering tests","text":"<p>It's also possible to include only specific tests by using optional <code>filter</code> parameter to <code>run_tests</code>. It's used against function/procedure names and their comments using regular expressions.</p> <pre><code>select *\nfrom\nomni_test.run_tests('myapp_test', filter =&gt; '^(?!.*@slow).*')\n</code></pre> <p>(The above will filter out tests with a <code>@slow</code> marker in their comment)</p>"},{"location":"omni_txn/linearize/","title":"Transaction Linearization","text":"<p>Experimental feature</p> <p>Please be advised that this is a very new, experimental feature. The soundness of the approach or the implementation has not been fully vetted yet.</p> <p>For most common cases, transaction isolation levels like  <code>serializable</code> are sufficient to avoid problems with concurrent transactions.</p> <p>There are, however, cases where this may not be enough and Postgres won't be tracking complex dependencies in your operations provided they don't form so-called dangerous structures.</p> <p>When transaction T1 writes to tables Rw are logically dependent on reads from Rr, Postgres won't be able to make detect a conflict with another transaction T2 that may have written to Rr after T1 read from it if T2 would commit changes sooner than T1. This may result in a state that is logically inconsistent if operations on entities are deemed unrelated.</p> <p>For this, we introduce a limited, experimental tooling for linearizing transaction.</p> <p>To quote Jepsen</p> <p>Linearizability is one of the strongest single-object consistency models, and implies that every operation appears to take place atomically, in some order, consistent with the real-time ordering of those operations: e.g., if operation A completes before operation B begins, then B should logically take effect after A.</p> <p>To facilitate such a mode, we introduce a few rules (SLT: serializable, linearized transaction):</p> <ol> <li>Any write in  SLT1 that happens after another SLT0    read from the same relation, must result in a serialization linearization failure    in either transaction.</li> <li>Any commit in SLT1 that wrote into a relation    that happens after another SLT0 read from the same relation, must result    in a serialization linearization failure in either transaction.</li> <li>Any commit in SLT1 that wrote into a relation    after any SLTn has obtained a snapshot, must result    in a serialization linearization failure in either transaction,    provided SLTn will read from this relation.</li> </ol> <p>In all cases, false failures are possible and transaction retrying strategy is advisable.</p>"},{"location":"omni_txn/linearize/#motivating-example","title":"Motivating example","text":"<p>Let's imagine an oversimplified financial account system.</p> <p> <pre><code>erDiagram\n  accounts {\n    id serial\n    closed_on timestamptz\n  }\n  accounts ||--o| account_transfers : has\n  account_transfers {\n    time timestamptz\n    debit_account_id int\n    credit_account_id int\n    amount bigint\n  }</code></pre> </p> Want to see the schema? <pre><code>create table accounts\n(\nid        serial primary key,\nclosed_on timestamptz\n);\ncreate table account_transfers\n(\ntime              timestamptz primary key default statement_timestamp(),\ndebit_account_id  int references accounts (id),\ncredit_account_id int references accounts (id),\namount            bigint\n);\n</code></pre> <p>Importantly, accounts may be closed at some point. After the closure, new transfers must not occur.</p> <p>Let's create some accounts:</p> <pre><code>insert into accounts (id)\nvalues (1),\n(2);\n</code></pre> <p>It is only natural to employ serializable transaction for modelling financial domain. Let's start moving the money.</p> <pre><code>-- [[T0: first transaction]]\nbegin transaction isolation level serializable;\n--- Transfer some more money, check that the account is not closed \nwith allowed_accounts as (select *\nfrom accounts a\nwhere closed_on is null)\ninsert\ninto account_transfers (debit_account_id, credit_account_id, amount)\nselect id, 2, 100\nfrom allowed_accounts\nwhere id = 1;\n--- Now there's a transfer in `account_transfers`\n</code></pre> <p>Without commiting this transaction, we now execute another transaction that closes the account:</p> <pre><code>--- [[T1: another transaction]]\nbegin transaction isolation level serializable;\nupdate accounts\nset closed_on = statement_timestamp()\nwhere id = 1;\ncommit;\n</code></pre> <p>And only then we commit the original transaction:</p> <pre><code>--- first[[T0]]\n--- Wait for some time \u2013 doing something important\nselect pg_sleep(5);\n--- Done!\ncommit;\n</code></pre> <p>What happened here?</p> <p>Both transaction committed successfully, but if we look closely, we'll see that for practical reasons, we have a transfer recorded after the account was closed. The administrator closed the account, saw the response but after that, a new transfer appeared. Now, we have a closed account with a non-zero balance.</p> <p>Is something wrong with serializable transactions? Well, no. They simply guarantee a serial order of execution. Not necessarily the one that was observed.</p> <p>If we redo the same with linearized transactions:</p> <pre><code>-- [[T0: first transaction]]\nbegin transaction isolation level serializable;\n--- Linearize\nselect omni_txn.linearize();\n--- Transfer some more money, check that the account is not closed \nwith allowed_accounts as (select *\nfrom accounts a\nwhere closed_on is null)\ninsert\ninto account_transfers (debit_account_id, credit_account_id, amount)\nselect id, 2, 100\nfrom allowed_accounts\nwhere id = 1;\n--- Now there's a transfer in `account_transfers`\n</code></pre> <p>And then the other transaction:</p> <pre><code>--- [[T1: another transaction]]\nbegin transaction isolation level serializable;\n--- Linearize\nselect omni_txn.linearize();\n--- Close the account\nupdate accounts\nset closed_on = statement_timestamp()\nwhere id = 1;\ncommit;\n--- ERROR:  linearization failure\n--- DETAIL:  transaction 747 has a predicate lock on `accounts`\n</code></pre> <p>Now, we observed a serialization linearization failure! In this particular case, we observed that another transaction already tried to read accounts (to see if the account was closed) and, out of abundance of caution, we should retry or fail.</p> <p>And we can now commit the first one!</p> <pre><code>--- first[[T0]]\n--- Wait for some time \u2013 doing something important\nselect pg_sleep(5);\n--- Done!\ncommit;\n</code></pre> <p>The above example is not representative of a realistic system, but is only meant to illustrate want kind of conflicts one can guard for. In this particular example, it shows how it prevented the invalid state of a closed account with a balance.</p>"},{"location":"omni_txn/linearize/#quick-start","title":"Quick start","text":"<p>To linearize, you must be in a serializable transaction first. After that, all you need to do is invoke the following function:</p> <pre><code>select omni_txn.linearize();\n-- to check if we're in a linearized transaction\nselect omni_txn.linearized();\n--#&gt; t\n</code></pre> <p>It will make current transaction linearized. It will start to intercept all mutating statements like INSERT, UPDATE, DELETE, and MERGE.</p> <p>Should a linearization failure occur, it will raise a serialization error exception with particular details of the failure.</p> <p>This is compatible with <code>omni_txn.retry</code> primitive, allowing to build effective mechanisms for handling such constraints.</p>"},{"location":"omni_txn/retry/","title":"Transaction Retry","text":"<p>When using serializable transactions, it's often necessary to employ a retry strategy in case of serialization failure. The algorthms are fairly typical, so repeating them manually doesn't always make a lot of sense. <code>omni_txn</code> provides <code>retry</code> procedure to handle such typical cases.</p> Parameter Type Description stmts text Statement(s) to execute. Multiple statements separated by semicolon. max_attempts int Max number of times to retry. 0 means no retries. 10 by default. repeatable_read boolean Use <code>REPEATABLE READ</code> instead of <code>SERIALIZABLE</code>. False by default. collect_backoff_values boolean Collect actual backoff values for inspection. False by default. params record A record of parameters to pass to the statement. NULL by default linearize boolean If a transaction should be linearized (experimental). False by default."},{"location":"omni_txn/retry/#retry-attempt","title":"Retry attempt","text":"<p>There is a helper function <code>omni_txn.current_retry_attempt()</code> that provides retry attempt during the <code>retry()</code> call. 0 stands for the first run, 1 for the first retry, etc.</p>"},{"location":"omni_txn/retry/#example","title":"Example","text":"<p>Let's consider the following schema:</p> <pre><code>create table inventory\n(\nid           serial primary key,\nproduct_name text,\nquantity     int\n);\ninsert into inventory (product_name, quantity)\nvalues ('Widget', 100);\n</code></pre> <p>Now, if we have these two simultaneous transactions happening, the second one may have committed first:</p> <pre><code>--- Transaction (1)\nbegin;\nselect quantity\nfrom inventory\nwhere product_name = 'Widget';\n--- and here (2) will happen\nupdate inventory\nset quantity = quantity + 20\nwhere product_name = 'Widget';\ncommit;\n-- ERROR: could not serialize access due to read/write dependencies among transactions\n--- Transaction (2)\nbegin;\nupdate inventory\nset quantity = quantity - 10\nwhere product_name = 'Widgert';\ncommit;\n</code></pre> <p>If we use <code>omni_txn.retry</code>, the failed transaction can be driven to completion:</p> <pre><code>--- (1)\ncall omni_txn.retry($$\nselect quantity from inventory where product_name = 'Widget';\nupdate inventory set quantity = quantity + 20\n       where product_name = 'Widget'\n$$);\n--- (2)\ncall omni_txn.retry($$\nupdate inventory set quantity = quantity - 10\n       where product_name = 'Widgert'\n$$);\n</code></pre>"},{"location":"omni_txn/retry/#parameterized-statements","title":"Parameterized statements","text":"<p>Statement(s) passed to <code>omni_txn.retry</code> can be parameterized with the <code>params</code> argument:</p> <pre><code>call omni_txn.retry($$ insert into tab values ($1) $$, params =&gt; row (1));\n</code></pre>"},{"location":"omni_txn/retry/#debugging","title":"Debugging","text":"<p><code>omni_txn.retry</code> will cache prepared statement plans for every new statement provided. To see the list of currently cached planned statements, query <code>omni_txn.retry_prepared_statements</code> view. If you want to reset the cache, query <code>select omni_txn.reset_retry_prepared_statements()</code>.</p>"},{"location":"omni_types/function_signature_types/","title":"Function Signature Types","text":"<p>Function signature types are essentially a way to type functions with a specific arguments and return type signature. Whereas <code>regproc</code> and <code>regprocedure</code> denote that the type is a function or a procedure, the type itself does not convey its signature. This limits their usefulness.</p> <p>Function signature types, on the other hand, can be used to call functions that match the signature.</p>"},{"location":"omni_types/function_signature_types/#defining-a-function-signature-type","title":"Defining a function signature type","text":"<p>To define such a type, use <code>omni_types.function_signature_type(name, ...signature)</code>:</p> <pre><code>select omni_types.function_signature_type('sig', 'text', 'int')\n</code></pre> <p>In the above example, it will define type <code>sig</code> that denotes a function that takes <code>text</code> and returns <code>int</code> (the last element in the variadic <code>signature</code> argument is the return type)</p> Parameter Type Description name name Name of the newly created type signature variadic regtype Signature of the function. Last value is the return type <p>Calling the function with the same arguments will return the same type without attempting to recreate it, if the signatures match. Otherwise, an error will occur.</p>"},{"location":"omni_types/function_signature_types/#defining-a-signature-from-a-prototype","title":"Defining a signature from a prototype","text":"<p>One can also define a function signature type by using an existing function as a prototype with <code>omni_types.function_signature_type(name, function)</code>:</p> <pre><code>select omni_types.function_signature_type_of('sig', 'length(text)')\n</code></pre> Parameter Type Description name name Name of the newly created type func text Name (<code>pg_backend_pid</code>) or argument signature (<code>length(text)</code>) of the function"},{"location":"omni_types/function_signature_types/#casting-to-a-function-signature-type","title":"Casting to a function signature type","text":"<p>With the type defined, one can cast a function name into it. It will return a <code>sig</code> type successfully if it matches:</p> <pre><code>select 'length'::sig\n</code></pre> <p>If no function is matching the signature captured by the type, this will fail with an error. If this is undesirable, <code>&lt;TYPE&gt;_conforming_function(text)</code> can be used instead:</p> <pre><code>with funcs as (select sig_confirming_function(name::text) as f from names)\nselect funcs\nwhere f is not null;\n</code></pre>"},{"location":"omni_types/function_signature_types/#calling-a-function","title":"Calling a function","text":"<p>Function signature types can be called (and it is one of its primary benefits!) by using an auto-generated <code>call_&lt;NAME&gt;</code> function:</p> <pre><code>select call_sig('length', 'hello')\n-- returns 5 as this is what `length(text)` would return\n</code></pre>"},{"location":"omni_types/sum_types/","title":"Sum types","text":""},{"location":"omni_types/sum_types/#sum-types","title":"Sum Types","text":"<p>Sum types (also known as tagged unions, or enums) is a type that allows to hold a value that could take on several different types that are known ahead of time.</p> <p>In Postgres context, this allows one to return values of different types in a single query column, or store different values in a column where maintaining separate columns or tables is excessive.</p>"},{"location":"omni_types/sum_types/#defining-a-sum-type","title":"Defining a sum type","text":"<p>One can define it using <code>omni_types.sum_type</code> function, passing the intended type name and the list of variant types.</p> <p>Below, let's create a unified geometric type1:</p> <pre><code>omni_types=# select omni_types.sum_type('geom', 'point', 'line', 'lseg', 'box', 'path', 'polygon', 'circle');\nsum_type\n----------\ngeom\n(1 row)\n</code></pre> <p>We can now see it's been created:</p> <pre><code>omni_types=# \\dT geom\nlist of data types\nschema | name | Description\n--------+------+-------------\npublic | geom |\n(1 row)\nomni_types=# table omni_types.sum_types;\noid  |                 variants\n-------+-------------------------------------------\n16397 | {point,line,lseg,box,path,polygon,circle}\n(1 row) </code></pre>"},{"location":"omni_types/sum_types/#textual-representation","title":"Textual representation","text":"<p>Sum type can be initialized using textual representatin, with the variant name used to indicate the type:</p> <pre><code>omni_types=# select 'point(10,10)'::geom;\ngeom\n----------------\npoint((10,10))\n(1 row)\n</code></pre> <p>By the virtue of seeing the above output, we know that it also converts back to a textual representation using the underlying variant's representation.</p>"},{"location":"omni_types/sum_types/#conversion-and-casting","title":"Conversion and casting","text":"<p>Sum types can be casted from and to their variants.</p> <pre><code>omni_types=# select '&lt;(10,10),10&gt;'::circle::geom;\ngeom\n----------------------\ncircle(&lt;(10,10),10&gt;)\n(1 row)\nomni_types=# select '&lt;(10,10),10&gt;'::circle::geom::circle;\ncircle\n--------------\n&lt;(10,10),10&gt;\n(1 row)\n</code></pre> <p>They can also be converted using functions following the pattern of <code>&lt;type&gt;_from_&lt;type&gt;</code>:</p> <pre><code>omni_types=# select geom_from_point('10,10');\ngeom_from_point\n-----------------\npoint((10,10))\n(1 row)\nomni_types=# select point_from_geom(geom_from_point('10,10'));\npoint_from_geom\n-----------------\n(10,10)\n(1 row)\n</code></pre> <p>If one attempts to cast or convert to a wrong variant, <code>null</code> will be returned:</p> <pre><code>omni_types=# select '&lt;(10,10),10&gt;'::circle::geom::point;\npoint\n-------\nnull\n(1 row)\nomni_types=# select point_from_geom('&lt;(10,10),10&gt;'::circle::geom);\npoint_from_geom\n-----------------\nnull\n(1 row)\n</code></pre> Caveat: casting domains <p>Due to the way domains work, casting is impossible as they are rather thin layers over their base types.</p> <p>That being said, the functions described above can be used to accomplish the same:</p> <pre><code>omni_types=# create domain my_point as point;\nCREATE DOMAIN\nomni_types=# select omni_types.sum_type('my_geom','my_point');\nsum_type\n----------\nmy_geom\n(1 row)\nomni_types=# select my_geom_from_my_point('1,1');\nmy_geom_from_my_point\n-----------------------\nmy_point((1,1))\n(1 row)\nomni_types=# select my_point_from_my_geom(my_geom_from_my_point('1,1'));\nmy_point_from_my_geom\n-----------------------\n(1,1)\n(1 row)\n</code></pre>"},{"location":"omni_types/sum_types/#retrieving-the-variant-type","title":"Retrieving the variant type","text":"<p>One can determine the type of the variant to advise further processing:</p> <pre><code>omni_types=# select omni_types.variant('point(10,10)'::geom);\nvariant\n---------\npoint\n(1 row)\n</code></pre>"},{"location":"omni_types/sum_types/#changing-the-variant-type","title":"Changing the variant type","text":"<p>Sometimes it may be desirable to change the definition of a sum type. In most cases, it would be prudent to define a new type and migrate to it. However, this may be undesirable to due involved complexity. Luckily, under certain constraints, variant types can be changed:</p> <ul> <li>Only adding new variants is permitted</li> <li>For fixed-size sum types (those not containing variable-sized variants), the size of the new variant may not be larger   than that of the largest existing variant. 2</li> </ul> <pre><code>select omni_types.add_variant('geom', 'my_box');\n</code></pre>"},{"location":"omni_types/sum_types/#indexing","title":"Indexing","text":"<p>Sum type creation will attempt to create hashing and comparison operators if all the underlying variants support these operations. </p> <ol> <li> <p>PostGIS defines it is own <code>geometry</code> type. Our definition is used to showcase a generalized approach.\u00a0\u21a9</p> </li> <li> <p>This is done so that Postgres would not try to read existing values using an updated, larger size, which is erroneous.\u00a0\u21a9</p> </li> </ol>"},{"location":"omni_var/variables/","title":"Variables","text":"<p><code>omni_var</code> extension provides functionality for storing typed information in a transactional (and sub-transactional) and session scopes.</p> <p>When used in a transactional context, values' lifetimes are bound by enclosing transactions (and sub-transactions), whereas session variables persist for the duration of the session.</p> <p>This is most useful to maintain information across multiple queries in the transaction, particularly with RLS (Row Level Security) policies in mind.</p>"},{"location":"omni_var/variables/#setting-a-variable","title":"Setting a variable","text":"<p>Within a transaction's (session's, or statement's) context, one can set a named variable with its type specified through the type of the value:</p> <pre><code>select omni_var.set('my_variable', true)\n-- or, for session\nselect omni_var.set_session('my_variable', true)\n-- or, for statement\nselect omni_var.set_statement('my_variable', true)\n</code></pre> <p>This code above sets a boolean-typed variable called <code>my_variable</code>. In cases when the type can't be figured out, type casting comes to the rescue:</p> <pre><code>select omni_var.set('text_variable', 'value'::text)\n</code></pre> <p>The last set variable value and type are set until the end of the current transaction boundary.</p> <p>Both value and the type of the variable can be changed by subsequent calls to <code>set</code></p>"},{"location":"omni_var/variables/#getting-a-variable","title":"Getting a variable","text":"<p>In order to get a variable from the appropriate context, one needs to specify a default value with a type in order to get a value:</p> <pre><code>select omni_var.get('my_variable', false)\n-- or, for session\nselect omni_var.get_session('my_variable', false)\n-- or, for statement\nselect omni_var.get_statement('my_variable', false)\n</code></pre> <p>The above will return the value of <code>my_variable</code> or <code>false</code> if it is not found.</p> <p>Will the default value be returned if variable is set to <code>null</code>?</p> <p>No, if <code>set</code> was used to set a <code>null</code> value, <code>get</code> will  return <code>null</code>.</p> <p>If a mismatching type information is passed to <code>get</code>, <code>get</code> will raise an error indicating the mismatching types in details.</p> <pre><code>begin;\nselect omni_var.set('var', 1::int);\nselect omni_var.get('var', false);\n-- ERROR:  type mismatch\n-- DETAIL:  expected integer, got boolean\n</code></pre>"},{"location":"omni_vfs/reference/","title":"omni_vfs","text":"<p>This extension provides a unified Virtual File System (VFS) API for Postgres to interact with different file systems regardless of their backends.</p> <p>This approach allows interchangeable backends in the following scenarios:</p> <ul> <li>Interacting with files in development environment</li> </ul> <p>This enables a smooth development experience that doesn't require moving data from the filesystem to the database, like serving static files, picking up migrations, etc.</p> <ul> <li>Retrieving files from a Postgres-backed Git repositories</li> </ul> <p>This can facilitate streamline deployment rollouts as migrations and static files can be retrieved using the same API.</p> <ul> <li>Interacting with remote storages</li> </ul> <p>A lot of applications deal with remote storages like S3 or Google Cloud Storage. This interface allows using local file system when testing and a real one in staging and production, without changing anything.</p> <p>Work in progress</p> <p>This extension's API is minimalistic at this time and does not support a number of scenarios. For example, there are no writing capabilities, any form of streaming, etc.</p> <p>It is intended that this functionality will be implemented. You can also help by contributing or funding the development of features that you need.</p>"},{"location":"omni_vfs/reference/#example","title":"Example","text":"<p>The following query:</p> <pre><code>with\nfs as (select omni_vfs.local_fs('/home/omni/dev/omnigres/omnigres/extensions/omni_vfs') as fs),\nentries as (select fs, (omni_vfs.list(fs, '')).* from fs)\nselect\nentries.name,\nentries.kind,\n(omni_vfs.file_info(fs, '/' || entries.name)).*\nfrom\nentries;\n</code></pre> <p>Results in:</p> name kind size created_at accessed_at modified_at CMakeLists.txt file 429 2023-06-08 14:10:18.742915 2023-06-08 14:10:19.407029 2023-06-08 14:10:18.742915 mkdocs.yml file 50 2023-06-08 14:10:18.743315 2023-06-08 14:10:19.3241 2023-06-08 14:10:18.743315 omni_vfs.h file 229 2023-06-08 14:10:18.743582 2023-06-08 14:10:19.407321 2023-06-08 14:10:18.743582 tests dir 96 2023-06-08 14:10:18.743633 2023-06-08 14:10:20.495602 2023-06-08 14:10:18.743633 docs dir 96 2023-06-08 17:24:37.978643 2023-06-08 17:24:39.164254 2023-06-08 17:24:37.978643 local_fs.c file 9371 2023-06-08 14:39:41.67565 2023-06-08 14:40:18.467411 2023-06-08 14:39:41.67565 README.md file 12 2023-06-08 14:10:18.743 2023-06-08 14:10:19.407083 2023-06-08 14:10:18.743 omni_vfs--0.1.sql file 3073 2023-06-08 17:10:55.278702 2023-06-08 17:11:04.599535 2023-06-08 17:10:55.278702 omni_vfs.c file 347 2023-06-08 14:10:18.743496 2023-06-08 14:10:19.40728 2023-06-08 14:10:18.743496"},{"location":"omni_vfs/reference/#api","title":"API","text":""},{"location":"omni_vfs/reference/#omni_vfs_types_v1file-type","title":"<code>omni_vfs_types_v1.file</code> type","text":"<p>Describes a file entry.</p> Field Type Description name <code>text</code> File name kind <code>omni_vfs_types_v1.file_kind</code> File kind (<code>file</code>, <code>dir</code>) 2"},{"location":"omni_vfs/reference/#omni_vs_apifile_info-type","title":"<code>omni_vs_api.file_info</code> type","text":"<p>Describes file meta information.</p> Field Type Description size <code>bigint</code> File size created_at <code>timestamp</code> File creation time (if available) accessed_at <code>timestamp</code> File access time (if available) modified_at <code>timestamp</code> File modification time (if available) kind <code>omni_vfs_types_v1.file_kind</code> File kind (<code>file</code>, <code>dir</code>) 2"},{"location":"omni_vfs/reference/#omni_vfslist","title":"<code>omni_vfs.list()</code>","text":"<p>Lists a directory or a single file.</p> Parameter Type Description fs Filesystem type Filesystem path <code>text</code> Path to list. If it is a single file, returns that file fail_unpermitted <code>bool</code> Raise an error if directory can't be open. <code>true</code> by default. <p>Returns a set of <code>omni_vfs_types_v1.file</code> values.</p>"},{"location":"omni_vfs/reference/#omni_vfslist_recursively","title":"<code>omni_vfs.list_recursively()</code>","text":"<p>This is a helper function implemented for all backends that lists all files recursively.</p> Parameter Type Description fs Filesystem type Filesystem path <code>text</code> Path to list. If it is a single file, returns that file max <code>bigint</code> Limit the number of files to be returned. No limit by default. <p>Returns a set of <code>omni_vfs_types_v1.file</code></p> <p>Use caution if the directory might contain a lot of files</p> <p>If there are a lot of files, this function will use a lot of memory and will take a long time. To safeguard against this, use of <code>max</code> parameter is strongly recommended.</p> <p>One of the reasons why this function has a long name is to force its users to use it carefully and sparingly.</p>"},{"location":"omni_vfs/reference/#omni_vfsfile_info","title":"<code>omni_vfs.file_info()</code>","text":"<p>Provides file information (similar to POSIX <code>stat</code>)</p> Parameter Type Description fs Filesystem type Filesystem path <code>text</code> Path to the file <p>Returns a value of the <code>omni_vfs_types_v1.file_info</code> type.</p> <p>If file does not exist, returns <code>null</code> as there no information to be retrieved about it. In all other cases expected to raise an exception.</p>"},{"location":"omni_vfs/reference/#omni_vfsread","title":"<code>omni_vfs.read()</code>","text":"<p>Reads a chunk of the file.</p> Parameter Type Description fs Filesystem type Filesystem path <code>text</code> Path to the file file_offset <code>bigint</code> Offset to read at. Defaults to <code>0</code>. chunk_size <code>bigint</code> Number of bytes to read. By default, tries to read to the end 1. <p>Returns a <code>bytea</code> value</p>"},{"location":"omni_vfs/reference/#omni_vfswrite","title":"<code>omni_vfs.write()</code>","text":"<p>Reads a chunk of the file.</p> Parameter Type Description fs Filesystem type Filesystem path <code>text</code> Path to the file content <code>bytea</code> Bytes to write create_file <code>boolean</code> Create a file if it does not exist. <code>false</code> by default. append <code>boolean</code> Append file. <code>false</code> by default. <p>Returns the number of bytes written, as <code>bigint</code>.</p>"},{"location":"omni_vfs/reference/#backends","title":"Backends","text":"<p>Currently, omni_vfs provides the following backends:</p>"},{"location":"omni_vfs/reference/#omni_vfslocal_fs-local-file-system","title":"<code>omni_vfs.local_fs</code> (local file system)","text":"<p>This backend can be created by invoking <code>omni_vfs.local_fs(mount)</code>, where <code>mount</code> is the directory that will be mounted by the backend. No access outside of this directory will be permitted. The function returns <code>omni_vfs.local_fs</code> type which only contains an identifier of the instance that references <code>omni_vfs.local_fs_mounts</code> table.</p> <p>Who can access the filesystems?</p> <p><code>omni_vfs.local_fs_mounts</code> has row-level security enabled, allowing finer tuning of access to mounts and modification of the mounts with policies. Such policies can be used to determine under which conditions mounting of new directories is possible, and which mounts can be accessed under given conditions.</p>"},{"location":"omni_vfs/reference/#omni_vfstable_fs-table-backed-file-system","title":"<code>omni_vfs.table_fs</code> (table backed file system)","text":"<p>This backend can be created by invoking <code>omni_vfs.table_fs('fs')</code>, where <code>fs</code> is the name of the filesystem. The function returns <code>omni_vfs.table_fs</code> type which only contains an identifier of the instance that references <code>omni_vfs.table_fs_filesystems</code> table.</p> <p>There are two tables for this backend:</p> <ul> <li> <p><code>omni_vfs.table_fs_files</code> for storing filesystem id, filename, kind and omni_vfs(<code>update</code> queries not allowed).</p> </li> <li> <p><code>omni_vfs.table_fs_file_data</code> for storing the data and timestamps of <code>file</code> kind files.</p> </li> </ul>"},{"location":"omni_vfs/reference/#file-operation-queries","title":"File operation queries","text":"<ul> <li> <p>The following query creates an entry for sample.txt file in <code>omni_vfs.table_fs_files</code> in <code>fs</code> table_fs filesystem. There is no need to create parent directories, they will be created automatically if it doesn't exist. <pre><code>insert into omni_vfs.table_fs_files (filesystem_id, filename, kind)\nvalues ((omni_vfs.table_fs('fs')).id, '/dir/sample.txt', 'file');\n</code></pre></p> </li> <li> <p>To associate data with the file created above run the following query. It creates an entry in <code>omni_vfs.table_fs_file_data</code>. A utility function named <code>omni_vfs.table_fs_file_id</code> is provided to obtain file_id given a table_fs filesystem and filename. Only a single data entry can be associated with a given file. <pre><code>insert into omni_vfs.table_fs_file_data (file_id, data)\nvalues\n(\nomni_vfs.table_fs_file_id(omni_vfs.table_fs('fs'), '/dir/sample.txt'),\n'hello world'::bytea\n);\n</code></pre></p> </li> <li> <p>To update and delete the associated data of a file run the following queries: <pre><code>update omni_vfs.table_fs_file_data\nset\ndata = 'new data'::bytea\nwhere\nfile_id = omni_vfs.table_fs_file_id(omni_vfs.table_fs('fs'), '/dir/sample.txt');\ndelete from omni_vfs.table_fs_file_data\nwhere\nfile_id = omni_vfs.table_fs_file_id(omni_vfs.table_fs('fs'), '/dir/sample.txt');\n</code></pre></p> </li> <li> <p>To delete the file entry run the following query. It only succeeds if it has no associated data entry. <pre><code>delete from omni_vfs.table_fs_files\nwhere\nid = omni_vfs.table_fs_file_id(omni_vfs.table_fs('fs'), '/dir/sample.txt');\n</code></pre></p> </li> </ul> <p>The API described above works for <code>omni_vfs.table_fs</code> files as well. It is recommended to use those to list and read the files to get accurate access timestamp.</p> <p>Directory listing performance</p> <p>Although <code>omni_vfs.table_fs</code> can handle millions of files, it is recommended not to have more than few hundred files in one single directory to ensure optimal listing performance.</p>"},{"location":"omni_vfs/reference/#omni_vfsremote_fs-remote-file-system","title":"<code>omni_vfs.remote_fs</code> (remote file system)","text":"<p>Remote filesystem takes a connection string (just like <code>dblink</code> does) and a snippet of SQL that defines a filesystem remotely:</p> <pre><code>select omni_vfs.remote_fs('dbname=otherdb host=127.0.0.1', $$omni_vfs.local_fs('/path')$$)\n</code></pre> <p>All normal VFS operations called over this filesystem are proxied to that remote connection.</p> <p>Performance considerations</p> <p>At this time, connections are not reused, and every time a call is made, a new connection is established.</p>"},{"location":"omni_vfs/reference/#runtime-backend-dispatch","title":"Runtime backend dispatch","text":"<p>In a real application, to make it possible to use different backends, one can create a file system \"factory\" function dependent on the environment they are in. For example, when in development, it can look like this:</p> <pre><code>create function app_filesystem() returns omni_vfs.local_fs\nas\n$$\nselect omni_vfs.local_fs('app')\n$$ language sql;\n</code></pre> <p>And in production, a function with the same name will return a different kind of file system backend.</p> <ol> <li> <p>Chunk size is currently limited to 1GB.\u00a0\u21a9</p> </li> <li> <p>Other file types (such as sockets) are not currently considered to be of practical use and will be reported as <code>file</code>. This may change in the future.\u00a0\u21a9\u21a9</p> </li> </ol>"},{"location":"omni_web/cookies/","title":"Cookies","text":""},{"location":"omni_web/cookies/#getting-cookies","title":"Getting cookies","text":"<p>One can use <code>omni_web.cookies(text)</code> to convert a <code>Cookie</code> header string  into a table of key/value pairs of cookies.</p> <pre><code>omni_web=# select * from omni_web.cookies('PHPSESSID=298zf09hf012fh2; csrftoken=u32t4o3tb3gg43; _gat=1'::text);\nname    |      value      -----------+-----------------\nPHPSESSID | 298zf09hf012fh2\ncsrftoken | u32t4o3tb3gg43\n_gat      | 1\n(3 rows)\n</code></pre>"},{"location":"omni_web/intro/","title":"Intro","text":"<p>omni_web is a library of functions to be used for dealing with the web stack. It's often used together with omni_httpd.</p>"},{"location":"omni_web/query_strings/","title":"Query Strings","text":""},{"location":"omni_web/query_strings/#parsing-query-strings","title":"Parsing query strings","text":"<p><code>parse_query_string</code> takes a query string:</p> <pre><code>select omni_web.parse_query_string('key=value')\n</code></pre> <p>And returns an array of keys and values:</p> <pre><code> parse_query_string --------------------\n{key,value}\n(1 row)\n</code></pre> <p>To retrieve individual parameters, you can use <code>omni_web.param_get</code> and <code>omni_web.param_get_all</code>:</p> <pre><code>select omni_web.param_get(omni_web.parse_query_string('a=1&amp;a=2'), 'a');\nparam_get -----------\n1\n(1 row)\nselect omni_web.param_get_all(omni_web.parse_query_string('a=1&amp;a=2'), 'a');\nparam_get_all\n-----------\n1\n2\n(1 row)\n</code></pre>"},{"location":"omni_web/uri/","title":"URI","text":""},{"location":"omni_web/uri/#uri-parsing","title":"URI Parsing","text":"<p><code>omni_web</code> provides API for parsing URIs (<code>omni_web.text_to_uri</code>) that is also available through by casting <code>text</code> to <code>omni_web.uri</code>.</p> <pre><code>           select *\nfrom\nomni_web.text_to_uri('http://foo:bar@example.com:8080/path/to/page?query#frag');\n</code></pre> <p>results in</p> Column Value scheme http user_info foo:bar host example.com path path/to/page port 8080 query query fragment frag"},{"location":"omni_web/uri/#urluri-encoding","title":"URL/URI Encoding","text":"<p>Functionality for URL encoding</p>"},{"location":"omni_web/uri/#string-encoding-for-a-url","title":"String encoding for a URL","text":"<p>To encode a string to be safely included as part of a URL:</p> <pre><code>select omni_web.url_encode('Hello World')\n</code></pre> <p>You will get <code>Hello%20World</code></p> <p>To decode and get back to the original string:</p> <pre><code>select omni_web.url_encode('Hello%20World')\n</code></pre>"},{"location":"omni_web/uri/#encoding-a-uri","title":"Encoding a URI","text":"<p>Similar to JavaScript's <code>encodeUri</code>/<code>decodeUri</code>, you can also encode/decode a URI without encoding the \"unreserved marks\":</p> <pre><code>select omni_web.uri_encode('http://hu.wikipedia.org/wiki/S\u00e3o_Paulo')\n</code></pre> <p>The above results in <code>http://hu.wikipedia.org/wiki/S%C3%A3o_Paulo</code></p> <p>A counterpart function to that is <code>uri_decode</code>.</p>"},{"location":"omni_worker/intro/","title":"Introduction","text":"<p><code>omni_worker</code> provides a generalized Postgres worker pool that can execute arbitrary workloads within individual backend contexts. Its architecture allows other extensions to add native-compiled handlers for arbitrary messages. The simplest example of such a handler is a SQL execution handler that takes SQL statements and schedules them to be executed. </p>"},{"location":"omni_worker/sql_handler/","title":"SQL handler","text":"<p><code>omni_worker</code> includes a built-in handler for SQL statement execution. It's configured to include handle SQL messages by default. If you don't want it to be availablel, remove the corresponding entry from the <code>handlers</code> table.</p> <p>The most simple execution form is the one where you pass the SQL statement and let it execute:</p> <pre><code>select omni_worker.sql('sql-stmt')\n</code></pre> <p>This form does not wait for the result of the execution, and immediately returns <code>null</code> upon scheduling the work to be executed.</p>"},{"location":"omni_worker/sql_handler/#executing-with-timeout","title":"Executing with timeout","text":"<p>If you need to wait until the execution has occurred, specify waiting time in milliseconds:</p> <pre><code>select omni_worker.sql('sql-stmt', wait_ms =&gt; 1000)\n</code></pre> <p>This will wait for 1000 milliseconds (1 second). If the execution has been completed, it'll return <code>true</code> if it was successful or <code>false</code> if not. If the execution hasn't been completed, it'll return <code>null</code>.</p>"},{"location":"omni_xml/overview/","title":"Overview","text":"<p><code>omni_xml</code> extension is an XML toolkit that provides barebones  XML-related functionality. It is particularly useful when Postgres is built without XML support or <code>xml2</code> extension.</p> <p>Since Omnigres users may be using different builds of Postgres, we can't rely on the availability of XML support. This extension closes the gap.</p> <p>It is not fully W3C-compliant</p> <p>The underlying library providing XML/XPath functionality is not fully W3C-conformant.</p> <p>In particular, support for the <code>namespace::</code> axis is unavailable.</p>"},{"location":"omni_xml/usage/","title":"Usage","text":""},{"location":"omni_xml/usage/#xpath-querying","title":"XPath querying","text":"<p>One can query an XML document using XPath 1.0 queries using <code>omni_xml.xpath</code> function. The function takes an XML document as <code>text</code> and an XPath query as  <code>text</code>.</p> <p>It returns a table with <code>path</code> (path to the node) and <code>value</code> (node value).</p>"},{"location":"omni_xml/usage/#element","title":"Element","text":"<p>When searching for elements, it will return entire nodes serialized as XML.</p> <pre><code>select * from omni_xml.xpath('&lt;node&gt;value&lt;/node&gt;', '/node')\n</code></pre> <p>Results in:</p> <pre><code> path  |       value        \n-------+--------------------\n /node | &lt;node&gt;value&lt;/node&gt;\n(1 row)\n</code></pre>"},{"location":"omni_xml/usage/#text","title":"Text","text":"<p>When searching for textual data, one can use <code>text()</code> in their queries.</p> <pre><code>select * from omni_xml.xpath('&lt;node&gt;value&lt;/node&gt;', '/node/text()')\n</code></pre> <p>Results in:</p> <pre><code>  path  | value \n--------+-------\n /node/ | value\n(1 row)\n</code></pre>"},{"location":"omni_xml/usage/#namespaces","title":"Namespaces","text":"<p>It is possible to query using an explicit namespace identifier.</p> <pre><code>select * from omni_xml.xpath('&lt;ns:node&gt;value&lt;/ns:node&gt;', '/ns:node')\n</code></pre> <p>Results in:</p> <pre><code>   path   |          value           \n----------+--------------------------\n /ns:node | &lt;ns:node&gt;value&lt;/ns:node&gt;\n</code></pre> <p>Proper namespace support is lacking</p> <p>This is not ideal if the identifier used is unknown ahead of time, but sufficient if used for API response handling when it is typically the same.</p>"},{"location":"omni_yaml/yaml/","title":"YAML","text":"<p>omni_yaml provides rudimentary support for YAML in the form of two functions:</p> <ul> <li><code>omni_yaml.to_json(text)</code> returning <code>json</code>: converts YAML to JSON.</li> <li><code>omni_yaml.to_yaml(json)</code> returning <code>text</code>: converts JSON to YAML.</li> </ul> <p>Why does this extension not support JSONB?</p> <p>At this time, direct support would involve a lot more work than simply emitting JSON in its textual format. Casting to <code>jsonb</code> solves the problem for the time being.</p>"},{"location":"pg_yregress/_install/","title":"Installation","text":"<p><code>pg_yregess</code> is currently developed as part of Omnigres but can be easily built independently of Omnigres (\"out of tree\").</p> <pre><code>git clone https://github.com/omnigres/omnigres\ncd omnigres/pg_yregress\ncmake -B build &amp;&amp; cmake --build build --parallel\n# If you want to install it, too:\nsudo cmake --install build\n</code></pre>"},{"location":"pg_yregress/install/","title":"Installing pg_yregress","text":""},{"location":"pg_yregress/install/#installation","title":"Installation","text":"<p><code>pg_yregess</code> is currently developed as part of Omnigres but can be easily built independently of Omnigres (\"out of tree\").</p> <pre><code>git clone https://github.com/omnigres/omnigres\ncd omnigres/pg_yregress\ncmake -B build &amp;&amp; cmake --build build --parallel\n# If you want to install it, too:\nsudo cmake --install build\n</code></pre>"},{"location":"pg_yregress/intro/","title":"Intro to pg_yregress","text":"<p><code>pg_yregress</code> is a regression testing tool for Postgres.</p> <p>This tool takes original inspiration from <code>pg_regress</code> but addresses some of the issues it has, such as:</p> <ul> <li>Unstructured tests 1</li> <li>Single Postgres instance operation 2</li> <li>Lack of query/test re-use</li> <li>Binary encoding testing</li> <li>Per-query timeouts</li> </ul> <p><code>pg_yregress</code> core idea is to express test cases and setups using YAML files for structuring and comparison. YAML sometimes carries some bad reputation due to being overused in places where it doesn't fit well, as well as somewhat surprising implicit tag resolution scheme results. </p> <p>However, the authors believe that YAML is actually a pretty good fit for the use of grouping queries and expected results. Some features, like anchors and references, are very helpful in succinct representation of tests.</p> <p>pg_yregress is in its early days</p> <p>Not all intended functionality has been implemented, and the one that has been, may suffer from critical bugs. The user experience is rather crude at the moment.</p> <p>None of this is impossible to overcome. Please consider contributing.</p> <ol> <li> <p><code>pg_regress</code> relies on plain text <code>psql</code> session capture and its comparison with the \"baseline\"\u00a0\u21a9</p> </li> <li> <p>This prevents us from testing more complicated scenarios such as replication or database links.\u00a0\u21a9</p> </li> </ol>"},{"location":"pg_yregress/usage/","title":"Usage of pg_yregress","text":"<p>Despite being inspired by <code>pg_regress</code>, <code>pg_yregress</code> is not in any way compatible with <code>pg_regress</code> as it has a different workflow and an execution model.</p>"},{"location":"pg_yregress/usage/#installation","title":"Installation","text":"<p><code>pg_yregess</code> is currently developed as part of Omnigres but can be easily built independently of Omnigres (\"out of tree\").</p> <pre><code>git clone https://github.com/omnigres/omnigres\ncd omnigres/pg_yregress\ncmake -B build &amp;&amp; cmake --build build --parallel\n# If you want to install it, too:\nsudo cmake --install build\n</code></pre>"},{"location":"pg_yregress/usage/#basic-workflow","title":"Basic workflow","text":"<p>This tool uses YAML to describe tests. Let's start with <code>test.yml</code>:</p> <pre><code>tests:\n- name: simple\nquery: select 1 as value\n</code></pre> <p>The above specification will test the <code>select 1...</code> query be executing it and ensuring it was successful. The test will be executed against a managed instance1 of Postgres.</p> <p>Running <code>pg_yregress</code> against this file will produce output adhering to TAP, Test Anything Protocol for human or machine consumption.</p> <pre><code>$ pg_yregress test.yml\nTAP version 14\n1..3\n# Initializing instances\nok 1 - initialize instance `default`\n# Done initializing instances\nok 2 - simple\n</code></pre> <p>As the tool will evolve, we might add other ways to get this information.</p> The above test can be further simplified <p>There's a reduced syntax for checking whether query is successful without naming it. You can even drop the <code>query</code> key and simply write the query as a test:</p> <pre><code>- select 1 as value\n</code></pre> <p>Nothing very interesting. Now, let's amend this test to test the result of this query. For a moment, let's assume we don't know what results are to be returned.</p> <pre><code>tests:\n- name: simple\nquery: select 1 as value\nresults: [ ] # (1)\n</code></pre> <ol> <li>Here we specify an empty result set</li> </ol> <p>Re-running the tool will output something different:</p> <pre><code>$ pg_yregress test.yaml\n...\ntests:\n- name: simple\n  query: select 1 as value\n  results:\n  - value: 1\n</code></pre> <p>As you can see, it shows what test specification should contain in order to pass. You can also observe, that <code>pg_yregress</code> exited with a non-zero error code.</p> <p>For better visibility into changes, YAML-specific diff tools can be of use, such as dyff. To make it easier to use these tools, <code>pg_yregress</code> takes an additional optional argument where it will output the updated specification instead of stdout.</p> <p>Copying <code>results</code> to the original specification will make <code>pg_yregress</code> return zero again (thus, signal that the specification is executed as expected.)</p> <p>Tip</p> <p>Every <code>query</code> item is executed within an individual transaction that is rolled back at the end to ensure it does not interfere with other items.</p>"},{"location":"pg_yregress/usage/#handling-json-and-jsonb","title":"Handling JSON and JSONB","text":"<p><code>pg_yregress</code> supports JSON types.</p> <ul> <li>If a supplied query parameter is a mapping or a sequence, it will be automatically converted to JSON strings</li> <li>If result value is of a JSON type, it will be converted to YAML value.</li> </ul> <pre><code>- name: json and jsonb params\nquery: select $1::json as json, $2::jsonb as jsonb\nparams:\n- hello: 1\n- hello: 2\nresults:\n- json:\nhello: 1\njsonb:\nhello: 2\n- name: json and jsonb results\nquery: select json_build_object('hello', 1), jsonb_build_object('hello', 2)\nresults:\n- json_build_object:\nhello: 1\njsonb_build_object:\nhello: 2\n</code></pre>"},{"location":"pg_yregress/usage/#testing-for-failures","title":"Testing for failures","text":"<p>You can simply test that a certain query will fail:</p> <pre><code>tests:\n- name: error\nquery: selec 1 as value\nerror: true\n</code></pre> <p>The above will succeed, since we have set <code>error</code> to <code>true</code>.</p> <p>But how we can test against specific error message? This can be done by setting <code>error</code> to a more specific value:</p> <pre><code>tests:\n- name: error\nquery: selec 1 as value\nerror:\nseverity: ERROR\nmessage: syntax error at or near \"selec\"\n</code></pre> <p>The above will pass as this is the error this test fails with.</p> <p>Multiple forms of <code>error</code> report are supported:</p>"},{"location":"pg_yregress/usage/#error-message","title":"Error message","text":"<pre><code>error: syntax error at or near \"selec\"\n</code></pre> <p>When passed as a scalar value, error message will be compared with the provided one.</p>"},{"location":"pg_yregress/usage/#full-error-form","title":"Full error form","text":"<pre><code>error:\nseverity: ERROR\nmessage: &lt;error message&gt;\n# Optional\ndetail: &lt;error details&gt;\n</code></pre> <p>In this form, both severity and message can be specified.</p>"},{"location":"pg_yregress/usage/#negative-tests","title":"Negative tests","text":"<p>A test can be marked negative when it should fail if the test itself passes. This is useful when testing scenarios where something specific should not happen.</p> <pre><code>- name: 'string' should not be returned\nquery: select my_fun() as result\nresults:\n- result: string\nnegative: true\n</code></pre> <p>The example is slightly contrived as we can test the assumption in the query itself, but at times it is easier or clearer to have this specified as such \"negative test\".</p>"},{"location":"pg_yregress/usage/#multi-step-tests","title":"Multi-step tests","text":"<p>Some test inolve more than one query and we need to check for more than just the final result, so simply executing all statements and queries delimited by a semicolon wouldn't be great.</p> <p>For this use-case, instead of using <code>query</code>, use <code>steps</code>:</p> <pre><code>tests:\n- name: Test\nsteps:\n- query: create table tab as (select generate_series(1,3) as i)\n- query: select * from tab\nresults:\n- i: 1\n- i: 2\n- i: 3\n</code></pre> <p>Tip</p> <p>The entire <code>steps</code> item is executed within an individual transaction and is rolled  back at the end to ensure it does not interfere with other items. Within <code>steps</code>, every item is not wrapped into a transaction and the results of each step are visible  in the next step.</p>"},{"location":"pg_yregress/usage/#grouping-tests","title":"Grouping tests","text":"<p>There are cases when a number of tests that don't need to be executed in the same transaction (like multi-step) but they do form a logical group nevertheless. For example, testing different aspects of a feature, or different inputs on the same function.</p> <p>For this, one can use <code>tests</code>:</p> <pre><code>tests:\n- name: fib\ntests:\n- query: select fib(0)\nresults:\n- fib: 0\n- query: select fib(1)\nresults:\n- fib: 1\n- query: select fib(2)\nresults:\n- fib: 1\n- query: select fib(3)\nresults:\n- fib: 2\n</code></pre>"},{"location":"pg_yregress/usage/#committing-tests","title":"Committing tests","text":"<p>By default, all tests are rolled back to ensure clean environment. However, in some cases, tests need to commit (for example, to test deferred constraints).</p> <p>When this is necessary, the <code>commit</code> property of a test should be set to <code>true</code>:</p> <pre><code>- query: insert into table values (...)\ncommit: true\n</code></pre> <p>This can be also used for multi-step tests. If any of the steps is committed but the multi-step test itself isn't, it'll roll back the uncommitted steps.</p>"},{"location":"pg_yregress/usage/#notices","title":"Notices","text":"<p>One can also check their tests for notices:</p> <pre><code>tests:\n- name: notices\nquery: |\ndo $$\nbegin\nraise notice 'test 1';\nraise notice 'test 2';\nend;\n$$ language plpgsql\nnotices:\n- test 1\n- test 2\n</code></pre> <p>One can also check a <code>steps</code>-based test the accumulated sequence of notices (although testing individually in <code>query</code> steps is still possible):</p> <pre><code>tests:\n- name: multi-step notices (individual)\nsteps:\n- query: |\ndo $$\nbegin\nraise notice 'test 1';\nend;\n$$ language plpgsql\nnotices:\n- test 1\n- query: |\ndo $$\nbegin\nraise notice 'test 2';\nend;\n$$ language plpgsql\nnotices:\n- test 2\n</code></pre>"},{"location":"pg_yregress/usage/#binary-format","title":"Binary format","text":"<p>Sometimes there's a need to test binary encoding of types2. <code>pg_yregress</code> allows this to be done by manipulating the <code>binary</code> property of the <code>query</code> test.</p> Value Description <code>true</code> Both <code>params</code> and <code>results</code> are binary <code>params</code> <code>params</code> are binary <code>results</code> <code>results</code> are binary <p>Binary encodings are done using hexadecimal notiation prefixed by <code>0x</code>.</p> <p>This will return results as binary:</p> <pre><code>tests:\n- name: binary format\nquery: select true as value\nbinary: true\nresults:\n- value: 0x01\n</code></pre> <p>And this will return results as characters but take parameters as binary:</p> <pre><code>tests:\n- name: binary format for params\nquery: select $1::bool as value\nbinary: params\nparams:\n- 0x01\nresults:\n- value: true\n</code></pre>"},{"location":"pg_yregress/usage/#skipping-tests","title":"Skipping tests","text":"<p>If a test not meant to be executed, one can use <code>skip</code> directive to suppress its execution. Given a boolean scalar, if it is positive, the test will be skipped. If a negative boolean scalar will be given, it will not be skipped. If any other scalar will be given, it will be used as a reason for skipping the test.</p> <pre><code>tests:\n- name: skip this\nskip: true\n- name: skip this for a reason\nskip: reason\n</code></pre> <p>Skipped tests don't need to have a valid instruction (<code>query</code> or <code>steps</code>).</p> <p>If a skipped test is meant to be executed but shouldn't fail the execution of test suite in case if it fails, <code>todo</code> directive can be used instead of <code>skip</code>.</p> <pre><code>tests:\n- name: WIP\ntodo: true\nquery: select\n</code></pre>"},{"location":"pg_yregress/usage/#resetting-connection","title":"Resetting connection","text":"<p>Sometimes it is useful to reset a connection to the database to test certain behaviors (for example, ensuring that functionality works across different backend instances). For this, <code>reset</code> property can be set to <code>true</code>:</p> <pre><code>tests:\n# ...\n- name: clean slate test\nreset: true\nquery: ...\n</code></pre>"},{"location":"pg_yregress/usage/#running-queries-outside-explicit-transaction-block","title":"Running queries outside explicit transaction block","text":"<p>All the test queries are executed inside an explicit transaction block (by executing <code>BEGIN</code>) to rollback or commit side effects of tests but some queries like <code>CREATE DATABASE</code> fail with <code>CREATE DATABASE cannot run inside a transaction block</code> if executed in a transaction block. To run such queries set <code>transaction</code> property(<code>true</code> by default) to <code>false</code>:</p> <pre><code>- name: create database outside transaction\ntransaction: false\nquery: create database another_db\n</code></pre>"},{"location":"pg_yregress/usage/#connecting-to-another-database","title":"Connecting to another database","text":"<p>To connect to other database in a test set <code>database</code> property to name of the other database</p> <pre><code>- name: connect to different database\ndatabase: another_db\nquery: select current_database()\nresults:\n- current_database: another_db\n</code></pre>"},{"location":"pg_yregress/usage/#configuring-instances","title":"Configuring instances","text":"<p>Tests may have one more instances they run on. By default, <code>pg_yregress</code> will provision one. However, if you want to configure the instance or add more than one, you can use <code>instances</code> configuration which is a mapping of names to the configuration dictionaries:</p> <pre><code>instances:\nconfigured:\n# Can be configured with a mapping\nconfig:\nlog_connections: yes\nconfigured_1:\n# Can be configured with a string using `postgresql.conf` format\nconfig: |\nlog_connections = yes\ndefault:\ninit:\n# Executes a sequence of queries\n- create extension my_extension\n# One instance may be specified as default \ndefault: yes\nother:\ninit:\n- alter system set config_param = '...'\n# Initialization may require restarting the instance\n- restart: true\n</code></pre> <p>Each test will run on a default instance, unless <code>instance</code> property is specified and the name of the instance is referenced.</p> <p>You can also configure an instance with a custom <code>pg_hba.conf</code> file by using <code>hba</code> key:</p> <pre><code>instances:\nconfigured:\nhba: |\nlocal all all trust\nhost all all all trust\n</code></pre> <p>This is useful when tests impose special authentication requirements.</p> <p>You can configure default encoding and locale for databases in an instance by using <code>encoding</code> and <code>locale</code> key:</p> <pre><code>instances:\nconfigured:\nencoding: SQL_ASCII\nlocale: en_US.UTF-8\n</code></pre>"},{"location":"pg_yregress/usage/#single-instance-configuration","title":"Single instance configuration","text":"<p>In case when only one instance is necessary but it needs to be configured, instead of using <code>instances</code> and naming the default instance, one can use <code>instance</code> key instead:</p> <pre><code>instance:\ninit:\n- create extension ltree\n</code></pre>"},{"location":"pg_yregress/usage/#unmanaged-instances","title":"Unmanaged instances","text":"<p>By default, <code>pg_yregress</code> manages Postgres instances itself: provisions the database and its configuration, starts and stops processes. However, it can also be used to run tests against other instances of Postgres operated outside of its own workflow. This can be used for testing functionality or data patterns in an existing database.</p> <p>In order to use it, one has to pass one of the following options:</p> Option Short Description --host -h Host to connect to. Defaults to <code>127.0.0.1</code> if other options are selected. --port -p Port to connect to. Default to <code>5432</code> if not specified. --username -U Username. Defaults to current username. --dbname -d Database name. Defaults to username. --password -W Force to prompt for a password before connecting to the database. --no-password -w Never issue a password prompt. Will attempt to get a password from <code>PGPASSWORD</code> environment variable. <p>For example, this will attempt to connect to a local Postgres instance on port 5432 using <code>omnigres</code> as a database name and a username, prompting for a password:</p> <pre><code>pg_yregress -U omnigres -W tests.yml\n</code></pre> <p>Caveats</p> <p>The following options are not available for unmanaged instances and will make pg_yregress terminate early with a corresponding error message.</p> <ul> <li><code>instance</code> and <code>instances</code> configuration keys</li> <li><code>restart</code> tests</li> <li><code>database</code></li> </ul>"},{"location":"pg_yregress/usage/#configuring-test-suite","title":"Configuring test suite","text":"<p>In certain cases, it may be useful to pass some configuration information to the test suite itself. While it is generally recommended to avoid this, sometimes it's right answer.</p> <p>All test suites receive an implicit <code>env</code> mapping at the root that contains a mapping of all environment variables. Using YAML Path (YPath) notation, one can retrieve configuration specified through environment variables:</p> <pre><code>- name: env\nquery: select $1::text as user\nparams:\n- */env/USER\nresults:\n- user: */env/USER\n</code></pre>"},{"location":"pg_yregress/usage/#named-test-suites","title":"Named test suites","text":"<p>A test suite (the YAML file) can be given a human-readable name using optional <code>name</code> property:</p> <pre><code>name: Core tests\ntests:\n...\n</code></pre> <ol> <li> <p>Postgres instance that is provisioned and deprovisioned by <code>pg_yregress</code> tool without any user involvement.\u00a0\u21a9</p> </li> <li> <p>The encoding that is used by <code>SEND</code> and <code>RECEIVE</code> functions of the type.\u00a0\u21a9</p> </li> </ol>"}]}