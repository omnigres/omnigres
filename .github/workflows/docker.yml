name: Docker

# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

on:
  schedule:
    - cron: '19 18 * * *'
  push:
    branches: [ "master" ]
    # Publish semver tags as releases.
    tags: [ 'v*.*.*' ]
  pull_request:
    branches: [ "master" ]

env:
  # Use docker.io for Docker Hub if empty
  REGISTRY: ghcr.io
  # github.repository as <account>/<repo>
  IMAGE_NAME: ${{ github.repository }}

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

jobs:
  build:

    strategy:
      matrix:
        platform: [ amd64, arm64 ]
        pg: [ 17, 16, 15, 14 ]

    if: github.repository == 'omnigres/omnigres'
    runs-on: ${{ fromJSON('["warp-ubuntu-2404-x64-4x", "warp-ubuntu-2404-arm64-16x"]')[matrix.platform == 'arm64'] }}

    permissions:
      contents: read
      packages: write
      # This is used to complete the identity challenge
      # with sigstore/fulcio when running outside of PRs.
      id-token: write

    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.CI_AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.CI_AWS_SECRET_ACCESS_KEY }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      # Install the cosign tool except on PR
      # https://github.com/sigstore/cosign-installer
    #- name: Install cosign
    #  if: github.event_name != 'pull_request'
    #  uses: sigstore/cosign-installer@v3.1.2
    #  with:
    #    cosign-release: 'v2.2.0'

      # Workaround: https://github.com/docker/build-push-action/issues/461
      - name: Setup Docker buildx
        uses: docker/setup-buildx-action@v2
        with:
          driver-opts: network=host

      # Login against a Docker registry except on PR
      # https://github.com/docker/login-action
      - name: Log into registry ${{ env.REGISTRY }}
        if: github.event_name != 'pull_request'
        uses: docker/login-action@28218f9b04b4f3f62068d7b6ce6ca5b26e35336c
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Log into Docker Hub for increased limits
        if: github.event_name != 'pull_request'
        uses: docker/login-action@28218f9b04b4f3f62068d7b6ce6ca5b26e35336c
        with:
          username: ${{ secrets.DOCKER_USER }}
          password: ${{ secrets.DOCKER_ACCESS_TOKEN }}

      # Extract metadata (tags, labels) for Docker
      # https://github.com/docker/metadata-action
      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@98669ae865ea3cffbcbaa878cf57c20bbf1c6c38
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}

      # Build and push Docker image with Buildx (don't push on PR)
      # https://github.com/docker/build-push-action
      - name: Build and push extra Docker image
        id: build-and-push
        uses: docker/build-push-action@v4
        with:
          context: .
          push: ${{ github.event_name != 'pull_request' }}
          tags: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-extra-${{ matrix.pg }}:${{ github.sha }}-${{ matrix.platform }}-${{ matrix.pg }}
          provenance: false
          labels: ${{ steps.meta.outputs.labels }}
          # Currently using S3 in EU as BuildJet is in the EU and going to the U.S. may be slow
          cache-from: type=gha,url=http://127.0.0.1:49160/
          cache-to: type=gha,url=http://127.0.0.1:49160/
          build-args: |
            BUILD_PARALLEL_LEVEL=4
            PG=${{ matrix.pg }}
          platforms: linux/${{ matrix.platform }}
          target: pg

      - name: Build and push normal Docker image
        id: build-and-push-slim
        uses: docker/build-push-action@v4
        with:
          context: .
          push: ${{ github.event_name != 'pull_request' }}
          tags: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-${{ matrix.pg }}:${{ github.sha }}-${{ matrix.platform }}-${{ matrix.pg }}
          provenance: false
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha,url=http://127.0.0.1:49160/
          cache-to: type=gha,url=http://127.0.0.1:49160/
          build-args: |
            BUILD_PARALLEL_LEVEL=4
            PG=${{ matrix.pg }}
          platforms: linux/${{ matrix.platform }}
          target: pg-slim

      - name: Build and push dev Docker image
        id: build-and-push-dev
        uses: docker/build-push-action@v4
        with:
          context: .
          push: ${{ github.event_name != 'pull_request' }}
          tags: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-dev-${{ matrix.pg }}:${{ github.sha }}-${{ matrix.platform }}-${{ matrix.pg }}
          provenance: false
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha,url=http://127.0.0.1:49160/
          cache-to: type=gha,url=http://127.0.0.1:49160/
          build-args: |
            BUILD_PARALLEL_LEVEL=4
            PG=${{ matrix.pg }}
          platforms: linux/${{ matrix.platform }}
          target: builder

      - name: Build and push omnikube Docker image
        id: build-and-push-omnikube
        uses: docker/build-push-action@v4
        with:
          context: .
          push: ${{ github.event_name != 'pull_request' }}
          tags: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-kube-${{ matrix.pg }}:${{ github.sha }}-${{ matrix.platform }}-${{ matrix.pg }}
          provenance: false
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha,url=http://127.0.0.1:49160/
          cache-to: type=gha,url=http://127.0.0.1:49160/
          build-args: |
            BUILD_PARALLEL_LEVEL=4
            PG=${{ matrix.pg }}
          platforms: linux/${{ matrix.platform }}
          target: omnikube

        #       # Sign the resulting Docker image digest except on PRs.
        #       # This will only write to the public Rekor transparency log when the Docker
        #       # repository is public to avoid leaking data.  If you would like to publish
        #       # transparency data even for private images, pass --force to cosign below.
        #       # https://github.com/sigstore/cosign
        #       - name: Sign the published Docker image
        #         if: ${{ github.event_name != 'pull_request' }}
        #         env:
        #           COSIGN_EXPERIMENTAL: "true"
        #         # This step uses the identity token to provision an ephemeral certificate
        #         # against the sigstore community Fulcio instance.
        #         run: echo "${{ steps.meta.outputs.tags }}" | xargs -I {} cosign sign {}@${{ steps.build-and-push.outputs.digest }}
  manifest:
    strategy:
      matrix:
        pg: [ 17, 16, 15, 14 ]
        flavor: [ "", "-extra", "-dev","-kube" ]

    if: github.event_name != 'pull_request' && github.repository == 'omnigres/omnigres'
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      # Login against a Docker registry except on PR
      # https://github.com/docker/login-action
      - name: Log into registry ${{ env.REGISTRY }}
        uses: docker/login-action@28218f9b04b4f3f62068d7b6ce6ca5b26e35336c
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Extract metadata (tags, labels) for Docker
      # https://github.com/docker/metadata-action
      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@98669ae865ea3cffbcbaa878cf57c20bbf1c6c38
        with:
          images: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}${{ matrix.flavor }}-${{ matrix.pg }}

      - name: Create and push manifest images (rev)
        uses: Noelware/docker-manifest-action@master # or use a pinned version in the Releases tab
        with:
          inputs:
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}${{ matrix.flavor }}-${{ matrix.pg }}:${{ github.sha }}
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}${{ matrix.flavor }}-${{ matrix.pg }}:${{ github.sha }}-amd64-${{ matrix.pg }},${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}${{ matrix.flavor }}-${{ matrix.pg }}:${{ github.sha }}-arm64-${{ matrix.pg }}
          push: true

      - name: Create and push manifest images (latest)
        uses: Noelware/docker-manifest-action@master # or use a pinned version in the Releases tab
        with:
          inputs: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}${{ matrix.flavor }}-${{ matrix.pg }}:latest
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}${{ matrix.flavor }}-${{ matrix.pg }}:${{ github.sha }}-amd64-${{ matrix.pg }},${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}${{ matrix.flavor }}-${{ matrix.pg }}:${{ github.sha }}-arm64-${{ matrix.pg }}
          push: true
