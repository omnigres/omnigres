name: Build

on:
  push:
    # one can merge their branch to test-gh-workflows for testing changes of current workflow before merging them to master
    branches: [ "master", "test-gh-workflows" ]
  pull_request:
    branches: [ "master", "next/*" ]
  schedule:
    - cron: '33 13 * * *'

env:
  CPM_SOURCE_CACHE: ${{ github.workspace }}/cpm_modules

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

jobs:

  build:
    continue-on-error: ${{ matrix.pgver == 'master' }}
    strategy:
      matrix:
        pgver: [ 17, 16, 15, 14, master ]
        os: [ warp-ubuntu-2204-x64-4x, warp-macos-14-arm64-6x ]
        build_type: [Debug, Release]
        exclude:
        - os: warp-macos-14-arm64-6x
          pgver: 16
        - os: warp-macos-14-arm64-6x
          pgver: 15
        - os: warp-macos-14-arm64-6x
          pgver: 14
        - os: warp-macos-14-arm64-6x
          pgver: 13
        - os: warp-macos-14-arm64-6x
          pgver: 12
        - os: warp-macos-14-arm64-6x
          pgver: 11
      fail-fast: false

    runs-on: ${{ matrix.os }}

    timeout-minutes: 20

    steps:

    # Ada URL library requires a relatively modern compiler
    - name: Prepare GCC 13
      if: matrix.os == 'warp-ubuntu-2204-x64-4x'
      run: |
        sudo add-apt-repository ppa:ubuntu-toolchain-r/test
        sudo apt-get update
        sudo apt-get install gcc-13 g++-13
        sudo apt-get remove gcc-11 gcc-11 libstdc++-11-dev
        sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-13 20
        sudo update-alternatives --install /usr/bin/g++ gcc /usr/bin/g++-13 20
        sudo update-alternatives --install /usr/bin/cc cc /usr/bin/gcc-13 20
        sudo update-alternatives --install /usr/bin/c++ c++ /usr/bin/g++-13 20

    - uses: actions/checkout@v3

    # This is done to address the problem on macOS where .pg built in a directory of one
    # GitHub Action runner won't work when restored in another one since dylds have install_name pointing
    # to the original location. We include the hash of their path into the cache name.
    - name: Get path hash
      if: matrix.os == 'warp-macos-14-arm64-6x'
      run: |
        echo "PATH_SUFFIX=-$(pwd | sha256sum | awk '{print $1}')" >> $GITHUB_ENV

    # On other systems, make it explicitly empty
    - name: Get path hash
      if: matrix.os != 'warp-macos-14-arm64-6x'
      run: |
        echo "PATH_SUFFIX=" >> $GITHUB_ENV

    - uses: WarpBuilds/cache@v1
      with:
        path: .pg
        key: ${{ matrix.os }}-pg-${{ matrix.pgver }}-${{ matrix.build_type }}-${{ hashFiles('cmake/FindPostgreSQL.cmake') }}${{ env.PATH_SUFFIX }}

    - name: Configure
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{matrix.build_type}} -DPGVER=${{ matrix.pgver }}

    - name: Build
      run: cmake --build ${{github.workspace}}/build --parallel --config ${{matrix.build_type}}

    - name: Test
      working-directory: ${{github.workspace}}/build
      if: matrix.os != 'warp-macos-14-arm64-6x'
      run: TMPDIR=$RUNNER_TEMP USER=$(whoami) ctest --timeout 1000 --force-new-ctest-process  --repeat until-pass:10 --output-on-failure -j $(nproc) -C ${{matrix.build_type}}

    - name: Test (without docker)
      working-directory: ${{github.workspace}}/build
      if: matrix.os == 'warp-macos-14-arm64-6x'
      run: TMPDIR=$RUNNER_TEMP USER=$(whoami) ctest --timeout 1000 --force-new-ctest-process  --repeat until-pass:10 --output-on-failure -j $(nproc) -C ${{matrix.build_type}} -E '(minio|containers)'

    - uses: actions/upload-artifact@v4
      if: failure()
      with:
        name: ${{ matrix.os }}-${{ matrix.pgver }}-regression.diffs
        path: ${{ github.workspace }}/build/extensions/**/regression.diffs

    - name: Print error-related artifacts
      if: failure()
      run: |
        echo "- diffs: "
        find ${{github.workspace}}/build -name \*.diffs -exec echo "=== {}:" \; -exec cat {} \;
        echo "- postmaster.log: "
        find ${{github.workspace}}/build -name postmaster.log -exec echo "=== {}:" \; -exec cat {} \;
        echo "- initdb.log: "
        find ${{github.workspace}}/build -name initdb.log -exec echo "=== {}:" \; -exec cat {} \;

  # Ensure it can be built against externally-supplied Postgres
  build-external-pg:
    runs-on: warp-ubuntu-2204-x64-4x

    steps:
    - uses: actions/checkout@v3

    # Ada URL library requires a relatively modern compiler
    - name: Prepare GCC 13
      run: |
        sudo add-apt-repository ppa:ubuntu-toolchain-r/test
        sudo apt-get update
        sudo apt-get install gcc-13 g++-13
        sudo apt-get remove gcc-11 gcc-11 libstdc++-11-dev
        sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-13 20
        sudo update-alternatives --install /usr/bin/g++ gcc /usr/bin/g++-13 20
        sudo update-alternatives --install /usr/bin/cc cc /usr/bin/gcc-13 20
        sudo update-alternatives --install /usr/bin/c++ c++ /usr/bin/g++-13 20

    - name: Install necessary dependencies
      run: |
        sudo apt-get update
        sudo apt-get remove -f postgresql-14
        sudo apt-get install -f postgresql-server-dev-14 postgresql-14 postgresql-plpython3-14

    - name: Configure
      run: cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=Release -DPG_CONFIG=$(which pg_config)

    - name: Build
      run: cmake --build ${{github.workspace}}/build --parallel --config Release --target all --target package_extensions

  # Ensure every extension can be built independently
  build-extensions-independently:

    strategy:
      matrix:
        pgver: [ 17 ]
        os: [ warp-ubuntu-2204-x64-4x ]
        build_type: [ Debug ]
      fail-fast: false

    runs-on: ${{ matrix.os }}

    steps:
    - uses: actions/checkout@v3

    # Ada URL library requires a relatively modern compiler
    - name: Prepare GCC 13
      if: matrix.os == 'warp-ubuntu-2204-x64-4x'
      run: |
        sudo add-apt-repository ppa:ubuntu-toolchain-r/test
        sudo apt-get update
        sudo apt-get install gcc-13 g++-13
        sudo apt-get remove gcc-11 gcc-11 libstdc++-11-dev
        sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-13 20
        sudo update-alternatives --install /usr/bin/g++ gcc /usr/bin/g++-13 20
        sudo update-alternatives --install /usr/bin/cc cc /usr/bin/gcc-13 20
        sudo update-alternatives --install /usr/bin/c++ c++ /usr/bin/g++-13 20

    - run: ci/build-extensions-separately
